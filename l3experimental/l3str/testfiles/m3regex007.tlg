This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Bruno Le Floch
============================================================
TEST 1: regex_show
============================================================
*************************************************
* LaTeX warning: "regex/extra-rparen"
* 
* Extra right parenthesis ignored in regular expression.
*************************************************
> Compiled regex {a*|b??|(c{0}d{2,}e|[^fg\c [^BE][^\d ]\w ]){2,4}?)}:
+-branch
  char code 97, repeated 0 or more times, greedy
+-branch
  char code 98, repeated between 0 and 1 times, lazy
+-branch
  ,-group begin
  | char code 99, repeated 0 times
  | char code 100, repeated 2 or more times, greedy
  | char code 101
  +-branch
  | Don't match
  |   char code 102
  |   char code 103
  |   categories CMTPUDSLOA, negative class
  |     range [48,57]
  |   range [97,122]
  |   range [65,90]
  |   range [48,57]
  |   char code 95
  `-group end, repeated between 2 and 4 times, lazy
  char code 41.
<recently read> }
l.30   }
Defining \l_foo_regex on line ...
> Compiled regex variable \l_foo_regex:
+-branch
  assertion: anchor at start (\A)
  char code 97
+-branch
  char code 98
+-branch.
<recently read> }
l.30   }
> Compiled regex {a\c {bc}\u {c_space_tl}\c {\u {c_space_tl}|}}:
+-branch
  char code 97
  Match
    control sequence
    +-branch
      char code 98
      char code 99
  char 32, catcode 10
  Match
    control sequence
    +-branch
      char code 32
    +-branch.
<recently read> }
l.30   }
> Compiled regex {\u {l_tmpa_tl}*\c {\u {l_tmpa_tl}|x?}{3}|y*}:
+-branch
  control sequence \abc
  char code 42
  Match, repeated 3 times
    control sequence
    +-branch
      char code 92
      char code 97
      char code 98
      char code 99
      char code 32
    +-branch
      char code 120, repeated between 0 and 1 times, greedy
+-branch
  char code 121, repeated 0 or more times, greedy.
<recently read> }
l.30   }
> Compiled regex {a(?:bc(?|de|f){2}g|hi){3,4}?}:
+-branch
  char code 97
  ,-group begin (no capture)
  | char code 98
  | char code 99
  | ,-group begin (resetting)
  | | char code 100
  | | char code 101
  | +-branch
  | | char code 102
  | `-group end, repeated 2 times
  | char code 103
  +-branch
  | char code 104
  | char code 105
  `-group end, repeated between 3 and 4 times, lazy.
<recently read> }
l.30   }
Defining \l_bar_regex on line ...
> Compiled regex variable \l_bar_regex:
+-branch
  Fail.
<recently read> }
l.30   }
============================================================
============================================================
TEST 2: regex_show again
============================================================
> Compiled regex {[^\d \W \s ]*?[^a-z[:^cntrl:]A-Z]??}:
+-branch
  Don't match, repeated 0 or more times, lazy
    range [48,57]
    Reversed match
      range [97,122]
      range [65,90]
      range [48,57]
      char code 95
    char code 32
    char code 9
    char code 10
    char code 12
    char code 13
  Don't match, repeated between 0 and 1 times, lazy
    range [97,122]
    Reversed match
      range [0,31]
      char code 127
    range [65,90].
<recently read> }
l.41   }
> Compiled regex {[^\c [^L][^[:^alpha:]]]{2,}?}:
+-branch
  Don't match, repeated 2 or more times, lazy
    categories CBEMTPUDSOA, negative class
      Reversed match
        range [97,122]
        range [65,90].
<recently read> }
l.41   }
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rbrack"
! 
! Missing right bracket inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression where a character class was started
| with '[', but the matching ']' is missing.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rparen"
! 
! Missing right parentheses inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression with 2 more left parentheses than right
| parentheses.
|...............................................
> Compiled regex {(a(b|[^}:
+-branch
  ,-group begin
  | char code 97
  | ,-group begin
  | | char code 98
  | +-branch
  | | Pass
  | `-group end
  `-group end.
<recently read> }
l.41   }
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/c-missing-rbrace"
! 
! Missing right brace inserted for \c escape.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression where a '\c{...' construction was not
| ended with a closing brace '}'.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rbrack"
! 
! Missing right bracket inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression where a character class was started
| with '[', but the matching ']' is missing.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rparen"
! 
! Missing right parenthesis inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression with 1 more left parenthesis than right
| parenthesis.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rbrack"
! 
! Missing right bracket inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression where a character class was started
| with '[', but the matching ']' is missing.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/missing-rparen"
! 
! Missing right parenthesis inserted in regular expression.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.41   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| LaTeX was given a regular expression with 1 more left parenthesis than right
| parenthesis.
|...............................................
> Compiled regex {([\c {([}:
+-branch
  ,-group begin
  | Match
  |   control sequence
  |   +-branch
  |     ,-group begin
  |     | Fail
  |     `-group end
  `-group end.
<recently read> }
l.41   }
> Compiled regex {\c {[}{]}}:
+-branch
  Match
    control sequence
    +-branch
      Match
        char code 125
        char code 123.
<recently read> }
l.41   }
============================================================
============================================================
TEST 3: all escaped sequences
============================================================
> Compiled regex {\A \B \C \D \E \F \G \H \I \J \K \L \M \N \O \P \Q \R \S \T
\U \V \W \X \Y \Z }:
+-branch
  assertion: anchor at start (\A)
  negative assertion: word boundary
  char code 67
  Match
    Reversed match
      range [48,57]
  char code 69
  char code 70
  assertion: anchor at start of match (\G)
  Match
    Reversed match
      char code 32
      char code 9
  char code 73
  char code 74
  reset match start (\K)
  char code 76
  char code 77
  Match
    Reversed match
      char code 10
  char code 79
  char code 80
  char code 81
  char code 82
  Match
    Reversed match
      char code 32
      char code 9
      char code 10
      char code 12
      char code 13
  char code 84
  char code 85
  Match
    Reversed match
      range [10,13]
  Match
    Reversed match
      range [97,122]
      range [65,90]
      range [48,57]
      char code 95
  char code 88
  char code 89
  assertion: anchor at end (\Z).
<recently read> }
l.49   }
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/c-missing-category"
! 
! Invalid character 'd' following \c escape.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.49   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| In regular expressions, the \c escape sequence may only be followed by a
| left brace, a left bracket, or a capital letter representing a character
| category, namely one of ABCDELMOPSTU.
|...............................................
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! LaTeX error: "regex/u-missing-lbrace"
! 
! Missing left brace following \u escape.
! 
! See the LaTeX3 documentation for further information.
! 
! For immediate help type H <return>.
!...............................................  
l.49   }
|'''''''''''''''''''''''''''''''''''''''''''''''
| The \u escape sequence must be followed by a brace group with the name of
| the variable to use.
|...............................................
> Compiled regex {\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t
\u \v \w \x \y \z }:
+-branch
  char code 7
  assertion: word boundary
  range [48,57]
  char code 27
  char code 12
  char code 103
  Match
    char code 32
    char code 9
  char code 105
  char code 106
  char code 107
  char code 108
  char code 109
  char code 10
  char code 111
  char code 112
  char code 113
  char code 13
  Match
    char code 32
    char code 9
    char code 10
    char code 12
    char code 13
  char code 9
  char code 117
  range [10,13]
  Match
    range [97,122]
    range [65,90]
    range [48,57]
    char code 95
  char code 0
  char code 121
  assertion: anchor at end (\Z).
<recently read> }
l.49   }
> Compiled regex {\0\1\2\3\4\5\6\7\8\9}:
+-branch
  char code 48
  char code 49
  char code 50
  char code 51
  char code 52
  char code 53
  char code 54
  char code 55
  char code 56
  char code 57.
<recently read> }
l.49   }
============================================================
