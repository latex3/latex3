% \iffalse
%% File xo-page.dtx (C) Copyright 1999-2000 Frank Mittelbach, David Carlisle, Chris Rowley
%%                  (C) Copyright 2001,2004-2009 Frank Mittelbach, The LaTeX3 Project
%%                  (C) Copyright 2010-2012,2014,2019 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\RequirePackage{expl3}
\GetIdInfo $Id$
          {xo-page}
\ProvidesExplPackage{\ExplFileName}
  {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
% \fi
%
%
%
%
%
% \subsection{Declaring Float areas}
%
%
%
% Alternative interfaces:
%\begin{verbatim}
% \DeclareFloatArea {evenpage} {t} {2} {1}
%    {
%      class-close-list = {t12,t11,b11},
%      all-close-list  = ,
%      max-float-num   = 1,
%      ...
%    }
%
%
% \DeclareFloatArea {evenpage}
%    {
%      region          = t ,
%      column          = 2 ,
%      span            = 1 ,
%
%      class-close-list = {t12,t11,b11},
%      all-close-list  = ,
%      max-float-num   = 1,
%      ...
%    }
%
%
%
% \DeclareFloatArea
%    {
%      name-prefix     = evenpage ,
%      region          = t ,
%      column          = 2 ,
%      span            = 1 ,
%
%      class-close-list = {t12,t11,b11},
%      all-close-list  = ,
%      max-float-num   = 1,
%      ...
%    }
%\end{verbatim}
%
%
%
% \begin{macro}{\DeclareFloatArea}
% \begin{macro}{\xor_declare_float_area:nnn}
%    We declare new float areas and (for the moment) internally use the
%    template mechanism. But this is more or less overkill and should
%    probably be replaced in the end.
%    \begin{macrocode}
\DeclareDocumentCommand{\DeclareFloatArea}{O{default} m m}
  {
     \xor_declare_float_area:nnn {#1}{#2}{#3}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_declare_float_area:nnn #1 #2 #3 {
  \clist_put_right:Nn \g_xor_areas_known_clist{#2}
  \DeclareInstance{floatareasetup}{#1-#2}{std}
    {  area=#2 , #3 }
%    \end{macrocode}
%    We need to do some initialisation here in case the area isn't
%    really used. (Since it is added to |\g_xor_areas_known_clist| it will be
%    considered and that will die if the initialization isn't done)
%    \begin{macrocode}
  \UseInstance{floatareasetup}{#1-#2}
}
%    \end{macrocode}
% \end{macro}
%% \end{macro}

%  \begin{macro}{\g_pagesetup_max_float_int}
%
%    \begin{macrocode}
\int_new:N \g_pagesetup_max_float_int
%    \end{macrocode}
%  \end{macro}
%
%    \begin{macrocode}
\DeclareObjectType{floatareasetup}{0}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplateInterface{floatareasetup}{std}{0}{

%   region          : tokenlist      ,
%   column          : integer        ,
%   span            : integer        ,

   area             : tokenlist      ,

   class-close-list : tokenlist      ,
   all-close-list   : tokenlist      ,
   max-float-num    : integer        ,
 }

\int_new:N \l_floatareasetup_max_float_int
\tl_new:N  \l_floatareasetup_all_close_tl
\tl_new:N  \l_floatareasetup_class_close_tl
\tl_new:N  \l_floatareasetup_area_tl

\DeclareTemplateCode{floatareasetup}{std}{0}{

%   region          = \l_floatareasetup_region_tl ,
%   column          = \l_floatareasetup_column_num ,
%   span            = \l_floatareasetup_span_num ,

   area             = \l_floatareasetup_area_tl ,

   class-close-list = \l_floatareasetup_class_close_tl,
   all-close-list   = \l_floatareasetup_all_close_tl,
   max-float-num    = \l_floatareasetup_max_float_int,
 }
 {

  \AssignTemplateKeys

 % \tl_set:Nx \l_floatareasetup_area_tl
 %             {\l_floatareasetup_region_tl
 %              \l_floatareasetup_column_num
 %              \l_floatareasetup_span_num}

%    \end{macrocode}
%
%    Declare area data structures if necessary\ldots
%    \begin{macrocode}
  \cs_if_free:cT {g_xor_area_ \l_floatareasetup_area_tl _float_int}
              { \int_new:c {g_xor_area_ \l_floatareasetup_area_tl _float_int} }
  \cs_if_free:cT {g_xor_area_ \l_floatareasetup_area_tl _max_float_int}
              { \int_new:c {g_xor_area_ \l_floatareasetup_area_tl _max_float_int} }
%    \end{macrocode}
%    \ldots and initialize them
%    \begin{macrocode}
  \int_gset:cn {g_xor_area_ \l_floatareasetup_area_tl _max_float_int}
                \l_floatareasetup_max_float_int
  \clist_gset_eq:cN
        {g_xor_area_ \l_floatareasetup_area_tl _class_close_clist}
        \l_floatareasetup_class_close_tl
  \clist_gset_eq:cN
        {g_xor_area_ \l_floatareasetup_area_tl _all_close_clist}
        \l_floatareasetup_all_close_tl
%    \end{macrocode}
%    Let's not forget that area itself (some macros wouldn't like if
%    this is |\relax| rather than |\c_empty_tl|.
%    \begin{macrocode}
  \seq_gclear:c {g_xor_area_ \l_floatareasetup_area_tl _float_seq}
}
%    \end{macrocode}
%
%
%
%
% \subsection{A basic page setup template}
%
%
% \begin{macro}{\xor_test_named_key:Ncnn}
%    This should perhaps be made more general
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_test_named_key:Ncnn #1#2#3#4 {
  \cs_gset_eq:Nc #1{#2}
  \cs_if_free:NT #1
  {
    \PackageError{template}{#3~ unknown}
    {#3~ can~ be~ either~ #4}
  }
}
%    \end{macrocode}
% \end{macro}
%
%\begin{macro}{\l_pagesetup_flush_float_callout_constraint_tl}
%\begin{macro}{\l_pagesetup_flush_float_callout_span_constraint_tl}
%\begin{macro}{\l_pagesetup_flush_float_footnote_constraint_tl}
%    \begin{macrocode}
\tl_new:N \l_pagesetup_flush_float_callout_constraint_tl
\tl_new:N \l_pagesetup_flush_float_callout_span_constraint_tl
\tl_new:N \l_pagesetup_flush_float_footnote_constraint_tl
%    \end{macrocode}
%\end{macro}
%\end{macro}
%\end{macro}
%
%
% \begin{macro}{pagesetup2 (template)}
%    \begin{macrocode}
\DeclareObjectType{pagesetup2}{0}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{std (pagesetup2)}
%    \begin{macrocode}
\DeclareTemplateInterface{pagesetup2}{std}{0}{
   column-num    :   integer     ,
   column-width  :   length      ,
   column-height :   length      ,          % FMi tmp
   column-sep    :   length      ,
   max-float-num :   integer     ,
   float-callout-constraint               : tokenlist ,
   float-callout-span-constraint          : tokenlist ,
   bottom-float-footnote-constraint       : tokenlist ,
   flush-float-callout-constraint         : tokenlist ,
   flush-float-callout-span-constraint    : tokenlist ,
   flush-bottom-float-footnote-constraint : tokenlist ,
%
%    \end{macrocode}
%
%    \begin{macrocode}
   area-prefix            : tokenlist  = std      ,
   area-list              : tokenlist             ,
%    \end{macrocode}
%    \begin{macrocode}
   defer-class-close-list : tokenlist             ,
   defer-all-close-list   : tokenlist             ,
%    \end{macrocode}
%
%    \begin{macrocode}
   footnote-setup         : instance {footnotesetup} ,
%    \end{macrocode}
%
%    \begin{macrocode}
   float-float-sep        : skip                  ,
   float-area-sep         : skip                  ,
   float-text-sep         : skip                  ,
   float-inline-sep       : skip                  ,
%    \end{macrocode}
%
%    \begin{macrocode}
   grid-point-sep         : length                ,
  }

\cs_new:Npn \pagesetup_footnote_setup: {}

\tl_new:N \l_pagesetup_area_prefix_tl
\tl_new:N \l_pagesetup_float_footnote_constraint_tl
\tl_new:N \l_pagesetup_float_callout_span_constraint_tl
\tl_new:N \l_pagesetup_float_callout_constraint_tl


% this definition is no longer around in xtemplate:

\cs_new_nopar:Npn \TP_split_finite_skip_value:nnNN #1#2{
  \skip_split_finite_else_action:nnNN {#1} {
    \PackageError{template}{Value~ for~ key~ #2~ contains~ `fil(ll)'}
    {Only~ finite~ minus~ or~ plus~ parts~ are~ allowed~ for~ this~ key.}
  }
}
\cs_new_protected:Npn \skip_split_finite_else_action:nnNN
  {
     \skip_if_finite:nTF {#1}
       {
         #3 = \tex_gluestretch:D #1 \scan_stop:
         #4 = \tex_glueshrink:D #1 \scan_stop:
       }
       {
         #3 = \c_zero_skip
         #4 = \c_zero_skip
         #2
       }
  }


\DeclareTemplateCode{pagesetup2}{std}{0}{
   column-num    = global \g_xor_cols_int,
   column-width  = global \columnwidth,
   column-height = global \textheight,          % FMi tmp
   column-sep    = global \columnsep,
   max-float-num = global \g_pagesetup_max_float_int,
   float-callout-constraint            = \l_pagesetup_float_callout_constraint_tl,
   float-callout-span-constraint       = \l_pagesetup_float_callout_span_constraint_tl,
   bottom-float-footnote-constraint    = \l_pagesetup_float_footnote_constraint_tl,
   flush-float-callout-constraint      = \l_pagesetup_flush_float_callout_constraint_tl,
   flush-float-callout-span-constraint = \l_pagesetup_flush_float_callout_span_constraint_tl,
   flush-bottom-float-footnote-constraint =
                                          \l_pagesetup_flush_float_footnote_constraint_tl,
%
%    \end{macrocode}
%
%    \begin{macrocode}
   area-prefix            = \l_pagesetup_area_prefix_tl,
   area-list              = global \g_xor_areas_used_clist,
%    \end{macrocode}
%    \begin{macrocode}
   defer-class-close-list = global \g_xor_area_DDD_class_close_clist,
   defer-all-close-list   = global \g_xor_area_DDD_all_close_clist,
%    \end{macrocode}
%
%    \begin{macrocode}
   footnote-setup         = \pagesetup_footnote_setup:,
%    \end{macrocode}
%
%    \begin{macrocode}
   float-float-sep        = global \g_xor_float_float_skip,
   float-area-sep         = global \g_xor_float_area_skip,
   float-text-sep         = global \g_xor_float_text_skip,
   float-inline-sep       = global \g_xor_float_inline_skip,
%    \end{macrocode}
%
%    \begin{macrocode}
   grid-point-sep         = global \g_xor_grid_point_sep_dim,
  }
  {
%    \end{macrocode}
%    We start off with ensuring that we are at the top of a page. This
%    is a temporary solution until after pagesetup is more settled and
%    those bits which are only possible if there is nothing left on
%    recent contributions are properly separated from those things
%    which can be changed midway.
%    \begin{macrocode}
    \newpage

    \int_gset:Nn \g_xor_cols_int \c_one
    \int_gset:Nn \g_pagesetup_max_float_int{3}
    \tl_set:Nn \l_pagesetup_float_callout_constraint_tl {column}
    \tl_set:Nn \l_pagesetup_float_footnote_constraint_tl {none}
    \tl_set:Nn \l_pagesetup_flush_float_callout_constraint_tl
                {\l_pagesetup_float_callout_constraint_tl}
    \tl_set:Nn \l_pagesetup_flush_float_footnote_constraint_tl
                {\l_pagesetup_float_footnote_constraint_tl}
    \tl_set:Nn \l_pagesetup_float_callout_span_constraint_tl {flexible}
    \tl_set:Nn \l_pagesetup_flush_float_callout_span_constraint_tl
                {\l_pagesetup_float_callout_span_constraint_tl}
%    \end{macrocode}
%
%    \begin{macrocode}
    \TP_unset_key:N \g_xor_area_DDD_class_close_clist  % impossible value
    \clist_gclear:N \g_xor_area_DDD_all_close_clist
%    \end{macrocode}
%
%    \begin{macrocode}
% tmp:
    \cs_set_nopar:Npn \pagesetup_footnote_setup:{\UseTemplate{footnotesetup}{std}{}}
%    \end{macrocode}
%
%    \begin{macrocode}
    \dim_gset:Nn \g_xor_grid_point_sep_dim \c_zero_dim  % no grid points by default

    \AssignTemplateKeys
%    \end{macrocode}
%
%    \begin{macrocode}
     \dim_compare:nNnTF \g_xor_grid_point_sep_dim = \c_zero_dim
     {
       \cs_gset_eq:NN \xor_snap_to_grid:nn \xor_snap_to_grid_dummy:nn
%    \end{macrocode}
%    Next two lines need some refinement, we need some mechanism to
%    fully disable those grid points. |\IgnoreAlignToGrid| doesn't do
%    the trick.\footnote{FIX!}
%    \begin{macrocode}
       \IgnoreAlignToGrid
       \cs_gset_eq:NN\AlignToGrid_std: \prg_do_nothing:
     }
     {
       \cs_gset_eq:NN \xor_snap_to_grid:nn \xor_snap_to_grid_std:nn
       \ObeyAlignToGrid
     }
%    \end{macrocode}
%    Split the |\g_xor_float_text_skip| specification and store the
%    minus part in |\g_xor_float_text_shrink_dim|. Right now the plus
%    part is not used. Actually this is only really necessary if we do
%    grid typesetting but we do it anyway so that the spec is always
%    checked for offending infinite stretch.
%    \begin{macrocode}
     \TP_split_finite_skip_value:nnNN
       \g_xor_float_text_skip
       {float-text-sep}
       \l_tmpa_dim
       {\global\g_xor_float_text_shrink_dim}
%    \end{macrocode}
%
%    \begin{macrocode}
     \TP_split_finite_skip_value:nnNN
       \g_xor_float_inline_skip
       {float-inline-sep}
       \l_tmpa_dim
       {\global\g_xor_float_inline_shrink_dim}
    \skip_gset:Nn \g_xor_float_inline_skip {\c_one \g_xor_float_inline_skip}
%    \end{macrocode}
%
%    \begin{macrocode}
    \dim_gset:Nn \hsize     \columnwidth
    \dim_gset:Nn \linewidth \columnwidth

% all taken away from AtBeginDocument (where it is was added in xo-final)
  \dim_set:Nn \l_tmpa_dim {\headheight + \headsep}
  \cs_gset_nopar:Npx \pagebodytopvpos {\dim_use:N \l_tmpa_dim}

  \dim_set:Nn \l_tmpa_dim {\l_tmpa_dim + \textheight}
  \cs_gset_nopar:Npx \pagebodybotvpos {\dim_use:N \l_tmpa_dim}

%% horiz
  \dim_set:Nn \l_tmpa_dim {\columnwidth + \columnsep}
  \cs_gset_nopar:Npx \columndisplacement {\dim_use:N \l_tmpa_dim}

% Also record total width of textarea (used for header/footer
% placement

  \dim_gset:Nn \textwidth {\columndisplacement * \g_xor_cols_int -
                           \columnsep}
%    \end{macrocode}
%
%    Perhaps we could use |\g_xor_areas_known_clist| instead and save the
%    test (would need a change in xo-place as well!).\footnote{Check!}
%    \begin{macrocode}
    \if_TP_key_unset:NT \g_xor_area_DDD_class_close_clist
       { \clist_gset_eq:NN \g_xor_area_DDD_class_close_clist \g_xor_areas_used_clist }
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_std_check_callout_constraints:n
        {xor_check_callout_ \l_pagesetup_float_callout_constraint_tl :n}
        {float-callout-constraint}
        {`none',~ `page',~ `column',~ or~ `after'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_check_callout_constraints_relaxed:n
        {xor_check_callout_ \l_pagesetup_flush_float_callout_constraint_tl :n}
        {flush-float-callout-constraint}
        {`none',~ `page',~ `column',~ or~ `after'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_check_some_constraints_std:
        {xor_check_float_footnote_ \l_pagesetup_float_footnote_constraint_tl :}
        {bottom-float-footnote-constraint}
        {`none'~ or~ `forbidden'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_check_some_constraints_relaxed:
        {xor_check_float_footnote_ \l_pagesetup_flush_float_footnote_constraint_tl :}
        {flush-bottom-float-footnote-constraint}
        {`none'~ or~ `forbidden'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_calculate_float_col_std:
        {xor_calculate_float_col_ \l_pagesetup_float_callout_span_constraint_tl :}
        {float-callout-span-constraint}
        {`strict'~ or~ `flexible'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_test_named_key:Ncnn
        \xor_calculate_float_col_relaxed:
        {xor_calculate_float_col_ \l_pagesetup_flush_float_callout_span_constraint_tl :}
        {flush-float-callout-span-constraint}
        {`strict'~ or~ `flexible'}
%    \end{macrocode}
%
%    \begin{macrocode}
    \cs_gset_eq:NN \xor_check_float_constraints:    \xor_check_some_constraints_std:
    \cs_gset_eq:NN \xor_check_callout_constraints:n \xor_std_check_callout_constraints:n
    \cs_gset_eq:NN \xor_calculate_float_col: \xor_calculate_float_col_std:
%    \end{macrocode}
%
%    \begin{macrocode}
    \clist_map_inline:Nn \g_xor_areas_used_clist
    {
%    \end{macrocode}
%    Perhaps the instance  should be called the moment we declare the
%    area. On the other hand calling it within the page setup would
%    allow to use collections!\footnote{Think and decide}
%    \begin{macrocode}
     \IfInstanceExistTF{floatareasetup}{\l_pagesetup_area_prefix_tl - ##1}
       { \UseInstance{floatareasetup}{\l_pagesetup_area_prefix_tl - ##1} }
       { \UseInstance{floatareasetup}{default - ##1} }
    }
%    \end{macrocode}
%
%    \begin{macrocode}
    \pagesetup_footnote_setup:
%    \end{macrocode}
%
%    Finally another bit of the initialisation that we have to redo at
%    this point since now some of the values may have
%    changed.\footnote{Temporary solution until the initialization bit
%    and the pagesetup is properly sorted out.}
%    \begin{macrocode}
    \xor_next_page_setup:
%    \end{macrocode}
%
%    \begin{macrocode}
    \xor_collect_setup:
  }
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
%
% \endinput
