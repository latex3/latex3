% \iffalse
%% File xo-pagestyle.dtx (C) Copyright 2007-2009 Frank Mittelbach, LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\RequirePackage{l3bootstrap}
\GetIdInfo $Id$
          {xo-pagestyle (part of xor)}
\ProvidesExplPackage{\ExplFileName}
  {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
% \fi
%
%\iffalse
%
%<*driver>

\ExplSyntaxOff

\documentclass{ltxdoc}


\newcommand\fontwordspace{\texttt{\textbackslash fontwordspace}}
\newcommand\fontextraspace{\texttt{\textbackslash fontextraspace}}
\newcommand\NoValue{\texttt{\textbackslash NoValue}}

\newcommand\PARM[1]{parameter \textbf{#1}}

\newcommand\key[1]{\textbf{#1}}

\usepackage{template-doc}

%
 \begin{document}
 \catcode`\_=11
 \catcode`\:=11
 \DocInput{xo-pagestyle.dtx}
 \end{document}
%</driver>
%
% \fi
%
% 
%
%
% \title{The \textsf{xo-pagestyle} package\thanks{This file
%         has version number \ExplFileVersion, last
%         revised \ExplFileDate.}}
% \author{FMi}
% \date{\filedate}
%
%  \maketitle
%
% \tableofcontents
%
%
% \bigskip
%
% \begin{abstract}
%    This package defines templates to set up and manipulate running headers
%    and footers for pages produced by the new output routine
%    (\texttt{xor}). It currently provides an interface similar to \LaTeXe{} to
%    manipulate these ``pagestyles'' within the document.  However, with more
%    components of the page setup becoming available this might change.
% \end{abstract}
%
%
%
% \section{Introduction}
%
% The layout of the running header for footer may changes depending on the
% type of page  that is produced, e.g., a regular verso text page may be a
% mirror image of a regular recto text page, or it may show different
% information in different places. Furthermore special pages, such as float
% pages, may have special running headers or footers. The new output routine
% solves this, by calling different ``pagestyle'' instances in
% different circumstances. These are:
% \begin{center}
%   \begin{tabular}{>{\ttfamily}ll}
%     firstpage        & First page of the document (assumed to be odd-numbered)  \\
%     regularpage-odd  & A regular right-hand text page (potentially with floats) \\
%     regularpage-even & A regular left-hand text page (potentially with floats)  \\
%     floatpage-odd    & A right-hand page with only floats               \\
%     floatpage-even   & A left-hand page with only floats                \\
%   \end{tabular}
% \end{center}
%
% Special pagestyles that depend on the document content (e.g., when a new
% chapter starts) are currently produced by the same method as in \LaTeXe{},
% i.e., using |\thispagestyle| however this might change to generate instances
% with names like |Aheadpage-odd|.
%
% To set up the document layout for running headers and footers named
% pagestyle instances are defined first representing the layout for individual
% pages. These instances are then combined under one or more named
% ``pagestylesetup'' instances.  Basically these attach the individual
% pagestyles to the above set of situations.\footnote{Technically, the OR does
% not call an instance name \texttt{regularpage-odd} but instead calls
% corresponding command such as \texttt{\bslash xor_pagestyle_text_odd:} and
% it is the responsibility of the ``pagestylesetup'' template to correctly
% define these commands.}
%
% The interface for activating a particular ``pagestylesetup'' instance is
% currently through the \LaTeXe{} commands |\pagestyle| (setting things up for
% the current and following pages (scoped)) and |\thispagestyle| (setting the
% layout up for the current page only (global declaration)).

%  To distinguish between different parts of the document
%  (frontmatter, mainmatter, backmatter) collection instances for these
%  regions can be  declared.\footnote{Not implemented yet}
%
%
%
%
%
% \section{Template types}
%
%
% \begin{TemplateInterfaceDescription}{pagestyle}
%
%   \TemplateArgument{none}{---}
%
%   \TemplateSemantics
%
%    Sets up the running header and footer information and layout to be used
%    on one page
%    \begin{itemize}
%    \item Can draw from material on the page using
%       methods like |\thepage| or the mark mechanism.
%    \item Presentation my vary according to certain aspects of the page. For
%       some such aspects (e.g., |\IfTopFloats|) directives are available that
%       query those aspects. They can be 
%       used within all instances.
%    \end{itemize}
%
%    The ultimate goal of a pagestyle template is to define the following two
%    functions: |\xor_generate_running_head:| to produce the running head and
%    |\xor_generate_running_foot:| to produce the running footer.
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateInterfaceDescription}{pagestylesetup}
%
%   \TemplateArgument{none}{---}
%
%   \TemplateSemantics
%
%    It is the task of the pagestylesetup templates to provide definitions for
%    the followings commands used in the OR:
% \begin{center}
%   \begin{tabular}{ll}
%     |\xor_pagestyle_first:|        & First page of the document          \\
%     |\xor_pagestyle_text_odd:|     & A regular right-hand text page      \\
%     |\xor_pagestyle_text_even:|    & A regular left-hand text page       \\
%     |\xor_pagestyle_float_odd:|    & A right-hand page with only floats  \\
%     |\xor_pagestyle_float_even:|   & A left-hand page with only floats   \\
%   \end{tabular}
% \end{center}
%
%     The commands themselves (or the template itself) also need to provide
%    definitions for |\xor_generate_running_head:| and
%    |\xor_generate_running_foot:| which can be achieved by making each of the
%    above commands a call to an instance of type ``pagestyle''.
%
% \end{TemplateInterfaceDescription}
%
%
%
% \section{Templates}
%
% \begin{TemplateDescription}{pagestyle}{std}
%
%   \TemplateKey{ inherit-from }{i}
%      { inherit settings from another pagestyle instance; other settings overwrite }
%      { \emph{do not inherit} }
%
%
%   \TemplateKey{ head-decls }{f0}
%      { declarations for fonts color etc to be used withing the running head }
%      { \emph{empty} }
%
%
%   \TemplateKey{ head-left }{f0}
%      { material placed on the left of the running head }
%      { \emph{empty} }
%
%   \TemplateKey{ head-center }{f0}
%      { material placed in the center of the running head }
%      { \emph{empty} }
%
%   \TemplateKey{ head-right }{f0}
%      { material placed on the right of the running head }
%      { \emph{empty} }
%
%
%   \TemplateKey{ head-offset-left }{l}
%      { amount the running head sticks out to the left }
%      { 0pt }
%
%   \TemplateKey{ head-offset-right }{l}
%      { amount the running head sticks out to the right }
%      { 0pt }
%
%
%   \TemplateKey{ foot-decls }{f0}
%      { declarations for fonts color etc to be used withing the running foot }
%      { \emph{empty} }
%
%
%   \TemplateKey{ foot-left }{f0}
%      { material placed on the left of the running foot }
%      { \emph{empty} }
%
%   \TemplateKey{ foot-center }{f0}
%      { material placed in the center of the running foot }
%      { \emph{empty} }
%
%   \TemplateKey{ foot-right }{f0}
%      { material placed on the right of the running foot }
%      { \emph{empty} }
%
%
%   \TemplateKey{ foot-offset-left }{l}
%      { amount the running foot sticks out to the left }
%      { 0pt }
%
%   \TemplateKey{ foot-offset-right }{l}
%      { amount the running foot sticks out to the right }
%      { 0pt }
%
%
%
%   \TemplateSemantics
%
%    Standard template that sets up the layout for a running header and footer
%    on the page. This particular implementation supports:
% \begin{itemize}
% \item
%    placing material to the left, right, or in the center of the running
%    header or footer (overlaps are not checked for in this version)
% \item
%    setting up fonts, color for the header/footer
% \item
%    extending the header / footer to the left or the right with respect to
%    the text area (values can be negative)
% \end{itemize}
%
%    Not supported at the moment:
% \begin{itemize}
% \item
%    rules below or above the running header/footer area
% \item
%    everything else not mentioned :-)
% \end{itemize}
%
% \end{TemplateDescription}
%
%
%
%
%
%
% \begin{TemplateDescription}{pagestylesetup}{std}
%
%   \TemplateKey{ regularpage-odd }{i}
%      { page style used on odd (right hand) text pages }
%      { \emph{none} }
%
%   \TemplateKey{ regularpage-even }{i}
%      { page style used on even (left hand) text pages }
%      { value of \texttt{regularpage-odd} }
%
%   \TemplateKey{ firstpage }{i}
%      { page style used on the very first page of the document }
%      { value of \texttt{regularpage-odd} }
%
%   \TemplateKey{ floatpage-odd }{i}
%      { page style used on odd (right hand) float pages }
%      { value of \texttt{regularpage-odd} }
%
%   \TemplateKey{ floatpage-even }{i}
%      { page style used on even (left hand) float pages }
%      { value of \texttt{regularpage-even} }
%
%   \TemplateSemantics
%
%    This standard template provides a named collection of pagestyles using
%    appropriate defaults for missing cases.
%
% \end{TemplateDescription}
%
% 
%
%
% \section{Commands} 
%
% \DescribeMacro\pagestyle
%    Interprets its argument as an instance of ``pagestylesetup'' and actives
%    it (and the pagestyles it defines) for the current and following pages. 
% 
% \DescribeMacro\thispagestyle
%    Interprets its argument as an instance of ``pagestylesetup'' and actives
%    it (and the pagestyles it defines) for the current page only. In contrast
%    to |\pagestyle| this is a global setting. Specifying an empty argument is
%    equivalent to canceling any previously set up special pagestyle.
%    
%
% \DescribeMacro\IfTopFloatsTF
% \DescribeMacro\IfBottomsFloatsTF
%    These conditionals execute their first (true) argument if there are
%    floats in the respective region on the current page. Otherwise they
%    execute their second argument.\footnote{Not yet implemented}.
%
% 
%
% \StopEventually{}
%
% \section{Implementation}
%
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%    
%
% \subsection{User commands}
%
%  \begin{macro}{\pagestyle}
%    \LaTeXe{} command to set up a pagestyle for the current and following pages.
%
%    It its argument and assumes that it is an instance of type
%    pagestylesetup.  It make a simple check to see if an instance of this
%    name exists and then records the name in a local (!) variable for later
%    use.
%    \begin{macrocode}
\cs_set_nopar:Npn \pagestyle #1 {
  \IfInstanceExistTF {pagestylesetup} {#1}
      { \tl_set:Nn \l_xor_curr_pagestyle_tl {#1} }
      \ERROR
}
%    \end{macrocode}
%  \end{macro}
%

%  \begin{macro}{\l_xor_curr_pagestyle_tl}
%    Local tl var.~to hold the name of the current pagestyle in force.
%    \begin{macrocode}
\tl_new:N \l_xor_curr_pagestyle_tl
\tl_set:Nn \l_xor_curr_pagestyle_tl {plain}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\thispagestyle}
%    Page style changes for a single page (the current one) are specified
%    through |\thispagestyle| It works like |\pagestyle| but records its
%    argument in a different variable. If called with an empty argument it
%    cancels any special pagestyle for the current page
%    \begin{macrocode}
\cs_set_nopar:Npn \thispagestyle #1 {
  \IfInstanceExistTF {pagestylesetup} {#1}
      { \tl_gset:Nn \g_xor_this_pagestyle_tl {#1} }
      { \tl_if_empty:nTF {#1}
           { \tl_gclear:N \g_xor_this_pagestyle_tl } % cancel current
                                                       % special style
           \ERROR
      }
}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\g_xor_this_pagestyle_tl}
%    Global tl var.~to hold the name of a special pagestyle for this page; or
%    empty in which case the current pagestyle stored in
%    |\l_xor_curr_pagestyle_tl| will be used.
%    \begin{macrocode}
\tl_new:N \g_xor_this_pagestyle_tl
%    \end{macrocode}
%  \end{macro}
%
%
%
%
% \subsection{OR interface}
%
%  \begin{macro}{\xor_run_pagestyle_instance:}
%    When a page is ready to be typeset the OR will first check if a special
%    pagestyle should be used and then runs
%    |\UseInstance{pagestylesetup}{<variable>}| with the value from either
%    |\pagestyle| or |\thispagestyle|. In this way a collection instance for
%    (frontmatter, mainmatter, backmatter) is automatically be taken into
%    account at this point. This is achieved through the following code:
%    \begin{macrocode}
\cs_new_nopar:Npn  \xor_run_pagestyle_instance: {
  \tl_if_empty:NTF \g_xor_this_pagestyle_tl 
    { \UseInstance{pagestylesetup} \l_xor_curr_pagestyle_tl }
    { \UseInstance{pagestylesetup} \g_xor_this_pagestyle_tl 
      \tl_gclear:N \g_xor_this_pagestyle_tl
    }
}
\cs_set_nopar:Npn  \xor_run_pagestyle_instance: {
  \tl_if_empty:NTF \g_xor_fpc_pagestyle_tl 
    { 
     \tl_if_empty:NTF \g_xor_this_pagestyle_tl 
       { \tl_gset_eq:NN \g_xor_used_pagestyle_tl \l_xor_curr_pagestyle_tl }
       { \tl_gset_eq:NN \g_xor_used_pagestyle_tl \g_xor_this_pagestyle_tl 
	 \tl_gclear:N \g_xor_this_pagestyle_tl
       }
    }
    { \tl_gset_eq:NN \g_xor_used_pagestyle_tl \g_xor_fpc_pagestyle_tl 
      \tl_gclear:N \g_xor_fpc_pagestyle_tl
    }
%<*trace>
 \trace:n{Pagestylesetup~ used:~ \g_xor_used_pagestyle_tl}
%</trace>
 \UseInstance{pagestylesetup} \g_xor_used_pagestyle_tl
}
%    \end{macrocode}
%  \end{macro}
%


%  \begin{macro}{\g_xor_used_pagestyle_tl}
%    
%    \begin{macrocode}
\tl_new:N \g_xor_used_pagestyle_tl
\tl_gset:Nn \g_xor_used_pagestyle_tl {UNDEFINED}
%    \end{macrocode}
%  \end{macro}

%  \begin{macro}{\g_xor_fpc_pagestyle_tl}
%    
%    \begin{macrocode}
\tl_new:N \g_xor_fpc_pagestyle_tl
%    \end{macrocode}
%  \end{macro}

%
%  \begin{macro}{\xor_pagestyle_text_odd:}
%  \begin{macro}{\xor_pagestyle_text_even:}
%  \begin{macro}{\xor_pagestyle_first:}
%  \begin{macro}{\xor_pagestyle_float_odd:}
%  \begin{macro}{\xor_pagestyle_float_even:}
%    The commands executed within the OR depending on the type of page being
%    built. They get their real values through the |pagestylesetup| template(s).
%    \begin{macrocode}
\cs_new_eq:NN \xor_pagestyle_text_odd:   \prg_do_nothing:
\cs_new_eq:NN \xor_pagestyle_text_even:  \prg_do_nothing:
\cs_new_eq:NN \xor_pagestyle_first:      \prg_do_nothing:
\cs_new_eq:NN \xor_pagestyle_float_odd:  \prg_do_nothing:
\cs_new_eq:NN \xor_pagestyle_float_even: \prg_do_nothing:
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
%
% \subsection{Template setup}
%
%
%  \begin{macro}{pagestyle (templatetype)}
%  \begin{macro}{pagestylesetup (templatetype)}
%    Declaring the template types:
%    \begin{macrocode}
\DeclareObjectType{pagestyle}{0}
\DeclareObjectType{pagestylesetup}{0}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
%

%  \begin{macro}{\l_xor_pagestyle_head_offset_left_dim}
%  \begin{macro}{\l_xor_pagestyle_head_offset_right_dim}
%  \begin{macro}{\l_xor_pagestyle_head_width_dim}
%  \begin{macro}{\l_xor_pagestyle_foot_offset_left_dim}
%  \begin{macro}{\l_xor_pagestyle_foot_offset_right_dim}
%  \begin{macro}{\l_xor_pagestyle_foot_width_dim}
%    Implementing the pagestyle template below requires a bunch of dimen
%    registers that hold various information.\footnote{They must be declared
%    prior to declaring the template as they receive defaults already in that
%    process---looks like a bug in the template package to me.}
%    \begin{macrocode}
\dim_new:N\l_xor_pagestyle_head_offset_left_dim
\dim_new:N\l_xor_pagestyle_head_offset_right_dim
\dim_new:N\l_xor_pagestyle_foot_offset_left_dim
\dim_new:N\l_xor_pagestyle_foot_offset_right_dim
%    \end{macrocode}
%    The calculated total width of header and footer are stored in these
%    registers: 
%    \begin{macrocode}
\dim_new:N\l_xor_pagestyle_head_width_dim
\dim_new:N\l_xor_pagestyle_foot_width_dim
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}

%\begin{macro}{\xor_pagestyle_inherited:}
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_pagestyle_inherited: { }
%    \end{macrocode}
%\end{macro}

%  \begin{macro}{std (pagestyle)}
%    
%    \begin{macrocode}
\tl_new:N \l_xor_pagestyle_foot_center_tl
\tl_new:N \l_xor_pagestyle_foot_decls_tl
\tl_new:N \l_xor_pagestyle_foot_left_tl
\tl_new:N \l_xor_pagestyle_foot_right_tl
\tl_new:N \l_xor_pagestyle_head_center_tl
\tl_new:N \l_xor_pagestyle_head_decls_tl
\tl_new:N \l_xor_pagestyle_head_left_tl
\tl_new:N \l_xor_pagestyle_head_right_tl

%    \end{macrocode}
%
%    may not be able to inherit in a good way --- needed?
%
%    \begin{macrocode}
\DeclareTemplateInterface{pagestyle}{std}{0}
  {
    inherit-from       : instance {pagestyle}  ,
%    \end{macrocode}
%    
%    \begin{macrocode}
    head-decls         : function 0  =       ,
    head-left          : function 0  =       ,
    head-center        : function 0  =       ,
    head-right         : function 0  =       ,
    head-offset-left   : length      = 0pt   ,
    head-offset-right  : length      = 0pt   ,
%    \end{macrocode}
%    
%    \begin{macrocode}
    foot-decls         : function 0  =       ,
    foot-left          : function 0  =       ,
    foot-center        : function 0  =       ,
    foot-right         : function 0  =       ,
    foot-offset-left   : length      = 0pt   ,
    foot-offset-right  : length      = 0pt   ,
  }

\DeclareTemplateCode{pagestyle}{std}{0}
  {
    inherit-from       =  \xor_pagestyle_inherited: ,
%    \end{macrocode}
%    
%    \begin{macrocode}
    head-decls         =  \l_xor_pagestyle_head_decls_tl          ,
    head-left          =  \l_xor_pagestyle_head_left_tl           , 
    head-center        =  \l_xor_pagestyle_head_center_tl         ,
    head-right         =  \l_xor_pagestyle_head_right_tl          , 
    head-offset-left   =  \l_xor_pagestyle_head_offset_left_dim   ,
    head-offset-right  =  \l_xor_pagestyle_head_offset_right_dim  ,
%    \end{macrocode}
%    
%    \begin{macrocode}
    foot-decls         =  \l_xor_pagestyle_foot_decls_tl          ,
    foot-left          =  \l_xor_pagestyle_foot_left_tl           ,
    foot-center        =  \l_xor_pagestyle_foot_center_tl         ,
    foot-right         =  \l_xor_pagestyle_foot_right_tl          ,
    foot-offset-left   =  \l_xor_pagestyle_foot_offset_left_dim   ,
    foot-offset-right  =  \l_xor_pagestyle_foot_offset_right_dim  ,
  }
  {
   \AssignTemplateKeys
%    \end{macrocode}
%    The width of the running header or footer is calculated from the
%    |\textwidth| plus the offsets on either side:
%    \begin{macrocode}
   \dim_set:Nn \l_xor_pagestyle_head_width_dim
      { \l_xor_pagestyle_head_offset_left_dim + \textwidth + 
        \l_xor_pagestyle_head_offset_right_dim }
   \dim_set:Nn \l_xor_pagestyle_foot_width_dim
      { \l_xor_pagestyle_foot_offset_left_dim + \textwidth + 
        \l_xor_pagestyle_foot_offset_right_dim }
%    \end{macrocode}
%    Finally the template has to define the commands
%    |\xor_generate_running_head:| and |\xor_generate_running_foot:| that
%    generate the running header and footer respectively (as long as there is
%    only a single template we could even do that globally):
%    \begin{macrocode}
   \cs_set_eq:NN \xor_generate_running_head: \xor_generate_running_head_std:
   \cs_set_eq:NN \xor_generate_running_foot: \xor_generate_running_foot_std:
  }
%    \end{macrocode}
%  \end{macro}
%



%  \begin{macro}{\xor_generate_running_box:nnnnnnnn}
%    Helper function to build the running header / footer boxes. Modeled after
%    what fancyhdr does. To be replaced at some point.
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_generate_running_box:nnnnnnnn #1 #2 #3 #4 #5 #6 #7 #8 {
  #1
% frame there only for testing
 \frame{
   \hbox to #2 {
% initialize fonts etc
     \normalsize \normalfont \normalcolor #4

     \rlap { \tabular [#3]{@{}l} #5 \endtabular }
     \hfill
     \tabular [#3]{@{}c} #6 \endtabular 
     \hfill
     \llap { \tabular [#3]{r@{}} #7 \endtabular }
    }
  }
  #8
}
%    \end{macrocode}
%  \end{macro}


%  \begin{macro}{\xor_generate_running_head_std:}
%  \begin{macro}{\xor_generate_running_foot_std:}
%    Commands to build the running header / footer in the template |std|.
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_generate_running_head_std: {
   \xor_generate_running_box:nnnnnnnn 
      { \null\hskip -\l_xor_pagestyle_head_offset_left_dim }
      \l_xor_pagestyle_head_width_dim
      {b}
      \l_xor_pagestyle_head_decls_tl
      \l_xor_pagestyle_head_left_tl
      \l_xor_pagestyle_head_center_tl
      \l_xor_pagestyle_head_right_tl
      {}
}
\cs_new_nopar:Npn \xor_generate_running_foot_std: {
   \xor_generate_running_box:nnnnnnnn 
      { \null\hskip -\l_xor_pagestyle_foot_offset_left_dim }
      \l_xor_pagestyle_foot_width_dim
      {t}
      \l_xor_pagestyle_foot_decls_tl
      \l_xor_pagestyle_foot_left_tl
      \l_xor_pagestyle_foot_center_tl
      \l_xor_pagestyle_foot_right_tl
      {}
}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}


%
%
%  \begin{macro}{std (pagestylesetup)}
%    
%    \begin{macrocode}
\DeclareTemplateInterface{pagestylesetup}{std}{0}
  {
    regularpage-odd  : instance {pagestyle} ,
    regularpage-even : instance {pagestyle} ,
    firstpage        : instance {pagestyle} ,
    floatpage-odd    : instance {pagestyle} ,
    floatpage-even   : instance {pagestyle} ,
  }

\DeclareTemplateCode{pagestylesetup}{std}{0}
  {
    regularpage-odd  = \xor_pagestyle_text_odd: ,
    regularpage-even = \xor_pagestyle_text_even: ,
    firstpage        = \xor_pagestyle_first: ,
    floatpage-odd    = \xor_pagestyle_float_odd: ,
    floatpage-even   = \xor_pagestyle_float_even: ,
  }
  {
   \TP_unset_key:N \xor_pagestyle_text_odd:
   \TP_unset_key:N \xor_pagestyle_text_even:
   \TP_unset_key:N \xor_pagestyle_first:
   \TP_unset_key:N \xor_pagestyle_float_odd:
   \TP_unset_key:N \xor_pagestyle_float_even:
   \AssignTemplateKeys
%    \end{macrocode}
%    As a minimum the instance needs to declare |regularpage-odd|.
%    \begin{macrocode}
   \if_TP_key_unset:NT \xor_pagestyle_text_odd:
      { \ERROR }
%    \end{macrocode}
%    All other pages will be set up like |regularpage-odd| if nothing is
%    specified.
%    \begin{macrocode}
   \if_TP_key_unset:NT \xor_pagestyle_text_even:
      { \cs_set_eq:NN \xor_pagestyle_text_even: \xor_pagestyle_text_odd: }
   \if_TP_key_unset:NT \xor_pagestyle_first:
      { \cs_set_eq:NN \xor_pagestyle_first: \xor_pagestyle_text_odd: }
   \if_TP_key_unset:NT \xor_pagestyle_float_odd:
      { \cs_set_eq:NN \xor_pagestyle_float_odd: \xor_pagestyle_text_odd: }
%    \end{macrocode}
%    The only exception is |floatpage-even| which gets as a default the value
%    of |regularpage-even| since this seems more appropriate.
%    \begin{macrocode}
   \if_TP_key_unset:NT \xor_pagestyle_float_even:
      { \cs_set_eq:NN \xor_pagestyle_float_even: \xor_pagestyle_text_even: }
  }
%    \end{macrocode}
%  \end{macro}
%
%
%    
%    
% \section{Default instances}
%
% \subsection{Pagestyle setup}
%
%    \LaTeXe{}'s standard pagestyles except for |myheadings| as that one
%    differs from |headings| only with respect to who generates the header
%    content.
%    \begin{macrocode}
\DeclareInstance{pagestylesetup}{empty}{std}
   { regularpage-odd = empty }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagestylesetup}{plain}{std}
   { regularpage-odd = plain }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagestylesetup}{headings}{std}
   {
     regularpage-odd  = headings-page-odd ,
     regularpage-even = headings-page-even
   }
%    \end{macrocode}
%    
%    
%    
% \subsection{Single pagestyles}
%
%    The following single pagestyles implement the \LaTeXe{} defaults. 
%    \begin{macrocode}
\DeclareInstance{pagestyle}{empty}{std}{}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagestyle}{plain}{std}
   { foot-center = \thepage }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagestyle}{headings-page-odd}{std}
   {
    head-left  = \slshape \FirstMark{rightmark} ,
    head-right = \thepage ,
   }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagestyle}{headings-page-even}{std}
   {
    head-left  = \thepage ,
    head-right = \slshape \LastMark{leftmark} ,
   }
%    \end{macrocode}
%    
%    
%    
%    
%    
%    
%    
% \subsection{Tests}
%
%    Stuff here doesn't really belong to the package, it is only there to have
%    a few test examples while developing.
%    \begin{macrocode}
\DeclareInstance{pagestyle}{firstpage-test}{std}
   {
    foot-decls = \scriptsize           ,
    foot-center  = ---~ \today ~---    ,
    foot-right = \copyright{} ~ THE~ AUTHOR ,
    foot-offset-right = -40pt ,
   }
\DeclareInstance{pagestyle}{headings-page-odd-test}{std}
   {
    head-left  = \slshape \FirstMark{rightmark} ,
    head-right = \thepage ,
    head-offset-right = 24pt ,
   }
\DeclareInstance{pagestyle}{headings-page-even-test}{std}
   {
    head-left  = \thepage ,
    head-right = \slshape \LastMark{leftmark} ,
    head-offset-left = 24pt ,
   }
\DeclareInstance{pagestylesetup}{test}{std}
   {
     regularpage-odd  = headings-page-odd-test ,
     regularpage-even = headings-page-even-test,
     firstpage        = firstpage-test,
   }

%    \end{macrocode}
%    Activate the above:
%    \begin{macrocode}
\pagestyle{test}
%    \end{macrocode}
%
%    In \LaTeXe{} the pagestyles also set commands like |\sectionmark|. We
%    don't do that as this is probably better placed as part of the heading
%    command setup. But since that is missing at the moment we need to do
%    something to get material into the header, so we set these commands
%    globally for now.
%    \begin{macrocode}
 \cs_set_eq:NN \@mkboth\markboth
 \cs_set_nopar:Npn \sectionmark#1{%
      \markboth {\MakeUppercase{%
        \ifnum \c@secnumdepth >\z@
          \thesection\quad
        \fi
        #1}}{}}
 \cs_set_nopar:Npn \subsectionmark#1{%
      \markright {%
        \ifnum \c@secnumdepth >\@ne
          \thesubsection\quad
        \fi
        #1}}

%    \end{macrocode}
%    
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \endinput
\endinput



--------------------------------------------------------




% \begin{InstanceDescription}
%       { <template-type-name> }{ <instance-name> }{ <template-name> }
%
% ^^A ONE OR MORE OF THESE:
%
%   \InstanceKey{ <key-name>}{ <value> }
%
%   \InstanceKey{ <key-name>}{ <value> }
%
% ^^A AND
%
%   \InstanceSemantics
%
%       <text>
%
% \end{InstanceDescription}
%
%
