% \iffalse meta-comment
%
%% File: xmarks.dtx Copyright (C) 1999,2001,2004-2009 Frank Mittelbach, The LaTeX3 Project
%%                            (C) 2010-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "xor bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{xparse}
\GetIdInfo$Id$
  {L3 experimental marks (part of xor)}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{xmarks} package\\ Marks^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
% 
% Marks are used to communicate information about the content of a page
% to the output routine. Perhaps the clearest form of mark is that needed
% for sections. In order to construct running headers, the output routine
% needs information about which section names are present on a page, and this
% information is passed by the mark system. However, marks may also be used
% for other purposes. This module provides a generalised mechanism for marks
% of independent types.
% 
% \section{Design-level interface}
% 
% \begin{function}{\DeclareMarkType}
%   \begin{syntax}
%     \cs{DeclareMarkType} \Arg{type}
%   \end{syntax}
%   Declares a \meta{type} of mark to be tracked by \LaTeX{}. Each \meta{type}
%   must be declared before it is used.
% \end{function}
% 
% \begin{function}{\PutMark}
%   \begin{syntax}
%     \cs{PutMark} \Arg{type} \Arg{entry}
%   \end{syntax}
%   Adds a mark to the current page for the \meta{type}, containing the
%   \meta{entry} text.
% \end{function}
% 
% \begin{function}[EXP]{\PreviousMark, \FirstMark, \LastMark}
%   \begin{syntax}
%     \cs{PreviousMark} \Arg{type}
%     \cs{FirstMark} \Arg{type}
%     \cs{LastMark} \Arg{type}
%   \end{syntax}
%   These functions expand to the appropriate mark \meta{entry} for
%   the given \meta{type} on the current page. The \enquote{first} and
%   \enquote{last} marks are those seen first and last on the current page,
%   respectively. The \enquote{previous} mark is the last mark of the
%   \meta{type} seen on the previous page.
% \end{function}
%
% \section{Code-level interface}
% 
% \begin{function}{\mark_new:n}
%   \begin{syntax}
%     \cs{mark_new:n} \Arg{type}
%   \end{syntax}
%   Declares a \meta{type} of mark to be tracked by \LaTeX{}. Each \meta{type}
%   must be declared before it is used.
% \end{function}
% 
% \begin{function}{\mark_put:nn, \mark_put:VV}
%   \begin{syntax}
%     \cs{mark_put:nn} \Arg{type} \Arg{entry}
%   \end{syntax}
%   Adds a mark to the current page for the \meta{type}, containing the
%   \meta{entry} text.
% \end{function}
% 
% \begin{function}[EXP]
%   {\mark_get_previous:n, \mark_get_first:n, \mark_get_last:n}
%   \begin{syntax}
%     \cs{mark_get_previous:n} \Arg{type}
%     \cs{FirstMark} \Arg{type}
%     \cs{LastMark} \Arg{type}
%   \end{syntax}
%   These functions expand to the appropriate mark \meta{entry} for
%   the given \meta{type} on the current page. The \enquote{first} and
%   \enquote{last} marks are those seen first and last on the current page,
%   respectively. The \enquote{previous} mark is the last mark of the
%   \meta{type} seen on the previous page.
% \end{function}
%
% \subsection{Output routine functions}
%
% These functions are tied to the output routine, and therefore are not
% for more general use: they are used in other parts of \pkg{xor}.
% 
% \begin{function}{\marks_update_structure:}
%   \begin{syntax}
%     \cs{marks_update_structure:}
%   \end{syntax}
% \end{function}
% 
% \begin{function}{\marks_save_state:}
%   \begin{syntax}
%     \cs{marks_save_state:}
%   \end{syntax}
% \end{function}
% 
% \begin{function}{\marks_OR_restore_state:nn}
%   \begin{syntax}
%     \cs{marks_OR_restore_state:nn} \Arg{OR_1} \Arg{OR_2}
%   \end{syntax}
% \end{function}
% 
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xmarks} Implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%    
% \subsection{Notes on the mechanism}
%
% \eTeX{} extends the \TeX{} mark system to allow multiple independent
% marks. However, it does not solve a problem which means that \LaTeX{} needs
% to manage marks almost independently of \TeX{}. The reason for this is that
% the complex output routine used by \LaTeX{} to handle floats (and related
% structures) means that \tn{topmark(s)} are not reliable. Each time the
% output routine is fired up, \TeX{} moves \tn{botmark} to \tn{topmark}, and
% while \eTeX{} extends this the fundamental concept remains the same. That
% means that instead the state of marks needs to be tracked by \LaTeX{},
% using \TeX{}'s \tn{botmark} only to ensure the correct interaction with
% the output routine. There is no gain in using the \eTeX{} mechanism here,
% and so \LaTeX3 ignores this extension.
%
% To allow for completely independent marks we use the following
% procedure:
% \begin{itemize}
%   \item
%     For every mark of type \meta{type} we have a queue that holds every mark
%     info found in memory. Every info is associated with a unique number,
%     i.e., we simply count them. The queue always holds at least one item
%     which is the previous mark info, i.e., the last mark for that type on
%     the previous page.
%
%   \item
%     We use \TeX{}'s internal mark mechanism only to record the associated
%     numbers for marks for every type on the current page.
%
%   \item
%     For every \meta{type} we record the info-number that belongs to the last
%     mark of the previous page.
%
%   \item
%     By looking at \TeX{}'s internal \tn{botmark} we can determine the
%     info-number of the last mark for every \meta{type} that is on the current
%     page.
%
%   \item
%     The difference between this number and the info-number from the last
%     page gives us the number of marks for every \meta{type} on the current page.
%
%   \item
%     That way we are able to decide how to extract items from the queue so
%     that first, last, and previous mark for every type can be accessed.
%     \begin{itemize}
%       \item
%         If the difference is zero, no new marks have been added on the
%         current page, therefore the only item on the corresponding mark type
%         queue holds the info that should be previous, first, and last mark of
%         this type for the current page.
%
%       \item
%         If the difference is one, then the first item in the queue represents
%         the info that should become the previous mark (it will be popped off)
%         and the second item (which will be kept, since it will become the
%         previous mark for the next page) should become first and last mark
%         for the current page.
%
%       \item
%         Otherwise we had at least two marks for this type on the current
%         page. Therefore, the first item in the queue will become previous
%         mark (popped off), the second will become first mark (popped off),
%         then we pop off all but the last item in the queue, which will
%         become last mark, by only looking at it.
%     \end{itemize}
%     In other words every queue should hold only one item after this part of
%     the algorithm has acted.
%     After this is done we save the info-numbers given by \tn{botmark}
%     as the info-numbers of the last page, so that they are available next
%     time.
%
%   \item
%     Putting a mark into the galley therefore means to put its info to the
%     right of the corresponding queue, increment the current info-number for
%     \meta{type} by one and putting a \TeX{} mark into the galley holding the
%     current info-numbers for all \meta{types}.
%  \end{itemize}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \begin{variable}{\l_marks_tmp_int}
% \begin{variable}{\l_marks_tmp_prop}
% \begin{variable}{\l_marks_tmp_tl}
%   Scratch space.
%    \begin{macrocode}
\int_new:N  \l_marks_tmp_int
\prop_new:N \l_marks_tmp_prop
\tl_new:N   \l_marks_tmp_tl
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \subsection{Creating mark types}
%
% \begin{variable}{\g_marks_current_prop, \g_marks_last_prop}
%    The two property lists used to hold the mark information.
%    \begin{macrocode}
\prop_new:N \g_marks_current_prop
\prop_new:N \g_marks_last_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_marks_types_seq}
%   A list of all of the mark types in use.
%    \begin{macrocode}
\seq_new:N \g_marks_types_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\marks_new:n}
%   A mark type is created by initialising a number of data structures.
%   First, the mark information itself (a token list variable) is set up
%   with empty entries: this allows for the case where information retrieval
%   is attempted before \cs{marks_update_structure:} has been used. A sequence
%   is then set up, which will hold each mark entry for the type being created.
%   A copy of this sequence is also created so that the save code will not
%   attempt to use a non-existent variable.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_new:n #1
  {
%<*trace>
    \trace_marks:n { new~mark:~ #1 }
%</trace>
    \seq_gput_right:Nn \g_marks_types_seq {#1}
    \tl_new:c { g_marks_ #1 _tl }
    \tl_gset:cn { g_marks_ #1 _tl } { { } { } { } }
    \seq_new:c { g_marks_ #1 _seq }
    \seq_new:c { g_marks_saved_ #1 _seq }
%    \end{macrocode}
%   An entry for the type is now added to each of the two property lists
%   which track mark data. The set up must have the current mark set one
%   less than the last mark, for the mechanism to work correctly.
%    \begin{macrocode}
    \prop_gput:Nnn \g_marks_last_prop   {#1} { 1 }
    \prop_gput:Nnn\g_marks_current_prop {#1} { 0 }
%    \end{macrocode}
%    We now put the very first mark of this type in. This mark will be
%    empty. This will initialize the queue (now holding the empty previous
%    mark) increment the current info number, so that last and current are
%    now equal and also puts a \TeX{} mark into the galley with the
%    additional type present.
%    \begin{macrocode}
    \marks_put:nn {#1} { }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Adding and recovering mark information}
%
% \begin{macro}[int]{\marks_store:N}
% \begin{macro}[aux, EXP]{\marks_store_aux:nn}
% \begin{macro}[int]{\marks_read:N}
% \begin{macro}[aux]{\marks_read_aux:nN}
% \begin{macro}[aux]{\marks_read_aux:Nnnn}
%   The aim here is to provide a method for placing the property list
%   information into the \TeX{} mark system and to recover it. This should not
%   rely on the implementation of property lists (which has changed over the
%   years), and so is set up to convert into a format which is both readable
%   and reasonably efficient for the job in hand. The idea is to set up the
%   mark such that when reading back loop termination can be achieved by
%   a correctly-placed \cs{use_none:nn} rather than a slower test for an end
%   marker. This does assume that there is at least one piece of information
%   in the mark list.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_store:N #1
  { \tex_mark:D { \prop_map_function:NN #1 \marks_store_aux:nn } }
\cs_new:Npn \marks_store_aux:nn #1#2 { \exp_not:n { { } {#1} {#2} } }
\cs_new_protected_nopar:Npn \marks_read:N
  { \exp_after:wN \marks_read_aux:nN \exp_after:wN { \tex_botmark:D } }
\cs_new_protected:Npn \marks_read_aux:nN #1#2
  {
    \prop_gclear:N #2
    \exp_after:wN \marks_read_aux:Nnnn
      \exp_after:wN #2 \use_none:n #1 \use_none:nn
  }
\cs_new_protected:Npn \marks_read_aux:Nnnn #1#2#3#4
  {
    \prop_gput:Nnn #1 {#2} {#3}
    #4 \marks_read_aux:Nnnn #1
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\marks_put:nn, \marks_put:VV}
%   To put a mark into the current horizontal or vertical \TeX{} list
%   we first update \cs{g_marks_current_prop} and then put the reference number
%   onto the main vertical list. The reference number is simply stepped by one
%   to do this. The mark information itself is also added to the appropriate
%   sequence.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_put:nn #1#2
  {
%<*trace>
    \trace_marks:n { set~#1~<-~ \tl_to_str:n {#2} }
%</trace>
    \prop_get:NnNF \g_marks_current_prop {#1} \l_marks_tmp_tl
      {
        \__msg_kernel_error:nnx { marks } { unknown-type } { \tl_to_str:n {#1} }
      }
    \prop_gput:Nnx \g_marks_current_prop {#1}
      { \int_eval:n { \l_marks_tmp_tl + \c_one } }
%<*trace>
      \trace_marks_internal:n
        { Setting~mark~ \marks_trace_store:N \g_marks_current_prop }
%</trace>
    \marks_store:N \g_marks_current_prop
    \seq_gput_right:cn { g_marks_ #1 _seq } {#2}
  }
\cs_generate_variant:Nn \marks_put:nn { VV }
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\marks_update_structure:}
% \begin{macro}[aux]{\marks_update_structure_aux:nn}
% \begin{macro}[aux]
%   {
%     \marks_update_structure_no_change:nn,
%     \marks_update_structure_one_mark:nn ,
%     \marks_update_structure_marks:nn
%   }
%   This function is for use in output routines to initialize the marks
%   at the beginning. It is only useful after \TeX{} internally has
%   updated \tn{botmark}.  We map a function over all keys in
%   \cs{g_marks_last_prop}, in other words over all types of marks. This
%   routine will set the marks for all types. Finally we set
%   \cs{g_marks_last_prop} to the data that was stored in \tn{botmark},
%   \emph{i.e.}, to the info-numbers from this page.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \marks_update_structure:
  {
    \prop_map_function:NN \g_marks_last_prop \marks_update_structure_aux:nn
    \marks_read:N \g_marks_last_prop
  }
%    \end{macrocode}
%   The loop over mark types does a comparison between the reference number
%   in the \TeX{} mark structure and the one in the stored property list.
%   There are then three cases: the two numbers are the same, the numbers
%   differ by exactly one and the numbers differ by more than one.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_update_structure_aux:nn #1#2
  {
%<*trace>
    \trace_marks_internal:n
      { queue~for~#1~before:~' \tl_to_str:c { g_marks_ #1 _seq } ' }
%</trace>
     \marks_read:N \l_marks_tmp_prop
%<*trace>
     \trace_marks_internal:n
       { picking~up~from~output~ \marks_trace_store:N \l_marks_tmp_prop }
%</trace>
     \prop_get:NnNF \l_marks_tmp_prop {#1} \l_marks_tmp_tl
      {
        \__msg_kernel_error:nnx { marks } { unknown-type } { \tl_to_str:n {#1} }
      }
%<*trace>
    \trace_marks_internal:n
      {
        found~ \int_eval:n { \l_marks_tmp_tl - ( #2 ) } ~entries~for~#1~
        (new~ \l_marks_tmp_tl ;~old~#2)
      }
%</trace>
%    \end{macrocode}
%   The three cases: $0$, $1$ and $>1$.
%    \begin{macrocode}
    \if_case:w \__int_eval:w \l_marks_tmp_tl - ( #2 ) \__int_eval_end:
      \exp_after:wN \marks_update_structure_no_change:nn
     \or:
       \exp_after:wN \marks_update_structure_one_mark:nn
     \else:
       \exp_after:wN \marks_update_structure_marks:nn
     \fi:
      {#1} {#2}
%<*trace>
    \trace_marks:n { in~output:~#1~->~ \tl_to_str:c{ g_marks_ #1 _tl } }
    \trace_marks_internal:n
      { queue~for~#1~after:~' \tl_to_str:c { g_marks_#1_seq } ' }
%</trace>
  }
%    \end{macrocode}
%   No change to the marks: recover the top one and reuse it for all three
%   entries.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_update_structure_no_change:nn #1#2
  {
    \seq_get_left:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
    \tl_gset:cx { g_marks_ #1 _tl }
      {
        { \exp_not:o \l_marks_tmp_tl }
        { \exp_not:o \l_marks_tmp_tl }
        { \exp_not:o \l_marks_tmp_tl }
      }
  }
%    \end{macrocode}
%  A difference of exactly one means that the last mark we had is now the
%  one on the previous page, while the two on this page are the same.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_update_structure_one_mark:nn #1#2
  {
    \seq_gpop:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
    \tl_gset:cx { g_marks_ #1 _tl } { { \exp_not:V \l_marks_tmp_tl } }
    \seq_get_left:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
    \tl_gput_right:cx { g_marks_ #1 _tl }
      {
        { \exp_not:o \l_marks_tmp_tl }
        { \exp_not:o \l_marks_tmp_tl }
      }
  }
%    \end{macrocode}
%   The most complex case is where two or more new marks have been seen.
%   First, the previous mark is popped off the sequence. The left-most entry
%   is then the first mark on the page, while finding the last mark requires
%   a loop to remove the intermediate values (which are thrown away).
%    \begin{macrocode}
\cs_new_protected:Npn \marks_update_structure_marks:nn #1#2
  {
    \int_set:Nn \l_marks_tmp_int { \l_marks_tmp_tl - ( #2 ) }
    \seq_gpop:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
    \tl_gset:cx { g_marks_ #1 _tl } { { \exp_not:o \l_marks_tmp_tl } }
    \seq_get_left:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
    \tl_gput_right:cx { g_marks_ #1 _tl } { { \exp_not:o \l_marks_tmp_tl } }
    \int_while_do:nNnn \l_marks_tmp_int > \c_one
      {
        \int_decr:N \l_marks_tmp_int
        \seq_gpop:cN { g_marks_ #1 _seq } \l_marks_tmp_tl
      }
    \seq_get_left:cN { g_marks_ #1 _seq} \l_marks_tmp_tl
    \tl_gput_right:cx { g_marks_ #1 _tl } { { \exp_not:o \l_marks_tmp_tl } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]
%   {\marks_get_first:n, \marks_get_last:n, \marks_get_previous:n}
%   To retrieve the first, last or previous page mark, we grab the appropriate
%   value stored in the tl var. The marks are stored in the tl var.~in the
%   order previous, first, last mark. These functions should be used only in
%   output routines after \cs{marks_retrieve:} has acted, otherwise their
%   value will be wrong.
%    \begin{macrocode}
\cs_new:Npn \marks_get_first:n #1
  {
    \exp_after:wN \exp_after:wN \exp_after:wN
      \use_ii:nnn \cs:w g_marks_ #1 _tl \cs_end:
  }
\cs_new:Npn \marks_get_last:n #1
  {
    \exp_after:wN \exp_after:wN \exp_after:wN
      \use_iii:nnn \cs:w g_marks_ #1 _tl \cs_end:
  }
\cs_new:Npn \marks_get_previous:n #1
  {
    \exp_after:wN \exp_after:wN \exp_after:wN
      \use_i:nnn \cs:w g_marks_ #1 _tl \cs_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Saving and restoring marks}
%
% \begin{variable}{\g_marks_saved_current_prop, \g_marks_saved_last_prop}
%    Storage for the saved versions of the two property lists: notice that
%    there is only a single save level available.
%    \begin{macrocode}
\prop_new:N \g_marks_saved_current_prop
\prop_new:N \g_marks_saved_last_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\marks_save_state:}
%   Saving the state of the marks is easy, as it only involves copying
%   data structures that \LaTeX{} controls directly. The two permanent
%   structures are easy, and the various mark types are handled with a
%   simple loop, done inline for speed.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \marks_save_state:
  {
%<*trace>
    \trace_marks:n { saving~state }
%</trace>
    \prop_gset_eq:NN \g_marks_saved_current_prop \g_marks_current_prop
    \prop_gset_eq:NN \g_marks_saved_last_prop    \g_marks_last_prop
    \seq_map_inline:Nn \g_marks_types_seq
      { \seq_gset_eq:cc { g_marks_saved_ ##1 _seq } { g_marks_ ##1 _seq } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\marks_restore_state_internal:}
%   The reverse of \cs{marks_save_state:} is marked for internal use only
%   as this can only be used correctly as part of a broader restore chain
%   involving the output routine.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \marks_restore_state_internal:
  {
%<*trace>
      \trace_marks:n { restoring~state }
%</trace>
      \prop_gset_eq:NN \g_marks_current_prop\g_marks_saved_current_prop
      \prop_gset_eq:NN \g_marks_last_prop\g_marks_saved_last_prop
      \seq_map_inline:Nn \g_marks_types_seq
        { \seq_gset_eq:cc { g_marks_ ##1 _seq } { g_marks_saved_ ##1 _seq } }
  }
%    \end{macrocode}
% \end{macro}
%  
% \begin{variable}{\c_marks_OR_i_penalty, \c_marks_OR_ii_penalty}
%   Two marker penalties for detected that the restore system is used
%   correctly.
%    \begin{macrocode}
\int_const:Nn \c_marks_OR_i_penalty  { -20 203 }
\int_const:Nn \c_marks_OR_ii_penalty { -20 204 }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\marks_OR_restore_state:nn}
%   Restoring the mark state is more complex than saving it as we need to
%   interact with the output routine to get \tn{botmark} to be correct. To
%   do that, a two-state system is used, with two customised output routines.
%   Why? Because the first one could reinsert material that has been previously
%   picked up from the MVL and the second call could do then some processing
%   including adding additional material such as insertions. With only a single
%   pass that would result in the material appearing in the wrong order on the
%   MVL (as the insertions would have to come \emph{before} material for
%   reprocessing). By ending an output routine and immediately starting a
%   second one the material from the first routine is pushed to
%   \enquote{recent contributions}.
%    \begin{macrocode}
\cs_new_protected:Npn \marks_OR_restore_state:nn #1#2
  {
%<*trace>
    \trace_push:n { marks_OR_restore_state:nn }
%</trace>
%    \end{macrocode}
%   We first restore the external data structures by calling
%   |\marks_restore_state_internal:|. Then we have to ensure that \TeX's
%   idea of what the current |\botmark| is, corresponds to what it
%   was when we saved the state. Back then it was the contents of
%   |\g_marks_last_prop| so we are now adding an empty box and then
%   mark with is contents
%   onto the MVL followed by a penalty that ensures we trigger the
%   output routine and then specify a tiny little output routine
%   whose sole purpose is to get that mark processed.
%   \begin{macrocode}
    \marks_restore_state_internal:
    \tex_hbox:D { }
%<*trace>
    \trace_marks_internal:n
      { restoring~botmark~ \marks_trace_store:N \g_marks_last_prop }
%</trace>
    \marks_store:N \g_marks_last_prop
    \tex_penalty:D \c_marks_OR_i_penalty
    \tex_global:D \tex_output:D
      {
%<*trace>
        \trace_push:n { marks_restore_state~(inline~code~arg1) }
%</trace>
        \int_compare:nNnF \c_marks_OR_i_penalty = \tex_outputpenalty:D
          { \__msg_kernel_error:nn { marks } { bad-restore } }
        \box_gclear:N \c_two_hundred_fifty_five
        \tex_hbox:D { }
        \tex_penalty:D \c_marks_OR_ii_penalty
        #1
        \tex_global:D \tex_output:D
          {
%<*trace>
            \trace_push:n { marks_restore_state~(inline~code~arg2) }
%</trace>
            \int_compare:nNnF \c_marks_OR_ii_penalty = \tex_outputpenalty:D
              { \__msg_kernel_error:nn { marks } { bad-restore } }
            \box_gclear:N \c_two_hundred_fifty_five
            #2
%<*trace>
            \trace_pop:n { marks_restore_state~(inline~code~arg2) }
%</trace>
          }
%<*trace>
      \trace_pop:n { marks_restore_state~(inline~code~arg1) }
%</trace>
      }
%<*trace>
    \trace_pop:n { marks_OR_restore_state:nn }
%</trace>
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Trace support}
%
% \begin{variable}{\tracingmarks}
%   Used to control the amount of trace material placed in the log.
%    \begin{macrocode}
\int_new:N \tracingmarks
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\trace_marks:n, \trace_marks_internal:n}
%   Two trace functions, one more verbose than the other.
%    \begin{macrocode}
%<*trace>
\cs_new_protected:Npn \trace_marks:n #1
  {
    \int_compare:nNnT \tracingmarks > \c_zero
      { \iow_log:x { Marks:~#1~ \msg_line_context: } }
  }
\cs_new_protected:Npn \trace_marks_internal:n #1
  {
    \int_compare:nNnT \tracingmarks > \c_one
      { \iow_log:x { Marks:~#1 } }
  }
%</trace>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int, EXP]{\marks_trace_store:N}
% \begin{macro}[aux, EXP]{\marks_trace_store_aux:nn}
%   For pretty-printing marks when tracing.
%    \begin{macrocode}
%<*trace>
\cs_new:Npn \marks_trace_store:N #1
  { \prop_map_function:NN #1 \marks_trace_store_aux:nn }
\cs_new:Npn \marks_trace_store_aux:nn #1#2 { \exp_not:n { { #1 = #2 } } }
%</trace>
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\__msg_kernel_new:nnnn { marks } { bad-restore }
  { Incorrect~use~of~restore~marks~function. }
  {
    \c_msg_coding_error_text_tl
    LaTeX~was~asked~to~run~part~of~the~mark-restoring~system~in~a~location~
    where~this~should~not~happen.
  }
\__msg_kernel_new:nnnn { marks } { unknown-type }
  { Unknown~mark~type~'#1'. }
  {
    \c_msg_coding_error_text_tl
    LaTeX~was~asked~to~manipulate~a~mark~of~type~'#1',~but~this~type~of~mark~
    does~not~exist.
  }
%    \end{macrocode}
%    
% \subsection{Design-level interface}
%
% \begin{macro}{\DeclareMarkType}
% \begin{macro}{\PutMark}
% \begin{macro}[EXP]{\PreviousMark, \FirstMark, \LastMark}
%   Simple copies: may change.
%    \begin{macrocode}
\cs_new_eq:NN \DeclareMarkType \marks_new:n
\cs_new_eq:NN \PutMark         \marks_put:nn
\cs_new_eq:NN \PreviousMark    \marks_get_previous:n
\cs_new_eq:NN \FirstMark       \marks_get_first:n
\cs_new_eq:NN \LastMark        \marks_get_last:n
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Support for \LaTeXe{} internals}
% 
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \begin{macro}{leftmark (mark), rightmark (mark)}
%   We declare two marks to hold heading information
%    \begin{macrocode}
\DeclareMarkType { leftmark }
\DeclareMarkType { rightmark }
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\markboth}
%  \begin{macro}{\markright}
%   The \LaTeX2e{} commands for generating heading marks need a new
%   definition (this one right now is just a one-to-one translation).
%    \begin{macrocode}
\RenewDocumentCommand \markboth { m m }
  {
    \group_begin:
      \cs_set_eq:NN \label    \scan_stop:
      \cs_set_eq:NN \index    \scan_stop:
      \cs_set_eq:NN \glossary \scan_stop:
      \unrestored@protected@xdef \l_marks_tmp_tl {#1}
      \exp_args:NV \@markleft \l_marks_tmp_tl
      \unrestored@protected@xdef \l_marks_tmp_tl {#2}
      \exp_args:NV \@markright \l_marks_tmp_tl
    \group_end:
    \if@nobreak
      \mode_if_vertical:T { \nobreak }
    \fi
  }
\RenewDocumentCommand \markright { m }
  {
    \group_begin:
      \cs_set_eq:NN \label    \scan_stop:
      \cs_set_eq:NN \index    \scan_stop:
      \cs_set_eq:NN \glossary \scan_stop:
      \unrestored@protected@xdef \l_marks_tmp_tl {#1}
      \exp_args:NV \@markright \l_marks_tmp_tl
    \group_end:
    \if@nobreak
      \mode_if_vertical:T { \nobreak }
    \fi
  }
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
% \begin{macro}{\@markleft, \@markright}
%   Internal, but used by others and so still need to work.
%    \begin{macrocode}
\cs_set_protected:Npn \@markleft  #1 { \PutMark { leftmark }  {#1} }
\cs_set_protected:Npn \@markright #1 { \PutMark { rightmark } {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftmark, \rightmark}
%   Again, document level and so use \pkg{xparse}: not really token list
%   variables as a single expansion will not yield what is actually required
%   here.
%    \begin{macrocode}
\DeclareExpandableDocumentCommand \leftmark  { } { \LastMark { leftmark } }
\DeclareExpandableDocumentCommand \rightmark { } { \LastMark { rightmark } }
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
