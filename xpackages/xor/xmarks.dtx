% \iffalse
%% File xmarks.dtx
%% (C) Copyright 1999,2001,2004-2009 Frank Mittelbach, The LaTeX3 Project
%% (C) Copyright 2010-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
% \fi
%
% \iffalse
%<*driver>
 \documentclass{ltxdoc}
%
\renewcommand\MakePrivateLetters{\makeatletter
  \catcode`\_=11\relax
  \catcode`\:=11\relax}

 \begin{document}
 \DocInput{xmarks.dtx}
 \end{document}
%</driver>
%
% \fi
%
%
%
% \title{The \textsf{xmarks} package\thanks{This file
%         has version number ..., last
%         revised ...}}
% \author{FMi}
%
%  \maketitle
%
% \tableofcontents
%
%
%
% \section{Mark algorithm}
%
% To allow for completely independent marks we use the following
% procedure:
% \begin{itemize}
% \item
%   For every mark of type \meta{type} we have a queue that holds every mark
% info found in memory. Every info is associated with a unique number,
% i.e., we simply count them. The queue always holds at least one item
% which is the previous mark info, i.e., the last mark for that type on
% the previous page.
%
% \item
%   We use \TeX's internal mark mechanism only to record the associated
% numbers for marks for every type on the current page.
%
% \item
%  For every \meta{type} we record the info-number that belongs to the last
% mark of the previous page.
%
% \item
%  By looking at \TeX's internal |\botmark| we can determine the
% info-number of the last mark for every \meta{type} that is on the current
% page.
%
% \item
%   The difference between this number and the info-number from the last
% page gives us the number of marks for every \meta{type} on the current page.
%
% \item
%   That way we are able to decide how to extract items from the queue so
% that first, last, and previous mark for every type can be accessed.
%  \begin{itemize}
%  \item
%    If the difference is zero, no new marks have been added on the
% current page, therefore the only item on the corresponding mark type
% queue holds the info that should be previous, first, and last mark of
% this type for the current page.
%  \item
%    If the difference is one, then the first item in the queue represents
% the info that should become the previous mark (it will be popped off)
% and the second item (which will be kept, since it will become the
% previous mark for the next page) should become first and last mark for
% the current page.
%  \item
%    Otherwise we had at least two marks for this type on the current page.
% Therefore, the first item in the queue will become previous mark (popped
% off), the second will become first mark (popped off), then we pop off
% all but the last item in the queue, which will become last mark, by only
% looking at it.
%  \end{itemize}
%  In other words every queue should hold only one item after this part of
% the algorithm has acted.
% After this is done we save the info-numbers given by |\botmark|
% as the info-numbers of the last page, so that they are available next time.
%
% \item
%   Putting a mark into the galley therefore means to put its info to the
% right of the corresponding queue, increment the current info-number for
% \meta{type} by one and putting a \TeX{} mark into the galley holding the
% current info-numbers for all \meta{types}.
%
%  \end{itemize}
%
%
% \subsection{Restrictions}
%
% One restriction in using this algorithm without further refinements
% is that for every \meta{type} there will be an upper limit of marks allowed
% within one document. This upper limit is given by |\maxdimen| which is
% probably high enough to ignore it, but it could be improved by resetting
% the info numbers whenever all marks have found their way onto the
% current page.
%
% Another restriction is that one better not changes from linearily
% processing the data for the main galley, or, if one modifies that
% processing one needs to carefully adjust the data structures for the
% marks as well. The problem being that the individual marks within a
% preprocessed galley will stay there forever (and thus can be parsed
% several times), the external data structures, e.g., the plists and
% the sequences however need manual corrections in that case.
%
% \subsection{Implementation}
%
% The original implementation was done on a portable PC in a train
% sometime in 1992/93 and is just a straight implementation of the
% above algorithm using plists to hold the current and the last
% info-numbers. The whole stuff could be done much better by analysing
% the algorithm combining common parts (a lot of thing have be done
% twice, etc.) and recoding the rest in a better way.
%
% The implementation below is more or less a straight adaption
% of that code, so it still needs a rewrite one day. It is based on
% modules implementing ``queues'', ``property lists'', and ``quarks''
% most of which have been published as experimental code with a
% slightly different surface syntax, i.e., as \texttt{l3seq.sty},
% \texttt{l3prop.sty}, and \texttt{l3quark.sty}.
%
% New stuff:
%    \begin{macrocode}
\RequirePackage{l3names}
\GetIdInfo $Id$
          {xmarks (part of xor)}
\ProvidesExplPackage{\ExplFileName}
  {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
%
%
%
%
%
%
%
%
% \subsection{Commands for manipulating marks}
%
%
%
%  \begin{macro}{\trace_mark}
%  \begin{macro}{\trace_mark_internal}
%  \begin{macro}{\tracingmarks}
%    Tracing is done when |\tracingmarks| is positive.
%    \begin{macrocode}
%<*trace>
\cs_new_nopar:Npn \trace_mark#1{
  \int_compare:nNnT \tracingmarks > \c_zero
  { \typeout{Marks:~ #1~ \on@line} } }
\cs_new_nopar:Npn \trace_mark_internal#1{
  \int_compare:nNnT \tracingmarks>\c_one
  { \typeout{Marks:~ #1} } }
%</trace>
\newcount\tracingmarks
\tracingmarks=0
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\xmark_new:n}
%    Defines a new mark label and retrieval token list variable.
%    \begin{macrocode}
\cs_new_nopar:Npn \xmark_new:n#1{
%<*trace>
  \trace_mark {new~mark:~#1}
%</trace>
%    \end{macrocode}
%    We make sure that the argument is still free and allocate the
%    corresponding queue. To avoid problems with the use of such tl vars.
%    when they are used before the first |\xmark_update_structure:| we initialize
%    them in a way that |\xmark_previous| and the like will accept them even
%    then.
%    \begin{macrocode}
  \cs_new_nopar:cpn {#1} {{}{}{}}
  \seq_new:c{g_xmark_#1_seq}
%    \end{macrocode}
%    The last info-number for this type will be set to |1| This value
%    is actually arbitrary and we could use |-\maxdimen+1| to get the
%    range doubled.
%    \begin{macrocode}
  \prop_gput:Nnn \g_xmark_last_prop {#1} {1}
%    \end{macrocode}
%    More important is that the starting value for the current
%    info-number is one less then the one used above.
%    \begin{macrocode}
  \prop_gput:Nnn\g_xmark_curr_prop {#1} {0}
%    \end{macrocode}
%    We now put the very first mark of this type in. This mark will be
%    empty. This will initialize the queue (now holding the empty previous
%    mark) increment the current info number, so that last and current are
%    now equal and also puts a \TeX{} mark into the galley with the
%    additional type present.
%    \begin{macrocode}
  \xmark_put:nn{#1}{}%
%    \end{macrocode}
%    \begin{macrocode}
  \tl_gput_right:No \xmark_save_state: {
    \seq_gset_eq:cc {g_xmark_saved_#1_seq}{g_xmark_#1_seq}
  }
  \tl_gput_right:Nn \g_xmark_restore_state_internal_tl {
    \seq_gset_eq:cc {g_xmark_#1_seq}{g_xmark_saved_#1_seq}
  }
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%  \begin{macro}{\xmark_save_state:}
%  \begin{macro}{\g_xmark_restore_state_internal_tl}
%    Save and restore the current state of the mark data
%    structure. The commands will be extended by |\xmark_new:N|. They are
%    needed if part of the main galley is being reused or several
%    times parsed.
%    \begin{macrocode}
\cs_new_nopar:Npn \xmark_save_state:{%
%<*trace>
      \trace_mark{saving~ state}
%</trace>
      \prop_gset_eq:NN \g_xmark_saved_curr_prop\g_xmark_curr_prop
      \prop_gset_eq:NN \g_xmark_saved_last_prop\g_xmark_last_prop}
\tl_new:N \g_xmark_restore_state_internal_tl
\tl_gset:Nn \g_xmark_restore_state_internal_tl {%
%<*trace>
      \trace_mark{restoring~ state}
%</trace>
      \prop_gset_eq:NN \g_xmark_curr_prop\g_xmark_saved_curr_prop
      \prop_gset_eq:NN \g_xmark_last_prop\g_xmark_saved_last_prop}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}

%  \begin{macro}{\g_xmark_saved_curr_prop}
%  \begin{macro}{\g_xmark_saved_last_prop}
%    Here are the allocations for the two plists used.
%    \begin{macrocode}
\prop_new:N \g_xmark_saved_curr_prop
\prop_new:N \g_xmark_saved_last_prop
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\xmark_OR_restore_state:n}
%    |\xmark_OR_restore_state:n| will restore the state of the mark
%    mechanism to the one saved by |\xmark_save_state:|. It has to be
%    called inside an output routine and as it needs an output routine
%    of its own to restore the |\xmark| status of the bottom mark (so
%    that \TeX{} correctly updates the mark registers in case it
%    doesn't find a mark in box 255) it has an argument which is
%    executed inside that output routine to regain control.
%
%    The code in the argument has to set |\output| to a new output
%    routine! If not you are in trouble.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xmark_OR_restore_state:n#1{%
%<*trace>
  \trace_push:n{xmark_OR_restore_state:n}
%</trace>
%    \end{macrocode}
%    We first restore the external data structures by calling
%    |\g_xmark_restore_state_internal_tl|. Then we have to ensure that \TeX's
%    idea of what the current |\botmark| is, corresponds to what it
%    was when we saved the state. Back then it was the contents of
%    |\g_xmark_last_prop| so we are now adding an empty box and then
%    mark with is contents
%    onto the MVL followed by a penalty that ensures we trigger the
%    output routine and then specify a tiny little output routine
%    whose sole purpose is to get that mark processed.
%    \begin{macrocode}
      \g_xmark_restore_state_internal_tl
      \hbox{}%
%    \end{macrocode}
%    We have to protect |\g_xmark_last_prop| from expanding too far
%    inside the |\xmark| so we first put it into a token register
%    before applying |\mark|.
%    \begin{macrocode}
%%FMi fix: this is badly using implementation details of plists
%<*trace>
      \trace_mark_internal{restoring~ botmark~ \exp_not:o\g_xmark_last_prop}%
%</trace>
      \mark {\exp_not:o\g_xmark_last_prop}
      \penalty-20203\relax
%    \end{macrocode}
%    We are not setting |\vsize| assuming its positive. So the moment
%    we return from the current output routine (we are hopefully in
%    right now) we should very very soon find the above penalty and
%    then trigger the output routine we are about to define now.
%
%    In that output routine we have a quick test for the
%    |\outputpenalty| just to ensure that we really grabbed what we
%    are supposed to grab. Then we throw away the contents of box 255
%    since all we wanted todo is to get |\botmark| set back to the
%    value of our mark above. Finally we execute whatever got passed
%    along as argument one to regain control. Since current |\output|
%    has a rather funny definition the code in that argument better
%    changes that back to something that does a little bit more
%    typesetting.
%    \begin{macrocode}
      \global\output{%
%<*trace>
  \trace_push:n{xmark_restore_state_or~(inline~code)}
%</trace>
         \int_compare:nNnF{-20203}=\outputpenalty {\ERROR }
         \box_gclear:N \c_two_hundred_fifty_five
         #1%
%<*trace>
  \trace_pop:n{xmark_OR_restore_state:n~(inline~code)}
%</trace>
        }%
%<*trace>
  \trace_pop:n{xmark_OR_restore_state:n}
%</trace>
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\xmark_OR_restore_state:nn}
%    The |\xmark_OR_restore_state:nn| works like |\xmark_OR_restore_state:n|
%    but uses two output routine calls to restore the mark. Why? Because the
%    first OR could then reinsert material that has been previously picked up
%    from the MVL and the second call could do then some processing including
%    adding additional material such as insertions. With only a single OR that
%    would result in the material appearing in the wrong order on the MVL (as
%    the insertions would have to come \emph{before} material for
%    reprocessing). By ending the OR and immediately restarting one the
%    material from the first OR is pushed to ``recent contributions''.
%
%
%    We probably only need one of the two methods, at the moment \texttt{xor}
%    runs with the double OR concept.
%    \begin{macrocode}

\cs_new_nopar:Npn \xmark_OR_restore_state:nn #1 #2 {
%<*trace>
  \trace_push:n{xmark_OR_restore_state:nn}
%</trace>
%    \end{macrocode}
%    We first restore the external data structures by calling
%    |\g_xmark_restore_state_internal_tl|. Then we have to ensure that \TeX's
%    idea of what the current |\botmark| is, corresponds to what it
%    was when we saved the state. Back then it was the contents of
%    |\g_xmark_last_prop| so we are now adding an empty box and then
%    mark with is contents
%    onto the MVL followed by a penalty that ensures we trigger the
%    output routine and then specify a tiny little output routine
%    whose sole purpose is to get that mark processed.
%    \begin{macrocode}
      \g_xmark_restore_state_internal_tl
      \hbox{}%
%    \end{macrocode}
%    We have to protect |\g_xmark_last_prop| from expanding too far
%    inside the |\xmark| so we first put it into a token register
%    before applying |\mark|.
%    \begin{macrocode}
%%FMi fix: this is badly using implementation details of plists
%<*trace>
      \trace_mark_internal{restoring~ botmark~ \exp_not:o\g_xmark_last_prop}%
%</trace>
      \mark
         {\exp_not:o\g_xmark_last_prop}
      \penalty-20203\relax
      \global\output{%
%<*trace>
         \trace_push:n{xmark_restore_state_or~(inline~code~ arg1)}
%</trace>
         \int_compare:nNnF{-20203}=\outputpenalty {\ERROR }
         \box_gclear:N \c_two_hundred_fifty_five
         \hbox{}%
         \penalty-20204\relax
         #1
         \global\output{
%<*trace>
           \trace_push:n{xmark_restore_state_or~(inline~code~ arg2)}
%</trace>
           \int_compare:nNnF{-20204}=\outputpenalty {\ERROR }
           \box_gclear:N \c_two_hundred_fifty_five
           #2
%<*trace>
           \trace_pop:n{xmark_restore_state~(inline~code~ arg2)}
%</trace>
           }
%<*trace>
  \trace_pop:n{xmark_restore_state~(inline~code~ arg1)}
%</trace>
        }%
%<*trace>
  \trace_pop:n{xmark_OR_restore_state:nn}
%</trace>
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\xmark_put:nn}
%    To put a mark into the current horizontal or vertical \TeX{} list
%    we first update |\g_xmark_curr_prop| and then put its value into the
%    mark without any further expansion. (The code could be
%    optimized!)
%    \begin{macrocode}
%<-trace>\cs_new_nopar:Npn \xmark_put:nn#1{%    % wtest hack }
%<*trace>
\cs_new_nopar:Npn \xmark_put:nn#1#2{
   \trace_mark
       { set~#1~<-~\tl_to_str:n{#2} }
%</trace>
%    \end{macrocode}
%    First we have to update the current info number for this type. The
%    code is a bit complicated because we have to get the number from the
%    the plist update it and then put it back. If we  would keep the numbers
%    differently this could be improved, probably at the cost of more macro
%    names.
%    \begin{macrocode}
   \prop_get:NnN \g_xmark_curr_prop {#1}\l_tmpa_tl
%<*debug>
    \quark_if_no_value:NT \l_tmpa_tl \ERROR
%</debug>
   \int_set:Nn \l_tmpa_int \l_tmpa_tl
   \int_incr:N \l_tmpa_int
   \prop_gput:Nno \g_xmark_curr_prop {#1}
                  {\int_use:N \l_tmpa_int}
%    \end{macrocode}
%    Now we want to put this plist into a \TeX{} mark. We need a
%    one-level expansion, otherwise our pkeys would expand which would
%    produce chaos. So we save it in a toks register.
%    \begin{macrocode}
%%FMi fix: this is badly using implementation details of plists
%<*trace>
      \trace_mark_internal{Setting~ mark~ \exp_not:o\g_xmark_curr_prop}%
%</trace>
   \mark {\exp_not:o\g_xmark_curr_prop}
%    \end{macrocode}
%   Finally we shouldn't forget to put the info at the right of the
%   corresponding queue.
%   Without tracing we can omit the second argument to
%   this function.
%    \begin{macrocode}
%<*trace>
   \seq_gput_right:cn{g_xmark_#1_seq}{#2}
%</trace>
%<-trace>   \seq_gput_right:cn{g_xmark_#1_seq}%
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\xmark_put:nnn}
%    \begin{macrocode}
%\cs_new_nopar:Npn \xmark_put:nnn#1#2#3{
%   \xmark_put:nn{#1}{#2#3}}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\xmark_update_structure:}
%    This function is for use in output routines to initialize the marks
%    at the beginning. It is only useful after \TeX{} internally has
%    updated |\botmark|.
%    \begin{macrocode}
\cs_new_nopar:Npn \xmark_update_structure:{
%    \end{macrocode}
%    We map a function over all keys in |\g_xmark_last_prop|, in other
%    words over all types of marks. This routine will set the marks for
%    all types. Finally we set the plist |\g_xmark_last_prop| to the
%    plist that was stored in |\botmark|, i.e., to the
%    info-numbers from this page.
%    \begin{macrocode}
  \prop_map_function:NN\g_xmark_last_prop\xmark_retrieve_single:nn
%%FMi fix: this is badly using implementation details of plists
  \tl_gset:No \g_xmark_last_prop {\botmark}
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%  \begin{macro}{\xmark_retrieve_single:nn}
%    This function will be mapped over the plist containing the info-numbers
%    from the last page. This means that |#1| will be the key (which is
%    simply our type token list variable and |#2| is the value, i.e. the
%    info-number from the last page for this type.
%    \begin{macrocode}
\cs_new_nopar:Npn \xmark_retrieve_single:nn#1#2{
%<*trace>
   \trace_mark_internal
       {queue~for~#1~ before:~`\tl_to_str:c{ g_xmark_#1_seq}'}
%</trace>
%    \end{macrocode}
%    We retrieve the info number for this type from |\botmark|
%    and store the difference in |\l_tmpa_int|.
%    \begin{macrocode}
%%FMi fix: this is badly using implementation details of plists
   \tl_set:No \next {\botmark}
%<*trace>
   \trace_mark_internal{picking~ up~ from~ output~ \exp_not:o\next}%
%</trace>
   \prop_get:NnN \next {#1}\l_tmpa_tl
%<*debug>
   \quark_if_no_value:NT \l_tmpa_tl \ERROR
%</debug>
   \int_set:Nn \l_tmpa_int \l_tmpa_tl
   \int_sub:Nn \l_tmpa_int {#2}
%<*trace>
   \trace_mark_internal
       {found~\int_use:N \l_tmpa_int\space entries~ for~ #1~
        (new~\l_tmpa_tl;~old~#2)}
%</trace>
%    \end{macrocode}
%    Then we decide what to do depending on its value.
%    We use |\l_tmpa_tl|, |\l_tmpb_tl|, and |\l_tmpc_tl| to
%    temporarily hold the previous, first and last mark for this type.
%    \begin{macrocode}
   \tex_ifcase:D \l_tmpa_int
%    \end{macrocode}
%    If there haven't been any new marks we leave the queue alone,
%    peeking only at its top element and using it for all three marks.
%    \begin{macrocode}
     \seq_get_left:cN{ g_xmark_#1_seq}\l_tmpa_tl
     \cs_set_eq:NN \l_tmpb_tl\l_tmpa_tl
     \cs_set_eq:NN \l_tmpc_tl\l_tmpa_tl
   \tex_or:D
%    \end{macrocode}
%    When there was one mark of this type, we pop one item for the
%    previous mark of this type, and use the remaining item for first
%    and last mark.
%    \begin{macrocode}
     \seq_gpop:cN{ g_xmark_#1_seq}\l_tmpa_tl
     \seq_get_left:cN { g_xmark_#1_seq}\l_tmpb_tl
     \cs_set_eq:NN \l_tmpc_tl\l_tmpb_tl
   \else:
%    \end{macrocode}
%    If we had more than one mark for this type we pop one mark for the
%    previous mark of this type, then pop another mark for the first
%    mark of this type, then pop all but the last item and use the last
%    item as the last mark of this type, keeping it as before on the
%    queue.
%    \begin{macrocode}
     \seq_gpop:cN{ g_xmark_#1_seq}\l_tmpa_tl
     \seq_get_left:cN { g_xmark_#1_seq}\l_tmpb_tl
     \int_while_do:nNnn \l_tmpa_int>\c_one
     {
      \int_decr:N \l_tmpa_int
      \seq_gpop:cN{ g_xmark_#1_seq}
      \l_tmpc_tl
     }
     \seq_get_left:cN{ g_xmark_#1_seq}\l_tmpc_tl
   \fi:
%    \end{macrocode}
%    After this process all values for previous, first and last mark for
%    this type are found so that we can store them in the tl var.\
%    representing this type for further processing.
%    \begin{macrocode}
   \@temptokena\exp_after:wN{\l_tmpa_tl}
   \@temptokenb\exp_after:wN{\l_tmpb_tl}
   \@temptokenc\exp_after:wN{\l_tmpc_tl}
   \cs_set:cpx {#1} {{\the\@temptokena}{\the\@temptokenb}{\the\@temptokenc}}
%<*trace>
   \trace_mark
       {in~output:~#1~->~\tl_to_str:c{#1}}
%    \end{macrocode}
%    At this point the queue should show only one item.
%    \begin{macrocode}
   \trace_mark_internal
       {queue~ for~#1~after:~`\tl_to_str:c{ g_xmark_#1_seq}'}
%</trace>
}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\@temptokenb}
%  \begin{macro}{\@temptokenc}
%    \begin{macrocode}
\newtoks\@temptokenb
\newtoks\@temptokenc
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
%  \begin{macro}{\g_xmark_curr_prop}
%  \begin{macro}{\g_xmark_last_prop}
%    Here are the allocations for the two plists used.
%    \begin{macrocode}
\prop_new:N \g_xmark_curr_prop
\prop_new:N \g_xmark_last_prop
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
%
%
%
%
%  \begin{macro}{\xmark_get_first:N}
%  \begin{macro}{\xmark_get_last:N}
%  \begin{macro}{\xmark_get_previous:N}
%    To retrieve the first, last or previous page mark, we
%    grab the appropriate value stored in the tl var. The marks are stored
%    in the tl var.~in the order previous, first, last mark. These functions
%    should be used only in output routines after |\xmark_retrieve| has
%    acted, otherwise their value will be wrong. They are all fully
%    expandable.
%
%    Actually, they may bomb when tracing is included and we have
%    material that doesn't work corretly within a write.
%    \begin{macrocode}
%<*trace>
\cs_new_nopar:Npn \xmark_get_first:N#1{
       \exp_after:wN\use_ii:nnn #1
       \trace_mark_internal{use~first~\string#1~=~
            `\exp_after:wN\use_ii:nnn #1'}
}
\cs_new_nopar:Npn \xmark_get_last:N#1{
   \exp_after:wN\use_iii:nnn #1
   \trace_mark_internal{use~ last~ \string#1~ =~
       `\exp_after:wN\use_iii:nnn #1'}
}
\cs_new_nopar:Npn \xmark_get_previous:N#1{
   \exp_after:wN\use_i:nnn #1
   \trace_mark_internal{use~prev~\string#1~ =~
       `\exp_after:wN\use_i:nnn #1'}
}
%</trace>
%<-trace>\cs_new_nopar:Npn \xmark_get_first:N{%
%<-trace>       \exp_after:wN\use_ii:nnn }
%<-trace>\cs_new_nopar:Npn \xmark_get_last:N{%
%<-trace>       \exp_after:wN\use_iii:nnn }
%<-trace>\cs_new_nopar:Npn \xmark_get_previous:N{%
%<-trace>       \exp_after:wN\use_i:nnn }
%    \end{macrocode}
%    above version in trace case doesn't work always!
%    \begin{macrocode}
\cs_set_nopar:Npn \xmark_get_first:N{%
       \exp_after:wN\use_ii:nnn }
\cs_set_nopar:Npn \xmark_get_last:N{%
       \exp_after:wN\use_iii:nnn }
\cs_set_nopar:Npn \xmark_get_previous:N{%
       \exp_after:wN\use_i:nnn }
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%
% \begin{macro}{\DeclareMarkType}
%    \begin{macrocode}
\cs_new_nopar:Npn \DeclareMarkType#1{
  \xmark_new:n {mark_#1}}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\PutMark}
%    \begin{macrocode}
\cs_new_nopar:Npn \PutMark#1{
   \cs_if_free:cT{mark_#1}{\ERROR}
%FMi: emergency fix: properties now use unexpanded keys as strings so you 
%     need to be careful to always get the same key, e.g. ``floats'' is nto the same as
%     a tl variable containing ``floats'' and that is how xor used the interface.
%     In other words the above test now tests for the wrong thing, therefore we 
%     expand the arg out for now:
   \exp_args:Nx\xmark_put:nn {mark_#1}}
%    \end{macrocode}
%  \end{macro}
%
%
% \begin{macro}{\PreviousMark}
%    \begin{macrocode}
\cs_new_nopar:Npn \PreviousMark#1{
  \exp_args:Nc\xmark_get_previous:N{mark_#1}}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\FirstMark}
%    \begin{macrocode}
\cs_new_nopar:Npn \FirstMark#1{
  \exp_args:Nc\xmark_get_first:N {mark_#1}}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\LastMark}
%    \begin{macrocode}
\cs_new_nopar:Npn \LastMark#1{
  \exp_args:Nc \xmark_get_last:N {mark_#1}
}
%    \end{macrocode}
%  \end{macro}
%
%
%
%
% \subsubsection{2e compatibility commands}
%
%  \begin{macro}{leftmark (mark)}
%  \begin{macro}{rightmark (mark)}
%    We declare two marks to hold heading information
%    \begin{macrocode}
\DeclareMarkType{leftmark}
\DeclareMarkType{rightmark}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
%    
%  \begin{macro}{\markboth}
%  \begin{macro}{\markright}
%    The \LaTeX2e{} commands for generating heading marks needd a new
%    definition (this one right now is just a one-to-one translation).
%    \begin{macrocode}
\cs_set_nopar:Npn \markboth #1#2 {
  \group_begin:
    \cs_set_eq:NN \label    \scan_stop: 
    \cs_set_eq:NN \index    \scan_stop: 
    \cs_set_eq:NN \glossary \scan_stop:
    \unrestored@protected@xdef\@tempa{#1}%
    \exp_after:wN\@markleft\exp_after:wN{\@tempa}%
    \unrestored@protected@xdef\@tempa{#2}%
    \exp_after:wN\@markright\exp_after:wN{\@tempa}%
  \group_end:
  \if@nobreak\ifvmode\nobreak\fi\fi}
\cs_set_nopar:Npn \markright #1 {
  \group_begin:
    \cs_set_eq:NN \label    \scan_stop: 
    \cs_set_eq:NN \index    \scan_stop: 
    \cs_set_eq:NN \glossary \scan_stop:
    \unrestored@protected@xdef\@tempa{#1}%
    \exp_after:wN\@markright\exp_after:wN{\@tempa}%
  \group_end:
  \if@nobreak\ifvmode\nobreak\fi\fi}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%    
%  \begin{macro}{\@markleft}
%  \begin{macro}{\@markright}
%    \begin{macrocode}
\cs_set_nopar:Npn \@markleft  #1 {\PutMark{leftmark}{#1}}
\cs_set_nopar:Npn \@markright #1 {\PutMark{rightmark}{#1}}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\leftmark}
%  \begin{macro}{\rightmark}
%    Some more compatibility commands which eventually will go away most
%    likely.
%    \begin{macrocode}
\cs_set_nopar:Npn\leftmark{\LastMark{leftmark}}
\cs_set_nopar:Npn\rightmark{\FirstMark{rightmark}}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%    
%
%
%
% \Finale
%
\endinput
