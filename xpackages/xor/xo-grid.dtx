% \iffalse
%% File xo-grid.dtx (C) Copyright 1999-2000 Frank Mittelbach, David Carlisle, Chris Rowley
%%                  (C) Copyright 2004-2009 Frank Mittelbach, LaTeX3 Project
%%                  (C) Copyright 2014 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\RequirePackage{expl3}
\GetIdInfo $Id$
          {xo-grid (part of xor)}
\ProvidesExplPackage{\ExplFileName}
  {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
% \fi
%
%
% This package implements grid design on top of \LaTeXe{} by adding
% |\AlignToGrid| in various macros. Nothing else is really needed (or
% so I hope :-)
%
% So far this probably doesn't cover all structures that should, or
% could be handled automatically.
%
% \subsection{Headings}
%
%
% \begin{macro}{\headingsinkage}
%    This is a temporary register used to specify the amount of
%    sinkage a |\@startsection| heading is allowed if it falls at the
%    a column break. In a proper reimplementation of |\@startsection|
%    as a template, this should be individually specifiable rather
%    than being the same for all headings!
%    \begin{macrocode}
\skip_new:N  \headingsinkage
\skip_set:Nn \headingsinkage {5pt plus 3pt minus 5pt}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@startsection}
%    \begin{macrocode}
\cs_set_nopar:Npn \@startsection#1#2#3#4#5#6{%
  \if@noskipsec \leavevmode \fi
  \par
  \skip_set:Nn \l_tmpa_skip {#4}
  \@afterindenttrue
  \dim_compare:nNnT \l_tmpa_skip <\c_zero_dim
  {  \skip_set:Nn \l_tmpa_skip {-\l_tmpa_skip} \@afterindentfalse }
  \if@nobreak
    \everypar{}%
  \else
    \addpenalty\@secpenalty
    \addvspace\l_tmpa_skip
%    \end{macrocode}
%    next lines are pretty horrible but we need something like this
%    here (only it could be done better)
%    \begin{macrocode}
    \vskip-\headingsinkage
    \vskip \g_xor_saved_top_skip
    \vskip-\prevdepth
    \nointerlineskip
    \null
    \nobreak
    \vskip- \g_xor_saved_top_skip
    \vskip\headingsinkage
  \fi
  \@ifstar
    {\@ssect{#3}{#4}{#5}{#6}}%
    {\@dblarg{\@sect{#1}{#2}{#3}{#4}{#5}{#6}}}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\@sect}
%    Have to ensure that we don't get the heading itself aligned due
%    to a dangling |\AlignToGrid| from a previous structure, so we
%    issue a |\IgnoreAlignToGrid| early on. That's the only change for
%    this command.
%    \begin{macrocode}
\cs_set_nopar:Npn \@sect#1#2#3#4#5#6[#7]#8{%
  \int_compare:nNnTF {#2}>\c@secnumdepth
  { \cs_set_eq:NN \@svsec\@empty }
  {
    \refstepcounter{#1}%
    \protected@edef\@svsec{\@seccntformat{#1}\relax}%
  }
  \skip_set:Nn \l_tmpa_skip {#5}
  \IgnoreAlignToGrid
  \dim_compare:nNnTF \l_tmpa_skip>\c_zero_dim
  {
    \group_begin:
      #6{%
        \@hangfrom{\hskip #3\relax\@svsec}%
          \interlinepenalty \c_ten_thousand #8\csname @ @par\endcsname}%
    \group_end:
    \csname #1mark\endcsname{#7}%
    \addcontentsline{toc}{#1}{%
      \int_compare:nNnF {#2}>\c@secnumdepth
      {
        \protect\numberline{\csname the#1\endcsname}%
      }
      #7}%
  }
  {
    \cs_set_nopar:Npn \@svsechd{%
      #6{\hskip #3\relax
      \@svsec #8}%
      \csname #1mark\endcsname{#7}%
      \addcontentsline{toc}{#1}{%
        \int_compare:nNnF {#2}>\c@secnumdepth
        {
          \protect\numberline{\csname the#1\endcsname}%
        }
        #7}}%
  }
  \@xsect{#5}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\@xsect}
%    Now after having typeset the heading we need to issue
%    |\ObeyAlignToGrid| and make sure that the first line of text gets
%    aligned again. And in addition we issue a |\AlignToGrid| inside
%    the |\everypar| to align the first text after the heading. Of
%    course that mean that we will generate a break point after this
%    line and thus might end up with a heading and only a single
%    line afterwards.
%
%    This could be fixed by using a ``rspace'' structure as
%    implemented in \texttt{xo-or.sty} but this is not added at the
%    moment!
%    \begin{macrocode}
\cs_set_nopar:Npn \@xsect#1{%
  \ObeyAlignToGrid
  \skip_set:Nn \l_tmpa_skip {#1}
  \dim_compare:nNnTF \l_tmpa_skip>\c_zero_dim
  {
    \par \nobreak
    \vskip \l_tmpa_skip
    \@afterheading
  }
  {
    \@nobreakfalse
    \global\@noskipsectrue
    \everypar{%
      \if@noskipsec
        \global\@noskipsecfalse
       \group_begin: \box_set_to_last:N \c_zero \group_end:
        \clubpenalty\c_ten_thousand
        \AlignToGrid
        \group_begin: \@svsechd \group_end:
        \unskip
        \skip_set:Nn \l_tmpa_skip {#1}
        \hskip -\l_tmpa_skip
      \else
        \clubpenalty \@clubpenalty
        \everypar{}%
      \fi}%
  }
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \begin{macro}{\@afterheading}
%    The other case where we have to add |\AlignToGrid| to the
%    |\everypar|.
%    \begin{macrocode}
\cs_set_nopar:Npn \@afterheading{%
  \@nobreaktrue
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \c_ten_thousand
      \if@afterindent \else
        \group_begin: \box_set_to_last:N \c_zero \group_end:
      \fi
      \AlignToGrid
    \else
      \clubpenalty \@clubpenalty
      \everypar{}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{List structures}
%
% \begin{macro}{\@doendpe}
%    Handling of |\everypar| after a list structure is already strange
%    and complicated; here we complicate it even more by adding
%    |\AlignToGrid| into its definition(s).
%    \begin{macrocode}
\cs_set_nopar:Npn \@doendpe{\@endpetrue
     \cs_set_nopar:Npn \par{\@restorepar
              \everypar{\everypar{}\AlignToGrid}\par\@endpefalse}%
     \everypar{
       \group_begin: \box_set_to_last:N \c_zero \group_end:
       \everypar{}\AlignToGrid\@endpefalse
     }%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \begin{macro}{\endtrivlist}
%    And there is one case  in |\endtrivlist| in which |\@doendpe|
%    is skipped so we have to set |\everypar| manually
%    here.\footnote{Perhaps done in a wrong way, CHECK!}
%    \begin{macrocode}
\cs_set_nopar:Npn \endtrivlist{%
  \if@inlabel
    \leavevmode
    \global \@inlabelfalse
  \fi
  \if@newlist
    \@noitemerr
    \global \@newlistfalse
  \fi
  \mode_if_horizontal:T {\unskip \par}
  \if@noparlist
    \everypar{\everypar{}\AlignToGrid}
  \else
    \dim_compare:nNnT \lastskip >\c_zero_dim
    {
      \skip_set:Nn \l_tmpa_skip \lastskip
      \vskip -\lastskip
      \skip_add:Nn \l_tmpa_skip \parskip
      \skip_add:Nn \l_tmpa_skip {-\@outerparskip}
      \vskip\l_tmpa_skip
    }
    \@endparenv
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Math}
%
% \begin{macro}{\displaymath}
% \begin{macro}{\enddisplaymath}
% \begin{macro}{\[}
% \begin{macro}{\]}
%    Math is a bit more complicated as with the standard definitions
%    we don't regain control after the display. So we change all the
%    definitions to use the |\@doendpe| method. This means we have to
%    redefine |\[| et al to be a ref to |\displaymath| not the other
%    way around as it was done in \texttt{latex.ltx}. Note that we
%    don't need any of the weird brace hacks now.
%    \begin{macrocode}
\cs_set_nopar:Npn  \displaymath {
  \mode_if_math:TF
  { \@badmath }
  {
    \mode_if_vertical:T
    {
      \nointerlineskip
      \makebox[.6\linewidth]{}
    }
    $$
  }
}
\cs_set_nopar:Npn  \enddisplaymath {
  \mode_if_math:TF
  {
    \mode_if_inner:TF
    { \@badmath }
    { $$ }
  }
  { \@badmath }
%    \end{macrocode}
%    To gain control we end the paragraph and then invoke the |\end|
%    mechanism for dealing with par. This gives in certain situations
%    slightly different results compared working only with |$$|'s but
%    that's life.
%    \begin{macrocode}
  \par
  \@endpetrue % kill parindent if current paragraph continues
  \@ignoretrue
}
\cs_set_nopar:Npn \[{\begin{displaymath}}
\cs_set_nopar:Npn \]{\end{displaymath}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
% \begin{macro}{\endequation}
%    Same change for the end of an equation.
%    \begin{macrocode}
\cs_set_nopar:Npn \endequation{\eqno \hbox{\@eqnnum}$$\par\@ignoretrue
  \@endpetrue % kill parindent if current paragraph continues
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\endeqnarray}
%    And again the same for the equation array structure.
%    \begin{macrocode}
\cs_set_nopar:Npn \endeqnarray{%
    \csname @ @eqncr\endcsname
    \egroup
    \int_gdecr:N \c@equation
  $$\par\@ignoretrue
  \@endpetrue % kill parindent if current paragraph continues
}
%    \end{macrocode}
% \end{macro}
%
% \endinput
\endinput
