% \iffalse
%% File xo-final.dtx (C) Copyright 1999-2000 Frank Mittelbach, David Carlisle, Chris Rowley
%%                   (C) Copyright 2001,2004-2009 Frank Mittelbach, The LaTeX3 Project
%%                   (C) Copyright 2010-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xor bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
\RequirePackage{l3bootstrap}
\GetIdInfo $Id$
          {xo-final (part of xor)}
\ProvidesExplPackage{\ExplFileName}
  {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
% \fi
%
%
%    Update: as of April 3 this now does something reasonable with
%    top and bottom floats.  The text in between still needs lots of
%    attention.  No headers/footers/margins/overlays etc etc yet.
%
%    There is still a lot of inefficient indirection; this shows where we
%    may be able to support more general page-makeup systems.
%
%    And not much tracing yet.
%
%
%
%    \subsection{Text columns}
%
% \begin{macro}{\xor_produce_final_column:}
% \begin{macro}{\xor_final_column:}
%
%   This version does not give special treatment to column floats; it
%   simply attaches footnotes and tops/tails.
%
%   Probably this should just stuff the main text and footnotes into
%   boxes (or a box?) with no extra formatting; all aesthetic handling would
%   be done later, when the page is being made-up.
%
%   The formatting details are clearly temporary.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_final_column: {
%<*trace>
  \trace_push:n{xor_final_column:}
%</trace>
   \box_set_eq_clear:NN \@outputbox \c_two_hundred_fifty_five

   \box_if_empty:NF \g_xor_footins_box
   {
     \vbox_set:Nn \@outputbox
      {
       \boxmaxdepth \@maxdepth
%    \end{macrocode}
% \TeX\ calculates page breaks expecting the depth of the main text
% to extend below the page baseline, not contributing to the page height,
% and it assumes the entire height plus depth of footnotes will contribute
% to the page height.  When the page is assembled, the footnote depth
% is below the baseline and the main text depth appears mid-page.  To
% make the contents fit the page precisely, we (locally) adjust the
% footnote spacing \cs{skip}\cs{footins} by the \emph{difference} in
% the two depths.\footnote{This part of the code was suggested by
%    Donald Arseneau in bug report pr3189.}
%    \begin{macrocode}
       \skip_sub:Nn \g_xor_footins_skip {\box_dp:N\@outputbox} % already limited 
                                                               % to \@maxdepth
       \vbox_unpack_clear:N \@outputbox
       \dim_compare:nNnTF {\box_dp:N\g_xor_footins_box}>\@maxdepth
       { \skip_add:Nn \g_xor_footins_skip \@maxdepth }
       { \skip_add:Nn \g_xor_footins_skip {\box_dp:N\g_xor_footins_box} }
       \vskip \g_xor_footins_skip
%    \end{macrocode}
%    If we are doing grid typesetting we put all excess space between
%    the text and the footnote(s).
%    \begin{macrocode}
       \dim_compare:nNnT \g_xor_grid_point_sep_dim > \c_zero_dim
       { \vfil }
       \color@begingroup
         \normalcolor
         \footnoterule
         \vbox_unpack_clear:N \g_xor_footins_box
       \color@endgroup
      }
   }
%    \end{macrocode}
%
%   I am not sure if texttop/bottom should survive for long: something
%   more sophisticated is needed these days.  This may mean that
%   footnotes need better handling too: what makes a complex column
%   look good?
%
%    \begin{macrocode}

\trace:n{target~ column~ height:~ \dim_use:c{g_xor_best_ht_col_ 
                                             \xor_curr_col_block:
                                             _dim}}


   \vbox_gset_to_ht:cnn {g_xor_col_ \xor_curr_col_block: _box}
                        { \dim_use:c { g_xor_ht_col_ \xor_curr_col_block: _dim} }

          { % this should one day become \@colht
                                % or else
           \@texttop


%%% tmp for balancing trials ... this is in the wrong place!

        \dim_set:Nn \l_tmpa_dim {
          \box_dp:c{g_xor_col_
                    \int_use:N \g_xor_curr_col_int
                    _balance_box
          }
        }
        \box_use_clear:c {g_xor_col_
                              \int_use:N \g_xor_curr_col_int
                              _balance_box }
        \vskip -\l_tmpa_dim
        \hrule\kern-0.4pt

%%% tmp for balancing trials ... this is in the wrong place!

           \dim_set:Nn \l_tmpa_dim {\box_dp:N\@outputbox}
           \vbox_unpack_clear:N \@outputbox
           \vskip -\l_tmpa_dim
           \@textbottom
           }
   \global \maxdepth \@maxdepth
%%{\showoutput\box_show:c{g_xor_col_ \xor_curr_col_block: _box}}
%<*trace>
  \trace_pop:n{xor_final_column:}
%</trace>
}

% this is the version we are currently using!
\cs_set_eq:NN \xor_produce_final_column: \xor_final_column:
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\xor_add_floats_top:N}
% \begin{macro}{\xor_add_floats_bottom:N}
%  These are now used (if at all)
%  only within columns (maybe not best even there).
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_add_floats_top:N #1{
  \seq_if_empty:NF #1
   {
    \vbox_set:Nn \l_tmpa_box {}
    \seq_map_function:NN #1 \@comflelt
    \vbox_set:Nn \@outputbox {
                             \boxmaxdepth \maxdepth
                             \vbox_unpack_clear:N\l_tmpa_box
                             \vskip -\g_xor_float_float_skip
                             \topfigrule
                             \vskip \g_xor_float_text_skip
                             \vbox_unpack_clear:N\@outputbox
                             }
    \xor_release_floats:N #1
  }
}

\cs_generate_variant:Nn \xor_add_floats_top:N {c}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \add@floats@bottom#1{
  \seq_if_empty:NF #1
   {
    \vbox_set:Nn \l_tmpa_box {}
    \seq_map_function:NN #1 \@comflelt
    \vbox_set:Nn \@outputbox {
                             \vbox_unpack_clear:N\@outputbox
                             \vskip \g_xor_float_text_skip
                             \botfigrule
                             \vbox_unpack_clear:N\l_tmpa_box
                             \vskip -\g_xor_float_float_skip
                             }
    \xor_release_floats:N #1
   }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%    \subsection{Shipout and housekeeping}
%
%
% \begin{macro}{\g_xor_page_absolute_int}
%    Counting all pages shipped to the output starting with 1. Just like the
%    user available \LaTeX{} page counter |\c@page| it is incremented after a
%    page has been shipped out so it needs to be initialized with 1.
%    \begin{macrocode}
\tex_countdef:D \g_xor_page_absolute_int = \c_zero
\int_gset:Nn \g_xor_page_absolute_int { 1 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}

%    \end{macrocode}
%
% \begin{macro}{\xor_produce_final_page:}
%
%    This puts everything to be shipped out into the hbox
%    |\page@box| and then ships this out (not quite, see below!).
%
%    Probably these two processes should be separated.
%
%    At present it does the page-makeup within the shipped out box;
%    this should probably be done earlier.
%
%    Should the box (or the box-name) be a global
%    fixed object (bad;-) or a local parameter (good;-)?
%
%    The shipping out is surrounded by considerable housekeeping:
%    this version sets up to do the writes and fixes the
%    numbering.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_produce_final_page:{
%<*trace>
  \trace_push:n{xor_produce_final_page:}
  \trace:n{final~ page~ output:~ Chris'~ version}
%</trace>
  \group_begin:           % the \group_end: is put in by \aftergroup
%    \end{macrocode}
%
%    \begin{macrocode}
    \@resetactivechars
    \@parboxrestore
    \cs_set_eq:NN  \protect \exp_not:N
%    \end{macrocode}%
%    Temp: just puts stuff into lists (which could have been built up
%    as floats are placed?).
%    \begin{macrocode}
    \do@floats
    \shipout \hbox {        % NOTE: an hbox now!
%    \end{macrocode}
%
%    \begin{macrocode}
      \set@typeset@protect
      \aftergroup \group_end:
      \aftergroup \set@typeset@protect
%    \end{macrocode}
%    Making the box can be done outside the shipout.
%    \begin{macrocode}
       \xor_make_page_box:
       \box_use_clear:N \page@box
    }
   \xor_trace_galley_content:
% \group_end:  %% This is _implicitly_ here.
%    \end{macrocode}
%
%    \begin{macrocode}
%<*trace>
  \trace:n{finished~absolute~page:~\int_use:N \g_xor_page_absolute_int}
%</trace>
  \int_gincr:N \g_xor_page_absolute_int
%<*trace>
  \trace_pop:n{xor_produce_final_page:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xor_trace_galley_content:}
% \begin{macro}{\tracinggalley}
%    Crude tracing of the galley content: if
%    |\tracinggalley| set to a positive value we show the
%    galley content (when executing |\xor_trace_galley_content:|,
%    e.g., directly after |\shipout| to display the ``recent
%    contributions'') and when it is set to |2| or higher we won't stop
%    \begin{macrocode}
\int_new:N \tracinggalley
\cs_new_nopar:Npn \xor_trace_galley_content: {
  \int_compare:nNnT \tracinggalley > \c_zero
    {
     {
      \showoutput \showlists
      \int_compare:nNnT  \tracinggalley > \c_one
        {  \scrollmode }
     }
    }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \subsection{The page box}
%
% \begin{macro}{\mbox@addtopage}
% \begin{macro}{\box@addtopage}
% \begin{macro}{\page@box}
%  This should be generalised to add a box to any box (without overcrowding).
%    \begin{macrocode}
\box_new:N \page@box

\cs_new_nopar:Npn \mbox@addtopage (#1,#2)#3{%
%<*trace>
  \trace:n{box~being~added~to~page:~at~(#1,~#2)
        }
%</trace>
  \hbox_gset:Nn \page@box
    {
      \hbox_unpack_clear:N \page@box
      \mbox@put  (#1,#2) {#3}
    }
}
\cs_new_nopar:Npn \box@addtopage (#1,#2)#3{%
  \mbox@addtopage (#1,#2){\box_use_clear:N #3}
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\xor_make_page_box:}
%
% This adds stuff to a globally named box; maybe it should be more
% generic.
%
% This is some kind of default example.
% It should be templated.
%
%    \begin{macrocode}
\cs_set_nopar:Npn  \xor_make_page_box: {  %% NOT USED
%<*trace>
  \trace_push:n{xor_make_page_box:}
  \trace:n{new style page make-up}
%</trace>
%    \end{macrocode}
%    Temp for current header:
%    \begin{macrocode}
    \mbox@addtopage (\pagebodylefthpos, \headheight)
       {page:~\thepage}
%    \end{macrocode}
%    Then add the float areas, using a list of boxes and positions.
%    Probably, the whole thing should be done this way but this may
%    not be sensible for simple cases.
%
%    Also, some alignments (eg text) may be better handled by the
%    use of coffins (which are a very similar, but more complex,
%    technology).
%
%    First set-up starting point for main text body.
%    \begin{macrocode}
  \xor_forall_columns:n {
    \cs_gset_nopar:cpx{stack@level@\int_use:N\g_xor_curr_col_int}
        {\pagebodytopvpos}
  }
  \stack@top@areas
  \add@columns
  \stack@bot@areas
%<*trace>
  \trace_pop:n{xor_make_page_box:}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
%    \subsection{The page box: text columns}
%
%    This needs to be a lot more sophisticated in order to make these
%    look anything but dreadful.\footnote{Not touched this time around. MH}
%
% \begin{macro}{\add@columns}
% \begin{macro}{\add@columns@topstacked}
% \begin{macro}{\add@columns@botaligned}
%
%    Several possibilities here: choose one.
%
%    One way to do bottom-aligned columns (probably will not
%    generalise well):
%    \begin{macrocode}
\cs_set_nopar:Npn  \add@columns@botaligned {
%<*trace>
  \trace_push:n{add@columns@botaligned}
%</trace>
  \setlength \l_tmpa_dim {\pagebodylefthpos}
  \xor_forall_columns:n {
%<*trace>
  \trace:n{bot~aligned~column~\int_use:N\g_xor_curr_col_int :~%
         ht=\exp_args:No\the {\box_ht:c {g_xor_col_ 
                                         \xor_curr_col_block: _box}},~
         dp=\exp_args:No\the {\box_dp:c {g_xor_col_ 
                                         \xor_curr_col_block: _box }}
  }
%</trace>
%    \end{macrocode}
%    Rules will need to be handled separately: where do they go in
%    general with spanning floats?
%    \begin{macrocode}
%          \vrule
    \box@addtopage ( \l_tmpa_dim, \pagebodybotvpos )
          {\csname g_xor_col_ \xor_curr_col_block: _box\endcsname}
        \setlength \l_tmpa_dim {\l_tmpa_dim + \columnwidth + \columnsep}
%          \vrule
  }
%<*trace>
  \trace_pop:n{add@columns@botaligned}
%</trace>
}
%    \end{macrocode}
%
%    Stacking them at the top: this must be dome immediately after
%    stacking the top areas.  They are aligned, if possible, at the
%    top (the actual top, not necessarily the top text line).
%
%    \begin{macrocode}
\cs_set_nopar:Npn  \add@columns@topstacked {
%<*trace>
  \trace_push:n{add@columns@topstacked}
%</trace>
  \fdim_gset:Nn \cuur@col@pos {\pagebodylefthpos}
  \xor_forall_columns:n {
%<*trace>
    \trace:n{top~stacked~column~\int_use:N\g_xor_curr_col_int :~%
             ht=\the\box_ht:c{g_xor_col_ \xor_curr_col_block: _box},~
             dp=\the\box_dp:c{g_xor_col_ \xor_curr_col_block: _box} }
  \trace:n{vsize~for~column~\int_use:N\g_xor_curr_col_int~was:~%
                \dim_use:c {g_xor_ht_col_ \xor_curr_col_block: _dim}}
  \trace:n{lowered~column~\int_use:N\g_xor_curr_col_int~:~%
                      \csname stack@level@\int_use:N\g_xor_curr_col_int \endcsname
                      }
%</trace>
  \fdim_gset:cn {stack@level@\int_use:N\g_xor_curr_col_int}
    { \csname stack@level@\int_use:N\g_xor_curr_col_int \endcsname
      + \box_ht:c {g_xor_col_ \xor_curr_col_block: _box}
    }
%    \end{macrocode}
%    Vertical rules will need to be handled differently:
%    where do they go in general with spanning floats?
%    \begin{macrocode}
%          \vrule
    \box@addtopage (  \cuur@col@pos,
                     \csname stack@level@\int_use:N\g_xor_curr_col_int \endcsname )
          {\csname g_xor_col_ \xor_curr_col_block: _box \endcsname}
        \fdim_gset:Nn  \cuur@col@pos { \cuur@col@pos + \columnwidth + \columnsep}
%          \vrule
    }
%<*trace>
  \trace_pop:n{add@columns@topstacked}
%</trace>
}
\cs_set_eq:NN \add@columns \add@columns@topstacked
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \subsection{The page box: float areas}
%
% \begin{macro}{\t@stack@area}
% \begin{macro}{\b@stack@area}
%
%  The 4th argument must be a procedure that fills a box whose number
%  is its last argument.  This rather bizarre code merely avoids
%  a box-register-per-area.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \t@stack@area #1#2#3#4{
%<*trace>
  \trace_push:n{t@stack@area}
%</trace>
  #4 \l_tmpa_box
%    \end{macrocode}
%    First update stacking position for these columns.
%    \begin{macrocode}
  \int_set:Nn \l_tmpa_int {#2}
  \int_set:Nn \l_tmpb_int {#3}
  \dim_set:Nn \l_tmpb_dim {\box_ht:N\l_tmpa_box  + \box_dp:N\l_tmpa_box }
  \int_do_while:nNnn \l_tmpa_int  > \c_zero
  {
    \dim_set_eq:Nc \l_tmpa_dim {stack@level@ \int_use:N \l_tmpb_int}
    \dim_add:Nn \l_tmpa_dim \l_tmpb_dim
    \cs_gset_nopar:cpx {stack@level@\int_use:N \l_tmpb_int}
      { \dim_use:N \l_tmpa_dim }
    \int_incr:N \l_tmpb_int
    \int_decr:N \l_tmpa_int
  }
%    \end{macrocode}
% Calculate horizontal displacement.
%    \begin{macrocode}
  \setlength \l_tmpa_dim
    {\pagebodylefthpos - \columndisplacement + \columndisplacement * #3}
%%Change BP
%  \ifnum #3 > 1
% \addtolength \l_tmpa_dim {0.5\columnsep}
%  \fi
%% End change
%    \end{macrocode}
% Add box.
%    \begin{macrocode}
%<*trace>
  \trace:n{float~area~box~#1#2#3~~lowered~:~%
                      \csname stack@level@#3 \endcsname
                      }
%</trace>
  \box@addtopage (\l_tmpa_dim,\csname stack@level@#3\endcsname)
                 \l_tmpa_box
%<*trace>
  \trace_pop:n{t@stack@area}
%</trace>
}
%    \end{macrocode}
%    Different order for co-stacking.
%    \begin{macrocode}
\cs_new_nopar:Npn \b@stack@area #1#2#3#4{
%<*trace>
  \trace_push:n{b@stack@area}
%</trace>
  #4 \l_tmpa_box
%    \end{macrocode}
% Calculate horizontal displacement.
%    \begin{macrocode}
  \setlength \l_tmpa_dim
    {\pagebodylefthpos - \columndisplacement + \columndisplacement * #3}
%    \end{macrocode}
% Add box.
%    \begin{macrocode}
  \box@addtopage (\l_tmpa_dim,\csname stack@level@#3\endcsname)
                 \l_tmpa_box
%    \end{macrocode}
%    Then update stacking position for these columns.
%    \begin{macrocode}
  \int_set:Nn \l_tmpa_int {#2}
  \int_set:Nn \l_tmpb_int {#3}
  \setlength \l_tmpb_dim {\box_ht:N\l_tmpa_box  + \box_dp:N\l_tmpa_box }
  \int_do_while:nNnn \l_tmpa_int > \c_one
  {
    \dim_set_eq:Nc \l_tmpa_dim {stack@level@ \int_use:N \l_tmpb_int }
    \dim_sub:Nn \l_tmpa_dim \l_tmpb_dim
    \cs_gset_nopar:cpx {stack@level@ \int_use:N \l_tmpb_int}
      { \dim_use:N \l_tmpa_dim }
    \int_incr:N \l_tmpb_int
    \int_decr:N \l_tmpa_int
  }
%<*trace>
  \trace_pop:n{b@stack@area}
%</trace>
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\stack@top@areas}
% \begin{macro}{\stack@bot@areas}
%
% Use of these is all a bit ad hoc for a particular stacking system.
%
%    \begin{macrocode}
\cs_set_nopar:Npn  \stack@bot@areas {
  \stack@areas@list b \pagebodybotvpos \pagebox@list@b
}
\cs_set_nopar:Npn  \stack@top@areas {
  \stack@areas@list t \pagebodytopvpos \pagebox@list@t
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\stack@areas@list}
%
%    |#1| : stacking type (t, b or c at present)\\
%    |#2| : starting position\\
%    |#3| : list name
%
%    \begin{macrocode}
\cs_set_nopar:Npn  \stack@areas@list #1#2#3 {
%<*trace>
  \trace_push:n{stack@areas@list}
%</trace>
  \tl_if_empty:NF #3
  {
    \xor_forall_columns:n {
%    \end{macrocode}
%    Starting point:
%    \begin{macrocode}
%          \vrule
      \cs_gset_nopar:cpx {stack@level@\int_use:N\g_xor_curr_col_int}{#2}
    }
%    \end{macrocode}
%    Stacking or co-stacking: bottom-up or top-down.
%    \begin{macrocode}
    \cs_set_eq:Nc \p@elt {#1@stack@area}
    #3
  }
%<*trace>
  \trace_pop:n{stack@areas@list}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\make@area@floats@box}
%
% Format all the floats in a list and store the result in a box register.
% This should be templated.
%
% This could do the file-writing too.
%
%    |#1| : area-name\\
%    |#2| : box to be filled
%
%    \begin{macrocode}
\cs_new_nopar:Npn \make@area@floats@box #1#2 {
%<*trace>
  \trace_push:n{make@area@floats@box}
  \trace:n{Area:~ #1}
%</trace>
  \cs_if_free:cTF{g_xor_area_#1_float_seq}   % test only needed because
                                          % of missing integration
     {
%<*trace>
      \trace:n{Area:~ not~ set~ up}
%</trace>
     }
     {
  \xor_this_area_setup:o{#1} % needed below when typesetting floats

  \box_gclear:N #2                 % <-------- FMi
%    \end{macrocode}
%    Not very pretty yet!  But better when decoration
%    stuff is used.
%    \begin{macrocode}
  \seq_map_inline:cn {g_xor_area_#1_float_seq}
                     { \xor_typeset_float_in_box:nn {#2} ##1 }

  \xor_release_floats:c {g_xor_area_#1_float_seq}
     }
%<*trace>
  \trace_pop:n{make@area@floats@box}
%</trace>
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DECORATIONS}
%  Not used at present but something like this is probably needed.
%
%    \begin{macrocode}

\cs_set_nopar:Npn  \box@decorate@bot #1 {
  \vbox_set:Nn  #1 {
    \vskip \g_xor_float_text_skip
    \botfigrule
    \vbox_unpack_clear:N #1
    \vskip -\g_xor_float_float_skip
  }
}
\cs_set_nopar:Npn  \box@decorate@top #1 {
  \vbox_set:Nn  #1 {
    \vbox_unpack_clear:N #1
    \vskip -\g_xor_float_float_skip
    \topfigrule
    \vskip \g_xor_float_text_skip
  }
}


%    \end{macrocode}
% \end{macro}
%
%
%    \subsection{The page box: margins}
%
%    Needed?
%
%    \subsection{The page box: headers and footers}
%
%    Nothing worth putting here yet.
%
%    \subsection{The page box: other}
%
%    Maybe should be many subsections: eg overlays.
%
% \subsection{Typesetting captions and float boxes}
%
% All more or less temporary.
%
% \begin{macro}{\@comflelt}
% \begin{macro}{\xor_typeset_float_in_box:nn}
%
% Maybe a bad name but this is probably as generic as it can be at
% present (and one would hate to see the name's demise).
%
%    \begin{macrocode}
\cs_set_nopar:Npn \@comflelt #1 {
  \tl_gset_eq:NN \g_xor_this_float_box_tl #1
  \xor_extract_this_float_core_values:N #1
  \vbox_set:Nn \l_tmpa_box
    {
    \vbox_unpack_clear:N\l_tmpa_box
    \xor_typeset_this_float_and_caption:
    }
  }
%    \end{macrocode}
%
%    Thus sadly we maybe should move to this, avoiding the use of a
%    global variable for parameter passing.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_typeset_float_in_box:nn #1 #2 {
%<*trace>
  \trace_push:n{xor_typeset_float_in_box:nn}
%</trace>
  \tl_gset:Nn \g_xor_this_float_box_tl {#2}         % <------------- FMi

  \xor_extract_this_float_core_values:N #2

  \xor_update_this_area_span_cols:n
     {
      \int_gdecr:c
         {g_xor_ \g_xor_this_area_type_tl
          _floats_col_ \int_use:N \l_xor_update_col_int _int}
%<*trace>
       \trace:n{g_xor_ \g_xor_this_area_type_tl
              _floats_col_ \int_use:N \l_xor_update_col_int _int~ <-~
              \int_use:c {g_xor_ \g_xor_this_area_type_tl
                          _floats_col_ \int_use:N \l_xor_update_col_int _int}
         }
%</trace>
     }

  \vbox_set:Nn #1 {
    \box_if_empty:NTF #1
    {
%<*trace>
      \trace:n{add~to~#1:~float~ #2}
%</trace>
    }
    {       % experimental FMi
%<*trace>
\trace:n{add~to~#1:~float~ #2~ plus~ \g_xor_float_float_skip}
%</trace>
      \vbox_unpack_clear:N #1                            % experimental FMi
      \vskip \g_xor_float_float_skip     % experimental FMi
    }                                     % experimental FMi
    \xor_typeset_this_float_and_caption:
  }
%<*trace>
  \trace_pop:n{xor_typeset_float_in_box:nn}
%</trace>
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%    \subsection{Page box lists}
%
% \begin{macro}{\pagebox@area}
% \begin{macro}{\@addto@pagebox@list}
%
%  Bad names?
%
%  Add the float areas to a page-box list, and specify how to
%  process them.  This should be templated. The columns could be added
%  to this list.
%
%  The 2nd argument must at present be a procedure that has two
%  arguments and it is expected to fill a box whose number
%  is its last argument.  This rather bizarre code merely avoids
%  a box-register-per-area.
%
%    |#1| : area-name
%    |#2| : action for each float in area
%    |#3| : area-position
%
%    \begin{macrocode}
\cs_new_nopar:Npn \pagebox@area #1#2#3 {
%<*trace>
  \trace_push:n {pagebox@area}
%</trace>
  \seq_set_eq:Nc
    \g_xor_this_area_seq {g_xor_area_#1_float_seq}
%<*trace>
  \trace:n{adding~ floats~ (if any)~ #1~  ==~ `\g_xor_this_area_seq'~
         to~page~list:~#3 }
%</trace>
  \seq_if_empty:NF \g_xor_this_area_seq
    {
     \cs_set_eq:NN \p@elt \relax
     \@addto@pagebox@list {#3}
         { \p@elt #1 { #2 {#1}} }
    }
%<*trace>
  \trace_pop:n {pagebox@area}
%</trace>
}
%    \end{macrocode}
% Ugh!!  Improve?
%    \begin{macrocode}
\cs_set_nopar:Npn  \@addto@pagebox@list #1#2 {
  \@temptokena \exp_after:wN\exp_after:wN\exp_after:wN
    { \csname pagebox@list@#1 \endcsname
      #2
    }
  \cs_gset_nopar:cpx{pagebox@list@#1}
      { \tex_the:D \@temptokena }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%    \subsection{Magic boxes}
%
% \begin{macro}{\mbox@put}
% \begin{macro}{\box@put}
% \begin{macro}{\copy@put}
%
% Probably move sometime.\footnote{Move?}
%
% These add boxes with the specified visual relative position
% but all-zero dimensions (unlike picture mode where the inner
% boxes have non-zero vertical size).  A highly generalised lap-box!
%
% At present these use Don Knuth's left-handed DVI co-ordinate
% system.  They could (should?) be changed to a saner system as used
% by \LaTeX{}, Postscript and the rest of the known civilised world
% since Descartes.
%
%    \begin{macrocode}
\cs_new_nopar:Npn \mbox@put (#1,#2)#3{%
  \setbox\l_tmpa_box  \hbox {
%   \raise #2                              % Ugh!  Zany y-direction---
      \lower #2                            %   thanks Don!
        \hbox {\kern#1 #3\hss}
      }
%    \end{macrocode}
% For this application we must zero everything.
%    \begin{macrocode}
  \box_wd:N \l_tmpa_box  \c_zero_dim
  \box_ht:N \l_tmpa_box  \c_zero_dim
  \box_dp:N \l_tmpa_box  \c_zero_dim
  \box_use_clear:N\l_tmpa_box
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \box@put (#1,#2)#3{%
  \mbox@put (#1,#2) {\box_use_clear:N #3}
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \copy@put (#1,#2)#3{
  \mbox@put (#1,#2) {\box_use:N #3}
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Move me!}
%
% Stuff for elsewhere; maybe to xo-new right now?
%
% \begin{macro}{\xor_forall_areas:n}
% Area list stuff\footnote{Probably move.}.
%
% These should be more generally used/available whatever area lists,
%  however implemented, we end up with.
%
%  This list manipulation stuff works only for lists whose elements are
%   unexpandable; this could be extended.
%    \begin{macrocode}

\cs_new_nopar:Npn \xor_forall_areas:n #1 {
  \clist_map_inline:Nn \g_xor_areas_used_clist
       {\xor_split_area_name_and_exec:NNNn ##1 {#1}}
}


\cs_new_nopar:Npn \xor_split_area_name_and_exec:NNNn #1#2#3#4 {
  \cs_set_nopar:Npn \curr@area {#1#2#3}
  \cs_set_nopar:Npn \curr@pos {#1}
  \cs_set_nopar:Npn \curr@col {#3}
  \cs_set_nopar:Npn \curr@span {#2}
  #4
}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xor_release_floats:c}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \xor_release_floats:N#1{
%   \show #1
  \seq_gconcat:NNN \g_xor_float_free_seq \g_xor_float_free_seq #1
  \seq_gclear:N #1
}
\cs_generate_variant:Nn \xor_release_floats:N {c}
%    \end{macrocode}
% \end{macro}
%
% More helper functions (some not yet used)\footnote{To be moved}.
%
%
% Macrised lengths etc.
%
% \begin{macro}{\fdim_set:Nn}
% \begin{macro}{\fdim_gset:Nn}
% \begin{macro}{\fdim_gset:cn}
%    \begin{macrocode}
\cs_new_nopar:Npn \fdim_set:Nn #1#2{
  \dim_set:Nn \l_tmpa_dim {#2}
  \cs_set_nopar:Npx #1 {\dim_use:N \l_tmpa_dim}
}
\cs_new_nopar:Npn \fdim_gset:Nn #1#2{
  \dim_set:Nn \l_tmpa_dim {#2}
  \cs_gset_nopar:Npx #1 {\dim_use:N \l_tmpa_dim}
}
\cs_new_nopar:Npn \fdim_gset:cn #1#2{
  \dim_set:Nn \l_tmpa_dim {#2}
  \cs_gset_nopar:cpx {#1}{\dim_use:N \l_tmpa_dim}
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Really temp stuff}
%
% \begin{macro}{TEMP@KLUDGES}
% Some very temporary (very bad) examples and kludges:
%    \begin{macrocode}
\cs_set_nopar:Npn \do@floats {
%<*trace>
  \trace_push:n{do@floats}
%</trace>
  \cs_set_eq:NN   \pagebox@list@t \c_empty_tl
  \cs_set_eq:NN   \pagebox@list@b \c_empty_tl
  \xor_forall_areas:n {
    \exp_after:wN
    \pagebox@area
      \exp_after:wN
      {\curr@area} \make@area@floats@box  {\curr@pos}
  }
%<*trace>
  \trace:n {
    pagebox~list:~t~ is~\meaning \pagebox@list@t}
  \trace:n {
    pagebox~list:~b~ is~\meaning \pagebox@list@t}
  \trace_pop:n{do@floats}
%</trace>
}

%    \end{macrocode}
%
%  Temp place for these calcs. They should be part of the page layout
%  set-up.\footnote{Move?}
%  Temp positioning stuff:
%    \begin{macrocode}
\AtBeginDocument {
%% vert
  \setlength \l_tmpa_dim {\headheight + \headsep}
  \cs_gset_nopar:Npx \pagebodytopvpos {\dim_use:N \l_tmpa_dim}

  \setlength \l_tmpa_dim {\l_tmpa_dim + \textheight}
  \cs_gset_nopar:Npx \pagebodybotvpos {\dim_use:N \l_tmpa_dim}

%% horiz
  \setlength \l_tmpa_dim {\columnwidth + \columnsep}
  \cs_gset_nopar:Npx \columndisplacement {\dim_use:N \l_tmpa_dim}

  \cs_gset_nopar:Npn \pagebodylefthpos {\c_zero_dim}  % or whatever?)

%  \show \pagebodytopvpos
%  \show \pagebodybotvpos
%
%  \showthe \headheight
%  \showthe \headsep
%  \showthe \textheight
%  \showthe \textwidth
%  \showthe \columnwidth
}

%    \end{macrocode}
%    \end{macro}
%
% \endinput
\endinput
