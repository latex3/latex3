% \iffalse
%% File xfmgalley.dtx
%% (C) Copyright 2001, 2004-2009 Frank Mittelbach, LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xfrontm bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%<*driver|package|sample>
\RequirePackage{expl3}
%</driver|package|sample>
%\fi
\GetIdInfo$Id$
       {front matter galley stuff (temp)}
%\iffalse
%<*sample>
\ProvidesFile{\jobname-sample.tex}
  [\filedate\space v\fileversion\space\filedescription]
%</sample>
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
%\iffalse
\documentclass{l3doc}

\newcommand\LaTeXplus{\LaTeXe$*$}
\newcommand\fontwordspace{\texttt{\textbackslash fontwordspace}}
\newcommand\fontextraspace{\texttt{\textbackslash fontextraspace}}
\newcommand\NoValue{\texttt{\textbackslash NoValue}}

\newcommand\PARM[1]{parameter \textbf{#1}}
\newcommand\key[1]{\textbf{#1}}
%
 \begin{document}
 \catcode`\_=11
 \catcode`\:=11
 \DocInput{xfmgalley.dtx}
 \end{document}
%</driver>
%
% \fi
%
%
% \title{The \textsf{xfmgalley} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{FMi}
% \date{\filedate}
%
%  \maketitle
%
% \tableofcontents
%
%
% \bigskip
%
% \begin{abstract}
%    A set of templates providing some galley functionality from
%    \texttt{galley2.dtx} and \texttt{xhj.dtx} but working
%    standalone.
%
%    Since \texttt{galley2} isn't really ready for general use this is
%    primitive version help us getting along. It is not intended to be
%    final.
%
%    The template interfaces are the same (except for keyword renames)
%    as those from the mentioned \texttt{.dtx} files so that reuse of
%    stuff is not going to be too difficult.
%    The documentation of the interfaces more or less copied from
%    the above files too.
%
%   \[ * \quad * \quad * \]
%
%   This module contains basic templates for interfacing with the
%   galley mechanism as set up by the module
%   \texttt{galley2}. These templates are intended for class
%   designers and are mostly usable out of the box (i.e., this is one
%   of the modules where providing a suitable number of default
%   instances is probably sensible since they would cover 98\% of all
%   usage. In contrast the \texttt{galley2} module contains only
%   low-level interfaces for
%   direct manipulation of the galley mechanism which are geared
%   towards package writers having special needs which are not
%   fulfilled by the templates in this module.
% \end{abstract}
%
%
%
%
% \section{Introduction}
%
% In \LaTeXplus{} terminology a galley is a rectangular area which
% receives text and other material filling it from
% top.\footnote{The predominant direction depends on the writing
% system and with extensions to \TeX{} such as Omega there are
% possibilities to define galleys with a different filling direction.}
% The vertically extend of a galley is normally not restricted
% (there are exceptions); instead certain chunks are taken off the top
% of an
% already partially filled galley to form columns or similar areas
% on a page. This process is typically asynchronous but there are ways
% to control or change its behavior.
%
% Examples for galleys are `the main galley', where the continuous
% document data gets formatted into  and from which columns and pages are
% constructed, and  `vbox galley's, such as the body of  a minipage
% environment or the body of a float (in \LaTeXe only---the new float
% mechanism for \LaTeXplus{} will employ horizontally oriented float
% bodies). The latter galleys are typically not being split after
% formatting though there can be exceptions.
%
% Low-level interfaces for setting up such galleys and the way objects
% are formatted into them are provided by the module
% \texttt{galley2}.
%
% \subsection{Formatting layers}
%
% The present module is mainly concerned with the
% formatting of text in such galleys.
% The galley mechanism provides interfaces at four different layers
% some of which can be manipulated through the templates provided by
% this module.
%
% \subsubsection{Outer galley dimensions}
%
% In the bottom layer the external dimensions of a galley are
% fixed. In most cases only the horizontal dimension is defined while
% the vertical dimension (i.e., the filling direction) remains
% unspecified. These dimensions are fixed when initiating a new galley,
% using low-level functions, and are not modifiable. The horizontal
% overall width of the current galley is available for inspection in
% the register |\GalleyTotalWidth|.
% There are no templates that only set variable of this layer, though
% higher level
% templates (e.g., a template for providing minipage functionality)
% will of course address this part of the galley mechanism.
%
%
% \subsubsection{Inner galley dimensions}
%
% The second layer defines the inner horizontal galley dimensions of
% the galley, i.e., the measure used for paragraph text and its
% positioning within the galley. The current measure of the galley is
% available for inspection in the register |\GalleyTextWidth| and the
% indentation from the left outer margin is available in the register
% |\GalleyMarginWidth|.\footnote{The two registers are already
% available in \LaTeXe{} under the names \texttt{\textbackslash
% @totalleftmargin} and \texttt{linewidth} and their old names have
% been  retained to make
% it easier to use a mixture of old and new code. However at some
% point the interface should be made more uniform by dropping the old
% names.}
%
% This layer can (and should) be manipulated by higher-level templates
% through template instances of the type `measure'. These templates
% make long-term changes.
%
%
%
%
% \subsubsection{Paragraph shapes}
%
% The third layer defines the paragraph shape within the measure as
% provided by the second layer. In the absence of any specification
% for that layer the paragraph shape used will be that of a
% rectangular area of the width of the current measure.
%
% For this layer we are restricted by the mechanisms offered by
% \TeX{}. This means that it is possible to define particular
% paragraph shapes such as cutouts only from the top of a paragraph
% but not relative to its bottom.
%
% This layer can (and should) be manipulated by higher-level templates
% through template instances of the type `pshape'. Templates in this
% layer typically make short-term changes only (i.e. applicable only
% to the upcoming paragraph), however templates for long-term changes
% are also permissible though none are provided right now.
%
% A future implementation of the \texttt{galley2} module is probably
% going to support pshapes spanning several paragraphs, however at the
% moment pshapes apply per paragraph only.
%
%
% \subsubsection{Text formatting within the paragraph shape}
%
% The forth (and currently final) layer deals with  the paragraph
% formatting aspects such as hyphenation and justification (h\&j which
% gave the current module its name).
%
% There are several template types in this layer: `hj' is a type that
% sets all aspects of h\&j in a single template whereas the types
% `justification', `linebreak', and `hyphenation' deal with individual
% aspects.
%
% \subsection{Open issues}
%
% Several but right now most of them are discussed when describing the
% interfaces in more details below.
%
% \begin{itemize}
% \item
%   The model attempts a proper separation between paragraph shapes
%   (layer three) and justification (part of layer four). However, due
%   to the way \TeX{} works certain paragraph shapes can only be
%   accomplished by using the parameters that are normally reserved
%   for justification (an example would be the famous shape used by
%   |\@dottedcontentsline|, i.e., a rectangular shape with the first
%   line sticking out to the left and the last line sticking out to
%   the right). How to integrate such shapes on layer three needs some
%   more thought.
% \item
%   What does the argument to the `measure' type really signal? Always
%   a relative value (to current |\GalleyMarginWidth|), always an
%   absolute value, or a value depending on what the template makes
%   out of it? Perhaps this is not that important as one can't expect
%   any such document supplied value be correct for different
%   designs---or is this the wrong idea? At the moment I make
%   it always be a relative change to |\GalleyMarginWidth| independent
%   of the type of template being used.
% \end{itemize}
%
%
% \section{Interfaces}
%
% \begin{TemplateInterfaceDescription}{measure}
%
%   \TemplateArgument{1}
%       {Indentation of the left margin overwriting the default change
%        or \NoValue{} in which case the value from the template
%        is used. If provide the value is \emph{always} interpreted as
%        being relative to the current indentation in the galley.}
%
%   \TemplateSemantics
%     This template type defines the basic measure of the galley,
%     i.e., the width of the lines (|\GalleyTextWidth|) and  their
%     indentation from the left (|\GalleyMarginWidth|).
%
%     Each template of this type has to set the above parameters
%     locally to their correct value.\footnote{That part of the
%     implementation in \texttt{galley2.dtx} probably needs changing.}
%
%     The templates can (and in most cases do) refer to an
%     external\footnote{Again that is something which may not survive
%     for long. It might very well be the case that all these
%     parameters need to be added to the main galley data structures.}
%     parameter holding the overall nominal width of the current
%     galley (|\GalleyTotalWidth|). However it is perfectly admissible that the
%     template parameters are set in a way that |\GalleyMarginWidth| +
%     |\GalleyTextWidth| exceeds this nominal width (the galley mechanism
%     provides low-level calls that allow for this without producing
%     an error. This way paragraphs in a galley may stick out on
%     either side if desired.
%
%     One could think of making also the right margin being user
%     over-writable or providing something like a boolean to modify the
%     meaning of the template argument---suggestions/applications
%     needed.\footnote{Think!}
%
%     Templates of this type make long-term changes, i.e., their
%     settings remain until the next occurrence of an instance of this
%     type or until the galley ends or its previous settings are
%     restored. As remarked in the introduction
%     there is a need for saving and restoring the settings of this
%     particular part of the mechanism individually.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{measure}{relative}
%
%   \TemplateKey{leftmargin-width}{l}
%      {Additional indentation on the left for all lines}
%      {none}
%
%   \TemplateKey{rightmargin-width}{l}
%      {Additional indentation on the right for all lines}
%      {none}
%
%   \TemplateSemantics
%    This is the main template needed for defining vertically oriented
%    lists and the like (at least if they are supposed to allow for
%    nesting).
%
% \end{TemplateDescription}
%
%
%
% \begin{TemplateDescription}{measure}{absolute}
%
%   \TemplateKey{leftmargin-width}{l}
%      {Indentation on the left for all lines}
%      {none}
%
%   \TemplateKey{rightmargin-width}{l}
%      {Indentation on the right for all lines measured from the
%      nominal width of the galley (i.e., \texttt{\textbackslash
%      GalleyTotalWidth})}
%      {none}
%
%   \TemplateSemantics
%     This template can be used in cases where one wishes to ignore
%     any already existing indentations. Whether or not this has real
%     applications remains to be seen.
%
% \end{TemplateDescription}
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{pshape}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%    Templates of this type define the shape of the paragraph within
%    the given measure of the galley, e.g., whether it has some
%    special form such as a cutout one or the other side.
%
%    Typically they define a shape only for the next paragraph,
%    however templates that provide long term changes are also allowed.
%
%    Since such special forms often require that all lines of a
%    paragraph are kept together on a page these templates typically
%    also define whether or not pages breaks within a paragraph are
%    allowed.
%
%    An interesting question is whether or not such templates should
%    set (or inhibit) paragraph indentations via a template key. After
%    all with cutouts on the top left such indentations are usually
%    not desired.\footnote{Right now only justification templates set
%    indentation but perhaps they should not, or both should, or what?}
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateDescription}{pshape}{cutout}
%
%   \TemplateKey{no-pagebreak-boolean}{s}
%      {If true the upcoming paragraph will not be broken across a
%       page. If false the breakability of the upcoming paragraph
%       depends on other elements in the galley, i.e., it might still
%       be forbidden to break.}
%      {false}
%
%   \TemplateKey{left-side-boolean}{s}
%      {If true, the cutout will appear on the left otherwise it will
%       appear on the right.}
%      {true}
%
%   \TemplateKey{normal-lines-int}{c}
%      {Number of lines before the cutoff starts.}
%      {0}
%
%   \TemplateKey{parshape-list}{f0}
%      {Comma separated list of dimensions denoting the horizontal
%       size of the cutout for successive lines. If the paragraph
%       contains more lines than the sum of \key{normal-lines-int} and
%       the number of elements in this list then the remaining lines
%       are all normal lines (i.e., cutout width 0pt) again.}
%      {none}
%
%   \TemplateSemantics
%     This template is used to define a fixed cutout on one or the
%     other side of a paragraph. It applies to the next paragraph
%     only.
%
%     The \key{normal-lines-int} is for convenience
%     only. Alternatively one could prepend a suitable number of
%     `\texttt{0pt,}'s to \key{parshape-list}.
%
% \end{TemplateDescription}
%
%
% \begin{InstanceDescription}[\textbf{no-pagebreak-boolean}xx]
%       {pshape}{staggered}{cutout}
%
%   \InstanceKey{no-pagebreak-boolean}{true}
%
%   \InstanceKey{left-side-boolean}{true}
%
%   \InstanceKey{normal-lines-int}{1}
%
%   \InstanceKey{parshape-list}{20pt,40pt,60pt}
%
%   \InstanceSemantics
%   This instance will indent each line by an additional 20pt (up to
%   the fourth line). A possible application would be a heading text
%   (with a maximum number of four lines).
%   This should then perhaps be combined with a special justification
%   instance which does ragged right except for the last line which is
%   set to full measure.
%
% \end{InstanceDescription}
%
%
% \begin{InstanceDescription}[\textbf{no-pagebreak-boolean}xx]
%       {pshape}{ltriangle}{cutout}
%
%   \InstanceKey{no-pagebreak-boolean}{true}
%
%   \InstanceKey{left-side-boolean}{true}
%
%   \InstanceKey{normal-lines-int}{0}
%
%   \InstanceKey{parshape-list}{60pt,40pt,20pt}
%
%   \InstanceSemantics
%    This instance will produce a triangle cutout on the left upper
%    corner of a paragraph. Could, for example, used together with an
%    unusual heading layout~\ldots
%
% \end{InstanceDescription}
%
%
% \begin{InstanceDescription}[\textbf{no-pagebreak-boolean}xx]
%       {pshape}{rectangle}{cutout}
%
%   \InstanceKey{no-pagebreak-boolean}{false}
%
%   \InstanceKey{left-side-boolean}{true}
%
%   \InstanceKey{normal-lines-int}{0}
%
%   \InstanceKey{parshape-list}{}
%
%   \InstanceSemantics
%    This instance can be used when a pshape is required but one just
%    wants a standard regular paragraph area.\footnote{Using the cutoff
%    template for this is overkill; at some point in the future this
%    instance should be reimplemented.}
%
% \end{InstanceDescription}
%
%
%
%
% \begin{TemplateInterfaceDescription}{justification}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%     Templates of this type define how a paragraph text is formatted
%     within the boundaries of a general paragraph shape (as defined
%     through a measure (and perhaps additionally a pshape)
%     template). More exactly they define whether or
%     not the text should be justified at both sides or only at one
%     side and in the latter case how much raggedness is desired,
%     etc. See the instance examples for more details.
%
%     The\marginpar{Not yet implemented}
%     \key{linefill-skip} in the templates below is worth
%     mentioning. It defines a stretchable space that is used by
%     commands that end a line prematurely in the middle of a
%     paragraph, e.g., |\\| or |\newline|. In most cases what is
%     needed is to fill the line with white space in exactly the same
%     way as \TeX's |\parfillskip| parameter works (which is also the
%     reason for the chosen default). However, for special instances
%     this is not appropriate. Important is that any template of this
%     type provides this key or rather provides a mechanism to
%     correctly feeds the underlying data structure.
%
%     Originally there have been different template types for setting
%     the paragraph specs for all following paragraphs and for only
%     the next one but this was combined into a single type. Whether
%     or not this is the right approach remains to be seen.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{justification}{std}
%
%   \TemplateKey{start-skip}{l}
%      {Stretchable space added to the left of the first line in a
%       paragraph (in addition to \key{left-skip}).}
%      {0pt}
%
%   \TemplateKey{left-skip}{l}
%      {Stretchable space added to the left of every line in a
%       paragraph.}
%      {\texttt{\textbackslash left-skip}}
%
%   \TemplateKey{right-skip}{l}
%      {Stretchable space added to the right of every line in a
%       paragraph.}
%      {\texttt{\textbackslash right-skip}}
%
%   \TemplateKey{fill-skip}{l}
%      {Stretchable space added to the right of the last line in a
%       paragraph (in addition to \key{right-skip}).}
%      {\texttt{\textbackslash parfillskip}}
%
%   \TemplateKey{space-skip}{l}
%      {Stretchable space to use between words if non-zero. Otherwise
%      size for space between words is taken from the current font
%      metrics.}
%      {\texttt{\textbackslash spaceskip}}
%
%   \TemplateKey{xspace-skip}{l}
%      {Extra space to use after periods etc.~(in certain situations)}
%      {\texttt{\textbackslash xspaceskip}}
%
%   \TemplateKey{linefill-skip}{l}
%      {Space to add at the point where some command requests a
%      ``carriage-return line-feed'' in the middle of a paragraph,
%      e.g., the \LaTeX{} command \texttt{\textbackslash newline}.}
%      {value of \key{fill-skip}}
%
%   \TemplateKey{indent-width}{l}
%      {Non-stretchable space to be added at the beginning of a
%      paragraph.}
%      {\texttt{\textbackslash parindent}}
%
%   \TemplateSemantics
%
%     This template sets the paragraph justification for all following
%     paragraph (within the normal scope, i.e., until the end of the
%     galley or a new specification).
%
%     The key names for this template are derived from the original
%     \TeX{} primitives whenever applicable. Perhaps this is a bad
%     idea as \key{start-skip} and \key{fill-skip} do not go well
%     together.
%
%     The defaults for most keys are actually the command names of the
%     original \TeX{} primitives. The intention is that something like
%     \key{indent-width} could be externally provided by setting
%     |\parindent| for all instances which do not explicitly set it to
%     some value (e.g., to 0pt in instances where paragraph
%     indentation is not really appropriate). Whether this is a good
%     idea remains to be seen, this probably need some radically
%     different default concept.
%
% \end{TemplateDescription}
%
%
%
%
% \begin{InstanceDescription}{justification}{default}{std}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{0pt plus 1fil}
%
%   \InstanceSemantics
%
%   This instance is slightly special as it is internally called
%   whenever a new galley is instantiated, e.g., in a minipage. Thus
%   it must be defined by class. The setting above is the same as for
%   the adjust instance, but of course a class might wish to change
%   this, e.g., if the desired layout requires ragged right setting by
%   default.
%
% \end{InstanceDescription}
%
%
%
%
%
%
% \begin{InstanceDescription}{justification}{adjust}{std}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{0pt plus 1fil}
%
%   \InstanceSemantics
%
%     This instance provides the standard justified paragraph setting,
%     i.e., every line is justified at both sides and the final line
%     is set flush left. Paragraph indentation is not set, i.e. will
%     be whatever the value of |\parindent| is.
%
% \end{InstanceDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{adjust2}{std}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{20pt plus 1fil}
%
%   \InstanceSemantics
%
%     This is a variation of the previous instance: the difference is
%     that the last line of a paragraph can never be completely
%     filled. In some sense this defines a paragraph indent at the
%     end.
%
%     Further variations are possible, e.g., one can ensure that the
%     last line always contains at least a certain amount of space.
%
% \end{InstanceDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{center}{std}
%
%   \InstanceKey{indent-width}{0pt}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{0pt}
%
%   \InstanceSemantics
%
%     This instance is an example of a layout where the paragraph
%     indent is explicitly set to zero to ensure that all lines are
%     properly centered. Of course even with centered lines somebody
%     could think of having a paragraph indentation: if so define a
%     variation of the this instance.
%
% \end{InstanceDescription}
%
%
%
%
% \begin{InstanceDescription}{justification}{centermiddle}{std}
%
%   \InstanceKey{indent-width}{0pt}
%
%   \InstanceKey{start-skip}{-36pt plus -1fill}
%
%   \InstanceKey{left-skip}{36pt plus 1fill}
%
%   \InstanceKey{right-skip}{36pt plus 1fill}
%
%   \InstanceKey{fill-skip}{-36pt plus -1fill}
%
%   \InstanceSemantics
%
%     A specialized instance that sets the first line of the paragraph
%     flush left, the last line flush right and the intermediate lines
%     centered with at least one centimeter space at each
%     side. Possible application could be two or three line headings.
%
% \end{InstanceDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{raggedright}{std}
%
%   \InstanceKey{start-skip}{0pt}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt plus 2em}
%
%   \InstanceKey{fill-skip}{0pt plus 1fil}
%
%   \InstanceKey{space-skip}{\fontwordspace}
%
%   \InstanceKey{xspace-skip}{\fontwordspace + \fontextraspace}
%
%   \InstanceSemantics
%
%    This interesting instance defines a ragged right setting which
%    allows for hyphenation in case the raggedness would otherwise be
%    too extreme (2em in the current font are considered okay anything
%    in addition will start making the line bad as far as \TeX's
%    paragraph algorithm is concerned so \TeX{} will consider
%    hyphenation in such cases.
%
%    An unjustified setting should always contain identical word
%    spaces. Since we restrict the stretchability at the right  end (it is
%    of the same strength as the default word  space stretchability), we
%    have to ensure that the word spaces to not stretch or shrink at
%    all. This is achieved by forcing the \key{space-skip} to the
%    normal font word space (without any stretch).
%
% \end{InstanceDescription}
%
%
%
%
%
%
% \begin{InstanceDescription}{justification}{flushleft}{std}
%
%   \InstanceKey{indent-width}{0pt}
%
%   \InstanceKey{start-skip}{0pt}
%
%   \InstanceKey{left-skip}{0pt}
%
%   \InstanceKey{right-skip}{0pt plus 1fill}
%
%   \InstanceKey{fill-skip}{0pt plus 1fill}
%
%   \InstanceSemantics
%
%    In contrast to the previous instance, this instance allows for
%    arbitrary short lines, i.e., a paragraph set using this instance
%    will never get hyphenated unless it contains words longer than
%    the line measure.
%
%    As all the stretchable space will appear at the right margin
%    there in no point in artificially modify the word spaces as they
%    will be set at their natural size anyway.
%
% \end{InstanceDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{raggedleft}{std}
%
%   \InstanceKey{start-skip}{0pt}
%
%   \InstanceKey{left-skip}{0pt plus 2em}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{0pt}
%
%   \InstanceKey{space-skip}{\fontwordspace}
%
%   \InstanceKey{xspace-skip}{\fontwordspace + \fontextraspace}
%
%   \InstanceSemantics
%
%     This instance is the raggedleft counter part to the raggedright
%     instance above.
%
% \end{InstanceDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{flushright}{std}
%
%   \InstanceKey{start-skip}{0pt}
%
%   \InstanceKey{left-skip}{0pt plus 1fill}
%
%   \InstanceKey{right-skip}{0pt}
%
%   \InstanceKey{fill-skip}{0pt}
%
%   \InstanceSemantics
%
%     And here is the variation which is not using hyphenation unless
%     there is absolutely no other alternative.
%
% \end{InstanceDescription}
%
%
%
% \begin{TemplateDescription}{justification}{single}
%
%   \TemplateKey{start-skip}{l}
%      {Stretchable space added to the left of the first line in a
%       paragraph (in addition to \key{left-skip}).}
%      {0pt}
%
%   \TemplateKey{left-skip}{l}
%      {Stretchable space added to the left of every line in a
%       paragraph.}
%      {\texttt{\textbackslash leftskip}}
%
%   \TemplateKey{right-skip}{l}
%      {Stretchable space added to the right of every line in a
%       paragraph.}
%      {\texttt{\textbackslash rightskip}}
%
%   \TemplateKey{fill-skip}{l}
%      {Stretchable space added to the right of the last line in a
%       paragraph (in addition to \key{right-skip}).}
%      {\texttt{\textbackslash parfillskip}}
%
%   \TemplateKey{space-skip}{l}
%      {Stretchable space to use between words if non-zero. Otherwise
%      size for space between words is taken from the current font
%      metrics.}
%      {\texttt{\textbackslash spaceskip}}
%
%   \TemplateKey{xspace-skip}{l}
%      {Extra space to use after periods etc.~(in certain situations)}
%      {\texttt{\textbackslash xspaceskip}}
%
%   \TemplateKey{linefill-skip}{l}
%      {Space to add at the point where some command requests a
%      ``carriage-return line-feed'' in the middle of a paragraph,
%      e.g., the \LaTeX{} command \texttt{\textbackslash newline}.}
%      {value of \key{fill-skip}}
%
%   \TemplateKey{indent-width}{l}
%      {Non-stretchable space to be added at the beginning of a
%      paragraph.}
%      {\texttt{\textbackslash parindent}}
%
%   \TemplateSemantics
%
%     This template is exactly the same as the std one, except that it
%     applies only to the next paragraph after which the previous
%     setting will become active again. For an explanation of the keys
%     see the std template description.
%
%     It is not clear whether this approach makes much
%     sense. See comments below.
%
% \end{TemplateDescription}
%
%
%
%
%
% \begin{InstanceDescription}{justification}{centerfirst}{single}
%
%   \InstanceKey{start-skip}{0pt plus 2fill}
%
%   \InstanceKey{left-skip}{0pt plus -1fill}
%
%   \InstanceKey{right-skip}{0pt plus 1fill}
%
%   \InstanceKey{fill-skip}{0pt}
%
%   \InstanceKey{linefill-skip}{0pt}
%
%   \InstanceSemantics
%
%    This instance centers the first line of a paragraph and sets all
%    remaining lines as a solid block (including the last line). This
%    is a rather specialized justification method which relies on some
%    peculiar features of the \TeX's internal handling of stretchable
%    space. It is not possible to control the amount of white space on
%    the first line (other than forcing it to be centered) with the
%    controls available. Anything further needs manual intervention by
%    the user.
%
%    In a similar fashion centering of the last line could be achieved
%    (by setting \key{fill-skip} rather than \key{start-skip}.
%
% \end{InstanceDescription}
%
%
%
%
%
%
%
% \begin{TemplateDescription}{justification}{complex}
%
%   \TemplateKey{first-para-justification-setup}{i}
%      {Justification setup for the first paragraph of a sequence.}
%      {none}
%
%   \TemplateKey{other-para-justification-setup}{i}
%      {Justification setup for the remaining paragraphs in the sequence}
%      {none}
%
%   \TemplateSemantics
%
%    This template allows to specify a different justification setup
%   for the first paragraph of a sequence and its remaining
%   paragraphs. Due to the implementation it is currently required
%   that the key \key{first-para-justification-setup} receives an
%   instance defined through the template `single' or more exactly
%   through a template that modifies the justification setup only for
%   a single paragraph. Otherwise all paragraphs in the sequence will
%   be formatted in the same way (i.e., the second key would have no
%   effect).
%
%   This is largely due to the fact that the implementation previously
%   contained different template types for local and `global' changes
%   to the justification.\footnote{Better concept needed! Perhaps the
%   coding in galley2 needs changing in this area.}
%
%
% \end{TemplateDescription}
%
%
%
%
% \begin{InstanceDescription}[\textbf{other-para-justification-setup}xx]
%       {justification}{centerfirst-adjust}{complex}
%
%   \InstanceKey{first-para-justification-setup}{centerfirst}
%
%   \InstanceKey{other-para-justification-setup}{adjust}
%
%   \InstanceSemantics
%
%    This instance is an example for a paragraph justification where
%    the first and the remaining paragraphs are handled differently:
%    the first paragraph will get a centered first line (with the
%    remaining lines being set as a squared block and any additional
%    paragraph will be justified. A common use for such a
%    layout would be table captions.
%
% \end{InstanceDescription}
%
%
%
%
%
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{hyphenation}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%
%   \marginpar{Not yet implemented}
%
%   Templates of this type define whether or not hyphenation is
%   attempted for upcoming paragraphs in the galley and if hyphenation
%   is allowed whether it should be encouraged (to support better
%   justification) or whether it should be only used if justification
%   would get too bad without it.\footnote{There are a few conceptual
%   questions: should templates of this type set anything like
%   \key{hyphenpenalty} or would this be better handled in the
%   linebreak template type and this template type only be used to set
%   hyphenation on/off? In case of the latter is it needed as a
%   separate type or should it be added to some other type?}
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{hyphenation}{TeX}
%
%   \TemplateKey{uchyph}{c}
%      {If positive allow hyphenation of words starting with an
%      uppercase letter.}
%      {1}
%
%   \TemplateKey{hyphenpenalty}{c}
%      {}
%      {50}
%
%   \TemplateKey{exhyphenpenalty}{c}
%      {}
%      {50}
%
%   \TemplateKey{lefthyphenmin}{c}
%      {}
%      {leave unchanged}
%
%   \TemplateKey{righthyphenmin}{c}
%      {}
%      {leave unchanged}
%
%   \TemplateSemantics
%
%     Keys are named like the \TeX{} primitives. As I remarked
%     earlier, perhaps \key{hyphenpenalty} and \key{exhyphenpenalty}
%     should be moved to the linebreak templates.
%
%     Also an open question is the keys
%     \key{left/righthyphenmin}. Their minimum values are actually a
%     feature of the current language or more exactly a feature of the
%     hyphenation patterns in force, but on the other hand one can
%     increase their values without harm and especially by setting
%     them to extremely high values one can disable hyphenation
%     altogether. So how should this be handled?
%
% \end{TemplateDescription}
%
%
%
% \begin{TemplateDescription}{hyphenation}{std}
%
%   \TemplateKey{hyphen-enable-boolean}{s}
%      {If false disables hyphenation}
%      {none}
%
%   \TemplateKey{hyphen-uppercase-boolean}{s}
%      {If positive allows hyphenation of words starting with an
%      uppercase letter.}
%      {none}
%
%   \TemplateKey{hyphen-discourage-boolean}{s}
%      {Sets penalties for breaking a line at a discretionary to a
%      higher value. Only relevant if \key{hyphen-enable-boolean} is
%      set to true.}
%      {none}
%
%   \TemplateKey{hyphen-encourage-boolean}{s}
%      {Sets penalties for breaking a line at a discretionary to a
%      higher value. Only relevant if \key{hyphen-enable-boolean} is
%      set to true.}
%      {none}
%
%   \TemplateSemantics
%
%    Better or worse than the TeX version? In any case it remains a
%    question of whether the line breaking parts should be set in a
%    template like this.
%
% \end{TemplateDescription}
%
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{linebreak}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%
%   \marginpar{Not yet implemented}
%
%    This template type determines the line breaking behavior of the
%    \TeX{} machinery, with the exception of whether or not to
%    hyphenate (certain) words. It could be considered to moved the
%    parameters related to breaking up math formulas to a separate
%    type.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{linebreak}{TeX}
%
%   \TemplateKey{pretolerance}{c}
%      {Maximum tolerance allowed for individual lines to break the
%      paragraph without attempting hyphenation.}
%      {100}
%
%   \TemplateKey{tolerance}{c}
%      {Maximum tolerance allowed for individual lines when breaking a
%      paragraph while attempting hyphenation (if this limit can't be
%      met \key{emergencystretch} comes into play.}
%      {200}
%
%   \TemplateKey{linepenalty}{c}
%      {Extra penalty charged per line in the paragraph. By making
%      this penalty higher \TeX{} will try harder to produce compact
%      paragraphs.}
%      {10}
%
%   \TemplateKey{binoppenalty}{c}
%      {Penalty charged if an inline math formula is broken at a
%      binary operator.}
%      {700}
%
%   \TemplateKey{relpenalty}{c}
%      {Penalty charged if an inline math formula is broken at a
%      relational symbol.}
%      {500}
%
%   \TemplateKey{hbadness}{c}
%      {Boundary that if exceeded will cause \TeX{} to report an
%      underfull line.}
%      {1000}
%
%   \TemplateKey{adjdemerits}{c}
%      {Extra demerit charge if two visually incompatible lines follow
%      each other.}
%      {10000}
%
%   \TemplateKey{doublehyphendemerits}{c}
%      {Extra demerit charge of two (or more) lines in succession end
%      in a hyphen.}
%      {10000}
%
%   \TemplateKey{finalhyphendemerits}{c}
%      {Extra demerit charge if the second last line is hyphenated.}
%      {5000}
%
%   \TemplateKey{hfuzz}{l}
%      {Boundary below overfull lines are not reported.}
%      {.1pt}
%
%   \TemplateKey{emergencystretch}{l}
%      {Complicated --- I write up the explanation at some other day :-)}
%      {0pt}
%
%   \TemplateSemantics
%     Keys are named like the \TeX{} primitives. As I remarked
%     earlier, perhaps \key{hyphenpenalty} and \key{exhyphenpenalty}
%     from the hyphenation template
%     should be moved to the linebreak templates.
%
%
% \end{TemplateDescription}
%
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{hj}
%
%   \TemplateArgument{none}
%       {---}
%
%   \marginpar{Not yet implemented}
%
%   \TemplateSemantics
%    Often certain combinations of justification, line breaking and
%    hyphenation settings are used together. For those case it might
%    be desirable to be able to identify these settings with a single
%    name. The hj type provides for this. It is supposed to set the
%    complete ``micro typography'' setting concerning paragraphs,
%    i.e., everything that happens within the outer form as defined by
%    the measure and/or pshape templates.
%
%    Whether this template type is actually needed remains to be
%    seen. Clearly everywhere where it gets applied one could apply
%    individually templates of type justification, linebreak, and
%    hyphenation.
%
%    Right now the low-level galley interface uses an instance of this
%    type (with the name ``default'') to initialize a new
%    galley.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{hj}{std}
%
%   \TemplateKey{justification-setup}{i}
%      {Instance specifying the justification used.}
%      {\texttt{default}}
%
%   \TemplateKey{linebreak-setup}{i}
%      {Instance specifying the line breaking parameters}
%      {\texttt{default}}
%
%   \TemplateKey{hyphenation-setup}{i}
%      {Instance specifying the hyphenation parameter used.}
%      {\texttt{default}}
%
%   \TemplateSemantics
%    This is the shortcut template as discussed before. One could
%    think of other templates that do set the parameters using a large
%    number keys (\TeX{} style, for example) --- whether this
%    makes sense~\ldots
%
% \end{TemplateDescription}
%
%

% \begin{InstanceDescription}[\textbf{justification-setup}xx]
%       {hj}{default}{std}
%
%   \InstanceKey{justification-setup}{default}
%
%   \InstanceKey{linebreak-setup}{default}
%
%   \InstanceKey{hyphenation-setup}{default}
%
%   \InstanceSemantics
%
%    This instance is used when initializing new galleys. It is in
%    fact slightly faster to run |\UseInstance{hj}{default}| compared
%    to three calls to |\UseInstance| for the individual template
%    instances.\footnote{This is because we avoid the overhead of
%    \texttt{\textbackslash UseInstance} (the keys of type \texttt{i}
%    are optimized in this respect.}
%
% \end{InstanceDescription}
%%
%
%
% \section{Some stupid example document}
%
%
%    \begin{macrocode}
%<*sample>
\documentclass{article}

\usepackage{xfmgalley}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DATA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand\sometext
  {This is some text to be used for testing. }
\newcommand\lotoftext
              {A\sometext\sometext\sometext\sometext\sometext\par
               B\sometext\sometext\sometext\sometext\sometext
               \sometext\sometext\sometext\sometext\par
               C\sometext\sometext\sometext
               \sometext\sometext\sometext\sometext\par
               D\sometext\sometext\sometext\sometext}

\begin{document}

\UseInstance{justification}{centerfirst-adjust}
Here\marginpar{Test what happens in a margin par, do we inherit?
               \sometext\sometext}
we try centerfirst-adjust: \sometext \lotoftext

\UseInstance{justification}{default}
\UseInstance{pshape}{ltriangle}
Here we try pshape ltriangle: Note that indentation is still there
since we run with standard justification
now.\marginpar{Test what happens in a margin par, do we inherit?
               \sometext\sometext}
\sometext\sometext\sometext\sometext\sometext\sometext

For special shapes like this and the next it would be better to use a
justification which instance which suppresses the indentation for one
paragraph. A possible implementation would be
\begin{verbatim}
\UseTemplate{justification}{complex}
 {  first-para-justification-setup =
      \UseTemplate{justification}{single}{indent-width=0pt},
    other-para-justification-setup = adjust
 }
\end{verbatim}

\UseTemplate{justification}{complex}
 {  first-para-justification-setup =
      \UseTemplate{justification}{single}{indent-width=0pt},
    other-para-justification-setup = adjust
 }
\UseInstance{pshape}{staggered}
Here we try pshape staggered:
\sometext\sometext\sometext\sometext\sometext\sometext


Pshapes apply only to the next paragraph (at the moment).
\sometext\sometext\sometext\sometext\sometext\sometext

And now for some list rubbish:
\begin{itemize}
  \UseInstance{justification}{raggedright}
\item
  \lotoftext
\item
  \sometext
\item
  \sometext \par
  \UseTemplate{measure}{relative}{leftmargin-width=40pt}\NoValue
  Jump to a new measure: \sometext
\item
  \sometext
  \begin{enumerate}
  \item
    \UseInstance{justification}{raggedleft}
    The use of raggedleft with lists is rather
    obscure\marginpar{Test what happens in a margin par, do we inherit?
               \sometext\sometext}
    \sometext\par
  \item
    \sometext\par
  \item
    \sometext\sometext \par
  \UseTemplate{measure}{relative}{leftmargin-width=-80pt}\NoValue
    Now jump back to some other measure: note that we are still within
    the item of the enumerate. \sometext \par
  \item
    \sometext\sometext
  \end{enumerate}
  \item
    \sometext\sometext\sometext \par
  \item
    \UseInstance{justification}{adjust}
    And this text should be adjusted: \sometext\sometext\sometext \par
\end{itemize}
\lotoftext

\end{document}
%</sample>
%    \end{macrocode}
%
%
%
%
% \StopEventually{}
%
% \section{Implementation}
%
% Set up certain defaults including to ignore white space
% within the body of this package. \LaTeXe{} release needs to be
% recent because of changing some bits of the |\parbox| handling below.
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}

\RequirePackage{xtemplate}
\RequirePackage{xparse}
\RequirePackage{l3stuff}
%    \end{macrocode}
%
%
% \subsection{Using Font Dimensions}
%
% Some helper functions to access information in a tfm file.
% They do not really belong here but right now we don't have a place
% for them.
% \begin{macro}{\gal_fontdimen_use:n}
%    A shorthand:
%    \begin{macrocode}
\cs_new_nopar:Npn \gal_fontdimen_use:n #1{\tex_fontdimen:D #1\tex_font:D}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontslant}
% \begin{macro}{\fontwordspace}
% \begin{macro}{\fontwordspacestretch}
% \begin{macro}{\fontwordspaceshrink}
% \begin{macro}{\fontex}
% \begin{macro}{\fontem}
% \begin{macro}{\fontextraspace}
%    The following commands access dimension of the current font,
%    e.g., |\fontwordspace| gives the width of a space between words
%    in the current font.
%    \begin{macrocode}
\cs_set_nopar:Npn \fontslant             {\gal_fontdimen_use:n 1}
\cs_set_nopar:Npn \fontwordspace         {\gal_fontdimen_use:n 2}
\cs_set_nopar:Npn \fontwordspacestretch  {\gal_fontdimen_use:n 3}
\cs_set_nopar:Npn \fontwordspaceshrink   {\gal_fontdimen_use:n 4}
\cs_set_nopar:Npn \fontex                {\gal_fontdimen_use:n 5}
\cs_set_nopar:Npn \fontem                {\gal_fontdimen_use:n 6}
\cs_set_nopar:Npn \fontextraspace        {\gal_fontdimen_use:n 7}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Support macros for the first layer}
%
%
% Three new names for registers (or primitives) of \LaTeXe{}:
% They have been given mixed-case names to indicate that they are
% available for inspection in templates (though not for setting which
% is done internally by the macros in this module).
%    \begin{macrocode}
\cs_set_eq:NN \GalleyTotalWidth  \hsize
\cs_set_eq:NN \GalleyMarginWidth \@totalleftmargin
\cs_set_eq:NN \GalleyTextWidth   \linewidth
%    \end{macrocode}
%
%
% \subsection{Support macros for the second layer}
%
%
% \subsection{Manipulating the galley measure}
%
% In the current implementation the galley measure, i.e., the width of
% text lines and their indentation from the left are not represented
% by a galley parameter directly. Instead they are internally stored
% as part of the \PARM{parshape} (see discussion above). For
% this reason that parameter can't be (or rather shouldn't be)
% modified directly but only through the commands below and commands
% like |\gal_pshape_set_left:nnn| which know about those dependencies
% and handle the update accordingly.
%
% \noindent
% \DescribeMacro{\gal_measure_set:nn} \marg{left-margin}
%                                 \marg{line-width} \\
% This command make a long-term change to the measure by setting the
% width of
% the line to \meta{line-width} and the width of the left margin to
% \meta{left-margin}. In addition it sets the registers |\GalleyTextWidth|
% and |\GalleyMarginWidth| to these values (for inspection).
%
% \noindent
% \DescribeMacro{\gal_measure_add:nn}
%           \marg{left-margin-increment} \marg{line-width-increment}\\
% This command make a long-term change to the measure by incrementing the
% width of the line with \meta{line-width-increment} and the width
% of the left margin with  \meta{left-margin-increment}. In addition
% it sets the registers |\GalleyTextWidth|
% and |\GalleyMarginWidth| to the resulting values (for inspection).
%
%
%
% \begin{macro}{\gal_measure_set:nn}
%    Dealing with the parshape: the long term modification is
%    essentially setting the measure and to support old \LaTeX{} code
%    also sets |\GalleyTextWidth| and |\GalleyMarginWidth| (but see
%    comments on this somewhere!)
%
%    \begin{macrocode}
\cs_new_nopar:Npn \gal_measure_set:nn #1 #2 {
  \setlength\GalleyMarginWidth{#1}
  \setlength\GalleyTextWidth{#2}
  \tl_set:Nx \l_gal_base_pshape_tl
     {1\space \the\GalleyMarginWidth\space \the\GalleyTextWidth}
  \parshape\l_gal_base_pshape_tl
%<*trace>
  \typeout{\space\space set~ pshape = \l_gal_base_pshape_tl}
%</trace>
%    \end{macrocode}
%    Run the |\@@par| primitive inside a group so that the parshape
%    setting is kept.
%    \begin{macrocode}
  \@setpar{{\@@par}}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gal_measure_add:nn}
%    This is a variant modifies the measure (the name is horrible) by
%    adding to |\GalleyMarginWidth| and |\GalleyTextWidth|. Note that
%    you normally need to subtract from |\GalleyTextWidth| if
%    |\GalleyMarginWidth| is enlarged!
%    \begin{macrocode}
\cs_new_nopar:Npn \gal_measure_add:nn #1 #2 {
  \addtolength\GalleyMarginWidth{#1}
  \addtolength\GalleyTextWidth{#2}
  \tl_set:Nx \l_gal_base_pshape_tl
     {1\space \the\GalleyMarginWidth\space \the\GalleyTextWidth}
  \parshape\l_gal_base_pshape_tl
%<*trace>
  \typeout{\space\space set~ pshape = \l_gal_base_pshape_tl}
%</trace>
  \@setpar{{\@@par}}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_gal_base_pshape_tl}
%    \begin{macrocode}
\tl_set:Nn \l_gal_base_pshape_tl {0}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
%
% \subsection{Support macros for the third layer}
%
%
% \noindent
% \DescribeMacro{\gal_pshape_set_left:nnn}\marg{\# of normal lines}
%   \marg{default width} \marg{delta offset list} \\
% \DescribeMacro{\gal_pshape_set_right:nnn}
% Defines a special parshape (that is it sets the \PARM{parshape}
% taking into account its current setting with respect to the galley
% measure) at the left or the right starting with
% a number of normal lines (first arg) followed by a number of special
% lines which are constructed assuming a hole of a certain width
% (second argument). The number of lines this hole exists vertically is
% defined by the number of delta offsets in the in comma separated
% third argument. The width of each delta is added to the nominal
% width of the hole thus allowing for special corrections on a line by
% line basis.
%

% \begin{macro}{\gal_pshape_set_left:nnn}
% \begin{macro}{\gal_pshape_set_right:nnn}
%    Setting a parshape on the left or the right for the next
%    paragraph, e.g., an initial. Not implemented so far is doing
%    something special on both sides.
%    \begin{macrocode}
\cs_new_nopar:Npn \gal_pshape_set_left:nnn {
%    \end{macrocode}
%    Pick up three arguments implicitly.
%    \begin{macrocode}
  \gal_pshape_set:nnnnnn
    {\dim_use:N \l_gal_parshape_lineindent_dim}
    \GalleyMarginWidth
    \GalleyTextWidth  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_nopar:Npn \gal_pshape_set_right:nnn {
  \gal_pshape_set:nnnnnn
    \GalleyMarginWidth \GalleyMarginWidth \GalleyTextWidth
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
% \begin{macro}{\gal_pshape_set:nnnnnn}
%    The |\gal_pshape_set:nnnnnn| macro provides a low-level interface for
%    declaring special parshapes for the upcoming paragraph. It is
%    especially tuned to deal with the more common cases like
%    providing space for an initial or for an inline figure. It takes
%    six arguments with the following meaning:
%    \begin{itemize}
%    \item If a hole is to be cut on the left of the paragraph the
%    first argument should be |{\the\l_gal_parshape_lineindent_dim}| otherwise
%    |\GalleyMarginWidth| (hole on the right). At the moment there is
%    no provision for special shapes on both sides of the
%    paragraph.\footnote{This is low-level but still more than awkward
%    so probably should be replaced by something nicer one day.}
%    \item
%    The second argument gives the indentation to be used for all
%    lines following the last special line. Typical value would be
%    |\GalleyMarginWidth|, or in case of setting up hanging paragraphs,
%    |\GalleyMarginWidth+<amount of hang>|. More exactly this indentation
%    is assumed to be what is needed if this would have been a normal
%    paragraph. It is therefore also added to the special lines.
%    \item
%    The third argument gives the line width for all lines following
%    the last special line. Typical argument might be |\GalleyTextWidth| or
%    in case of hanging paragraphs
%      |\GalleyTextWidth+<amount of hang>|.\footnote{rewrite
%      description of this and previous item}
%    \item
%    The forth argument gives the number of lines before the first special
%    line (in case of an initial this would be 0 typically).
%    \item
%    The fifth argument gives an initial amount to be left free on all
%    special lines.
%    \item
%    Finally the sixth argument specifies the special lines as a comma
%    separated lists of dimensions. These dimensions are deltas to the
%    space specified in the forth argument.
%    \end{itemize}
%
%    Running this command has several effects:
%    \begin{itemize}
%    \item
%      The |\GAL_ps_| parameter is getting updated, ie it receives the
%      area parshape spec.
%    \item
%      In the command |\parshape@firstlineindent| the indent of the
%      first special line (not taking into account the standard line
%      indentation) is made available for use by an
%      application. This can be used to get to the left point on the
%      line to insert an initial character or a figure.
%    \end{itemize}
%
%    \begin{macrocode}
% #1 either {\the\l_gal_parshape_lineindent_dim} (left hole) or
%    \GalleyMarginWidth (right hole)
% #2 left indent
% #3 line width
% #4 num of normal lines before shape
% #5 base cutout value
% #6 list of shape indention deltas

\cs_new_nopar:Npn \gal_pshape_set:nnnnnn #1 #2 #3 #4 #5 #6{
  \setlength\l_tmpa_dim{#2}
  \setlength\l_tmpb_dim{#3}
  \cs_gset_eq:NN \GAL_ps_ \use_none:n % remove upcoming space below
  \int_zero:N \l_gal_parshape_line_int
  \int_while_do:nNnn \l_gal_parshape_line_int < {#4}
  {
    \cs_gset_nopar:Npx \GAL_ps_{\GAL_ps_\space
                     \dim_use:N \l_tmpa_dim\space \dim_use:N\l_tmpb_dim
    }
    \int_incr:N \l_gal_parshape_line_int
  }
  \clist_map_inline:Nn #6
  {
    \int_incr:N \l_gal_parshape_line_int
    \setlength\l_gal_parshape_lineindent_dim{\l_tmpa_dim+#5+##1}
    \setlength\l_gal_parshape_linewidth_dim
              {\l_tmpa_dim+\l_tmpb_dim-\l_gal_parshape_lineindent_dim}

    \int_compare:nNnT \l_gal_parshape_line_int=\c_one
    {
      \dim_set:Nn \l_tmpc_dim {\l_gal_parshape_lineindent_dim - \l_tmpa_dim}
      \cs_set_nopar:Npx\parshape@firstlineindent{\dim_use:N\l_tmpc_dim}
    }
    \cs_gset_nopar:Npx \GAL_ps_{\GAL_ps_\space
                  #1\space
                  \dim_use:N\l_gal_parshape_linewidth_dim}
  }
  \int_incr:N \l_gal_parshape_line_int
  \cs_gset_nopar:Npx \GAL_ps_{\the\l_gal_parshape_line_int\space
                    \GAL_ps_\space
                    \dim_use:N\l_tmpa_dim\space \dim_use:N\l_tmpb_dim}

  \tl_set:Nx \l_gal_base_pshape_tl{1\space \the\l_tmpa_dim\space \the\l_tmpb_dim}

%<*trace>
  \typeout{\space\space set~ pshape~(current) = \GAL_ps_}
  \typeout{\space\space set~ pshape~(next) = \l_gal_base_pshape_tl}
%</trace>

  \parshape \GAL_ps_

  \@setpar{ {\@@par }
            \parshape\l_gal_base_pshape_tl
          }
}
%    \end{macrocode}
% \end{macro}
%
%
%
%    \begin{macrocode}
\int_new:N \l_gal_parshape_line_int
\dim_new:N \l_gal_parshape_lineindent_dim
\dim_new:N \l_gal_parshape_linewidth_dim
%    \end{macrocode}
%
%
%
%
%
%
%
%
% \subsection{Support macros for the forth layer}
%
%
%
%    \begin{macrocode}
\skip_new:N \l_start_skip
\skip_new:N \l_linefill_skip
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_eq:NN \@@everypar\everypar
\newtoks\everypar
%    \end{macrocode}
%
%    \begin{macrocode}
\@@everypar{
  \gal_handle_parindent:
  \the\everypar
%<*trace>
  \gal_show_justification_parms:n {used}
%</trace>
  \hskip\l_start_skip\scan_stop:}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_nopar:Npn \gal_remove_parindent: {
   {\setbox\c_zero\lastbox}\null
   \cs_gset_eq:NN \gal_handle_parindent: \scan_stop:
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_eq:NN \gal_handle_parindent:\scan_stop:
%%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_nopar:Npn \gal_remove_next_parindent:{
   \cs_gset_eq:NN  \gal_handle_parindent: \gal_remove_parindent:
}
%    \end{macrocode}
%
%    \begin{macrocode}
%<*trace>
\cs_set_nopar:Npn \gal_show_justification_parms:n #1 {
  \message{Para~values~ #1~ \on@line :^^J}
  \message{\space\space \l_start_skip=\the\l_start_skip^^J}
  \message{\space\space \leftskip=\the\leftskip^^J}
  \message{\space\space \rightskip=\the\rightskip^^J}
  \message{\space\space \parfillskip=\the\parfillskip^^J}
  \message{\space\space \spaceskip=\the\spaceskip^^J}
  \message{\space\space \xspaceskip=\the\xspaceskip^^J}
  \message{\space\space \parindent=\the\parindent^^J}
  \message{\space\space \parshape=\the\parshape
                        \space(\l_gal_base_pshape_tl)^^J}
}
%</trace>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\cs_set_nopar:Npn \@parboxrestore{
  \@arrayparboxrestore\cs_set_eq:NN \\\@normalcr
  \UseInstance{justification}{default}
}
%    \end{macrocode}
%
%
%
%
%
%
% \subsection{Templates for the second layer}
%
% \subsubsection{The template type `measure'}
%
%    The `measure' type takes one argument (left margin or
%    |\NoValue|), see discussion above.
%    \begin{macrocode}
\DeclareObjectType{measure}{1}
%    \end{macrocode}
%
%
%
%
%
%
%
% \begin{macro}{measure/absolute (template)}
%    \begin{macrocode}
\DeclareTemplateInterface{measure}{absolute}{1}{
  leftmargin-width  : skip ,
  rightmargin-width : skip ,
 }

\DeclareTemplateCode{measure}{absolute}{1}{
  leftmargin-width  = \leftmargin,
  rightmargin-width = \rightmargin,
 }{
  \AssignTemplateKeys
%    \end{macrocode}
%
%    User provided left margin is always relative to current
%    indentation even if template does provide absolute values.
%    \begin{macrocode}
  \IfNoValueF{#1} { \setlength\leftmargin{ #1 + \GalleyMarginWidth } }
  \gal_measure_set:nn \leftmargin
                     {\GalleyTotalWidth -\leftmargin -\rightmargin }
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{measure/relative (template)}
%    \begin{macrocode}
\DeclareTemplateInterface{measure}{relative}{1}{
  leftmargin-width  : skip ,
  rightmargin-width : skip ,
 }

\DeclareTemplateCode{measure}{relative}{1}{
  leftmargin-width  = \leftmargin,
  rightmargin-width = \rightmargin,
 }{
  \AssignTemplateKeys
  \IfNoValueF{#1} { \setlength\leftmargin{#1} }
  \gal_measure_add:nn \leftmargin { -\leftmargin -\rightmargin }
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \subsection{Templates for the third layer}
%
% \subsubsection{The template type `pshape'}
%
% The template type `pshape' right now is mostly an interface to
% \TeX's |\parshape| primitive. This is probably going to be extended.
%
%    \begin{macrocode}
\DeclareObjectType{pshape}{0}
%    \end{macrocode}
%
%
%
%
% \begin{macro}{pshape/cutout (template)}
%    \begin{macrocode}
\DeclareTemplateInterface{pshape}{cutout}{0}{
  no-pagebreak-boolean  : choice {true, false} ,
  left-side-boolean     : choice {true, false} ,
  normal-lines-int      : integer ,
  parshape-list         : commalist ,
 }


\int_new:N   \l_gal_pshape_normallines_int
\clist_new:N \l_gal_pshape_clist

\DeclareTemplateCode{pshape}{cutout}{0}{
  no-pagebreak-boolean  = {
     true = ,
     false = ,            % not supported right now
  },
  left-side-boolean     = {
     true =  ,
     false= \cs_set_eq:NN \gal_pshape_set_oneside:nnn
                          \gal_pshape_set_right:nnn
  },
  normal-lines-int      = \l_gal_pshape_normallines_int,
  parshape-list         = \l_gal_pshape_clist,
 }{
  \int_zero:N \l_gal_pshape_normallines_int
  \cs_set_eq:NN \gal_pshape_set_oneside:nnn \gal_pshape_set_left:nnn
  \AssignTemplateKeys
  \gal_pshape_set_oneside:nnn
    \l_gal_pshape_normallines_int
    \c_zero_dim
    \l_gal_pshape_clist
 }
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \subsubsection{Instances of type `pshape'}
%
%    \begin{macrocode}
\DeclareInstance{pshape}{staggered}{cutout}{
   no-pagebreak-boolean = true,
   normal-lines-int  = 1,
   parshape-list = { 20pt, 40pt, 60pt },
}
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\DeclareInstance{pshape}{ltriangle}{cutout}{
   no-pagebreak-boolean = true,
   normal-lines-int  = 0,
   parshape-list = { 60pt, 40pt, 20pt },
}
%    \end{macrocode}
%
%
%
% The next instance provides a ``noop'' or ``regular'' pshape instance,
% i.e., one
% that can be applied when a template requests to set up a pshape but
% the standard rectangular is desired (of course using the
% cutout template for this task is very very inefficient so at some
% point this should be done differently).
%
%    \begin{macrocode}
\DeclareInstance{pshape}{rectangle}{cutout}{
   no-pagebreak-boolean = false,
   normal-lines-int  = 0,
   parshape-list = { },
}
%    \end{macrocode}
%
%
%
%
%
%
% \subsection{Templates for the forth layer}
%
% \subsubsection{The template type `justification'}
%
%    How we justify the text within the measure:
%    \begin{macrocode}
\DeclareObjectType{justification}{0}
%    \end{macrocode}
%
%    Not having the machinery of \texttt{galley2} this implementation
%    is rather sketchy, but hopefully works (or is fixable).
%
%
% \begin{macro}{justification/std (template)}
%    \begin{macrocode}
\DeclareTemplateInterface{justification}{std}{0}{
  start-skip      : skip ,
  left-skip       : skip ,
  right-skip      : skip ,
  fill-skip       : skip ,
  space-skip      : skip ,
  xspace-skip     : skip ,
  linefill-skip   : skip ,
  indent-width    : length ,
 }
\DeclareTemplateCode{justification}{std}{0}{
  start-skip      =  \l_start_skip ,
  left-skip       =  \leftskip ,
  right-skip      =  \rightskip ,
  fill-skip       =  \parfillskip ,
  space-skip      =  \spaceskip ,
  xspace-skip     =  \xspaceskip ,
  linefill-skip   =  \l_linefill_skip ,
  indent-width    =  \parindent ,
 }{
  \parindent\document@parindent\scan_stop:
  \AssignTemplateKeys
  \@rightskip\rightskip
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\xdef\document@parindent{\the\parindent}
\AtBeginDocument{\xdef\document@parindent{\the\parindent}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{justification/single (template)}
%    This is the template which is most likely incorrect, I'm not at
%    all sure that I got the various save and restore mechanisms for
%    |\par| and |\everypar| of good old \LaTeX{} work properly
%    together. Time will tell.
%    \begin{macrocode}
\DeclareTemplateInterface{justification}{single}{0}{
  start-skip      : skip ,
  left-skip       : skip ,
  right-skip      : skip ,
  fill-skip       : skip ,
  space-skip      : skip ,
  xspace-skip     : skip ,
  linefill-skip   : skip ,
  indent-width    : length ,
 }

\DeclareTemplateCode{justification}{single}{0}{
  start-skip      =  \l_start_skip ,
  left-skip       =  \leftskip ,
  right-skip      =  \rightskip ,
  fill-skip       =  \parfillskip ,
  space-skip      =  \spaceskip ,
  xspace-skip     =  \xspaceskip ,
  linefill-skip   =  \l_linefill_skip ,
  indent-width    =  \parindent ,
 }{
%    \end{macrocode}
%    Since we are supposed to change the para values only for a single
%    paragraph we need to save the current value (ad hoc) in some safe
%    place.
%    \begin{macrocode}
  \tl_set:Nx \l_saved_startskip_tl    {\skip_use:N \l_start_skip}
  \tl_set:Nx \l_saved_leftskip_tl     {\skip_use:N \leftskip}
  \tl_set:Nx \l_saved_rightskip_tl    {\skip_use:N \rightskip}
  \tl_set:Nx \l_saved_parfillskip_tl  {\skip_use:N \parfillskip}
  \tl_set:Nx \l_saved_spaceskip_tl    {\skip_use:N \spaceskip}
  \tl_set:Nx \l_saved_xspaceskip_tl   {\skip_use:N \xspaceskip}
  \tl_set:Nx \l_saved_linefillskip_tl {\skip_use:N \l_linefill_skip}
  \tl_set:Nx \l_saved_parindent_tl    {\dim_use:N \parindent}
%    \end{macrocode}
%    Now we can assign the new values.
%    Actually this isn't too hot doing it this way since this means
%    that you better ensure that the template is only executed between
%    paragraphs (or else it has some effects on the previous one but
%    not quite all the effect it should have, \texttt{galley2} is
%    definitely doing better here), anyway \ldots
%    \begin{macrocode}
  \AssignTemplateKeys
  \@rightskip\rightskip
%    \end{macrocode}
%
%    Now how do we restore? Looking at this now makes me wonder why i
%    wrote it using |\everypar|, but it is too late at night to really
%    think hard about it,\marginpar{RETHINK} --- let's leave a bit
%    like this.
%
%    \begin{macrocode}
  \everypar\expandafter{
    \the\everypar
    \cs_set_nopar:Npn \par{\relax
      \mode_if_horizontal:TF
      {
%    \end{macrocode}
%    Run current ``longterm par'' if we got a real paragraph end\ldots
%    \begin{macrocode}
        \@par
%    \end{macrocode}
%    \ldots then restore back to it\ldots
%    \begin{macrocode}
        \@restorepar
%    \end{macrocode}
%    \ldots then restore parameters\ldots
%    \begin{macrocode}
        \skip_set:Nn \l_start_skip    \l_saved_startskip_tl
        \skip_set:Nn \leftskip        \l_saved_leftskip_tl
        \skip_set:Nn \rightskip       \l_saved_rightskip_tl
        \skip_set:Nn \parfillskip     \l_saved_parfillskip_tl
        \skip_set:Nn \spaceskip       \l_saved_spaceskip_tl
        \skip_set:Nn \xspaceskip      \l_saved_xspaceskip_tl
        \skip_set:Nn \l_linefill_skip \l_saved_linefillskip_tl
        \dim_set:Nn  \parindent       \l_saved_parindent_tl
%<*trace>
        \gal_show_justification_parms:n {restored~ again}
%</trace>
      }
      {
%<*trace>
        \message{Par~command~ in~ outside~ hmode!^^J}
%</trace>
      }
    }
%    \end{macrocode}
%    \ldots then clear |\everypar| --- though this might be incorrect
%    --- again --- this is difficult to get right, given the
%    \LaTeX{} interfaces available are just not being made for this.
%
%    perhaps all this dies the moment it is used together with general
%    \LaTeX{} lists, I'm not trying that tonight.
%    \begin{macrocode}
    \everypar{}%  perhaps?
  }
 }
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \begin{macro}{justification/complex (template)}
%    \begin{macrocode}
\DeclareTemplateInterface{justification}{complex}{0}{
  first-para-justification-setup : instance {justification} ,

  other-para-justification-setup : instance {justification} ,
 }

\cs_new:Npn \justification_first {}
\cs_new:Npn \justification_other {}

\DeclareTemplateCode{justification}{complex}{0}{
  first-para-justification-setup = \justification_first,
  other-para-justification-setup = \justification_other,
 }
 {
  \AssignTemplateKeys
% long term changes first!
  \justification_other
  \justification_first
 }
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsubsection{Instances of type `justification'}
%
%
% And some instances for testing \ldots
%    \begin{macrocode}
\DeclareInstance{justification}{adjust}{std}
   {right-skip  =0pt,
    left-skip   =0pt,
    start-skip  =0pt,
    fill-skip   =\fill
%
   ,space-skip  = 0pt,
    xspace-skip = 0pt,
}
%    \end{macrocode}
%
%
%
% Another name for the above:
%    \begin{macrocode}
\DeclareInstance{justification}{default}{std}
   {right-skip  =0pt,
    left-skip   =0pt,
    start-skip  =0pt,
    fill-skip   =\fill,
%
    space-skip  = 0pt,
    xspace-skip = 0pt,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{adjust2}{std}
   {indent-width= 0pt,
    right-skip  = 0pt,
    left-skip   = 0pt,
    start-skip  = 0pt,
    fill-skip   = 20pt plus 1fil
%
   ,space-skip  = 0pt,
    xspace-skip = 0pt,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{center}{std}
   {indent-width=0pt,
    right-skip  =\fill,
    left-skip   =\fill,
    start-skip  =0pt,
    fill-skip=0pt
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{centermiddle}{std}
   {indent-width=0pt,
    right-skip  =36pt plus 1fill,
    left-skip   =36pt plus 1fill,
    start-skip  =-36pt plus -1fill,
    fill-skip   =-36pt plus -1fill,
    linefill-skip= 0pt,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{raggedright}{std}
   {right-skip  = 0pt plus 2em,
    left-skip   = 0pt,
    start-skip  = 0pt,
    fill-skip   = \fill,
    space-skip  = \fontwordspace,
    xspace-skip = \fontwordspace + \fontextraspace,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{flushleft}{std}
   {indent-width=0pt,
    right-skip  =\fill,
    left-skip   =0pt,
    start-skip  =0pt,
    fill-skip   =\fill,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{raggedleft}{std}
   {left-skip   = 0pt plus 2em,
    right-skip  = 0pt,
    start-skip  = 0pt,
    fill-skip   = 0pt,
    space-skip  = \fontwordspace,
    xspace-skip = \fontwordspace + \fontextraspace,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{flushright}{std}
   {left-skip  = \fill,
    right-skip = 0pt,
    start-skip = 0pt,
    fill-skip  = 0pt,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
% this does now work:
\DeclareInstance{justification}{centerfirst}{single}
   {indent-width = 0pt,
    right-skip   = \fill,
    left-skip    = -\fill,
    fill-skip    = 0pt,
    start-skip   = 0pt plus 2fill,
    linefill-skip= 0pt,
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{justification}{centerfirst-adjust}{complex}
 {  first-para-justification-setup = centerfirst,
    other-para-justification-setup = adjust
 }
%    \end{macrocode}
%


%
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \endinput
\endinput
