% \iffalse
%% File xfootnote.dtx
%%  (C) Copyright 1999 Frank Mittelbach
%%  (C) Copyright 2008 Frank Mittelbach, LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``xfootnote bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/cgi-bin/cvsweb.cgi/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver|package>
\RequirePackage{expl3}
%</driver|package>
%\fi
\GetIdInfo$Id$
          {Experimental footnote layouts}
%\iffalse
%<*driver>
%\fi
\ProvidesFile{\filename.\filenameext}
  [\filedate\space v\fileversion\space\filedescription]
%\iffalse
 \documentclass{l3doc}
 \usepackage{textcomp}

% \usepackage{xparse,xlists,xlists-samples}
% \usepackage{ldcdoc}

% next three definitions are big hacks to run the file
% without the above packages
%
\newcommand\NoValue{\texttt{\textbackslash NoValue}}
\begin{document}
\DocInput{xfootnote.dtx}
\end{document}
%</driver>
% \fi
%
%
% \GetFileInfo{xfootnote.dtx}
%
% \title{The \textsf{xfootnote} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{FMi}
% \date{\filedate}
%
%  \maketitle
%
% \tableofcontents
%
% \begin{abstract}
%   This is the first attempt on setting up templates for (foot)note
%   handling. It uses template names like `notemark' and `notetext'
%   with the intention of supporting not only footnotes but at a later
%   stage endnotes and perhaps special notes lie footnotes placed into
%   the margin.
%
%   It does necessarily need to interface to a pagesetup
%   handling. Right now this is only provided to support what it
%   available in the implemented cases and needs a complete redesign
%   later on --- thus that part should definitely not be taken
%   seriously.
%
%   Similarly the `notearea' concept is probably not really
%   appropriate and might vanish once there is a better interface to
%   pagesetup (or somebody has a good idea how to handle this
%   differently).
%
%   The code heavily borrows from various sources, e.g., the \LaTeXe{}
%   kernel, Robin's \texttt{footmisc} package and perhaps other places
%   i've forgotten. Still far more borrowing is needed, in particular
%   \begin{itemize}
%   \item support for page-numbered notes
%   \item support for layouts like \texttt{ftnright}
%   \item \ldots
%   \end{itemize}
% \end{abstract}
%
% \section{Interfaces}
%
% \begin{TemplateInterfaceDescription}{notemark}
%
%   \TemplateArgument{1}
%       {Boolean valued. True signals that this mark is immediately followed
%        by another mark and both marks should be typographically combined.}
%
%   \TemplateArgument{2}
%       {Number to generate the mark from or \NoValue{} in which case
%       the mark is generated from the value of an internal counter
%       (this counter is first incremented)}
%
%   \TemplateSemantics
%
%   The first argument is used to signal that several marks appear in
%   succession and should be typographically combined, e.g., by
%   separating them with a comma.
%
%   The second argument is normally \NoValue{} in which case the
%   correct mark is generated by the template. The counter to use for
%   this case is specified in the template attributes. Note that it is
%   the task of the template in increment this counter prior to using
%   it. The corresponding `notetext' template uses the counter value
%   without any modification.
%
%   The name of the internal counter must be settable in every
%   template instance, the suggested key name is `counter-id'.
%
%   If the second argument is a number it is locally assigned to the
%   internal counter and the mark is generated by using this value.
%   Unfortunately the current implementation does not allow to provide
%   such number indirectly, e.g., via a |\label| |\ref| mechanism.  A
%   feature like this could be handy especially in texts where several
%   marks are supposed to refer to the same note
%   text.\footnote{Provide?}
%
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateDescription}{notemark}{std}
%
%   \TemplateKey{counter-id}{n}
%      {Name of \LaTeX{} counter to use for mark generation}
%      {footnote}
%
%   \TemplateKey{mark-format}{f1}
%      {Function that formats the generated mark}
%      {make superscript}
%
%   \TemplateKey{multi-mark-sep}{f0}
%      {Function that provides any necessary separation between two
%       successive marks}
%      {comma with negative kern (1pt) before}
%
%   \TemplateSemantics
%   I think that this is essentially all that is needed to produce all
%   common and not so common layouts for marks. Perhaps one might want
%   to add a few bells and whistles to the `mark-format' (like a
%   `mark-font') to be more consistent with other templates but for
%   now i don't see anything that is really needed.
%
% \end{TemplateDescription}
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{notetext}
%
%   \TemplateArgument{1}
%       {Number to generate the mark in front of the text or
%       \NoValue{} in which case
%       the mark is generated from the current value of an internal
%       counter (this counter is not modified)}
%
%   \TemplateArgument{2}
%       {The text of the note}
%
%   \TemplateSemantics
%   The usage of the first argument corresponds to the second argument
%   of the `notemark' type with the exception that the internal
%   counter is not modified but only used.
%
%   The name of the internal counter must be settable in every
%   template instance, the suggested key name is `counter-id'.
%
%   The second argument is allowed to consist of multiple paragraphs.
%
%   A template of type `notetext' typesets the note text and the mark
%   into `note area' for deferred placement in the document, e.g., on
%   the bottom of the page or at the end of the chapter, etc.
%
%   The reference to this `note area' must be settable by every
%   template; the
%   suggested  key name is `area-id'.
%
%   The retrieval from that `note area' is done by a `notearea'
%   template instance.\footnote{If external storage, i.e., files are
%   used, as typically in the case of endnote typesetting, it should
%   be considered to use a different template type for retrieval and
%   it should also be considered to use a different mechanism to
%   specify this area (i.e., not the direct reference to a set of
%   insertion registers.}
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateDescription}{notetext}{std}
%
%   \TemplateKey{area-id}{n}
%      {Name of the area to place notes into (an insertion register)}
%      {footins}
%
%   \TemplateKey{counter-id}{n}
%      {Name of \LaTeX{} counter to use for mark generation}
%      {footnote}
%
%   \TemplateKey{mark-format}{f1}
%      {Function that formats the mark}
%      {make superscript}
%
%   \TemplateKey{headed-para-setup}{i headedpara}
%      {Instance that defines relationship between a paragraph text
%      and its `heading' (which is the formatted mark in this case)}
%      {}
%
%   \TemplateSemantics
%
%   Formats the note text as a paragraph (or several) with the note
%   marker done as a `heading' to the first paragraph. This allows for
%   most if not all formats that treat such text as individual
%   paragraphs.
%
%   The `area-id' should match the one used in the corresponding
%   instance of the `notearea template.
%
%   The `counter-id' should match the one used in the corresponding
%   instance of the `notemark' template.
%
%   The `mark-format' key is independent of the corresponding key in
%   the `note-mark' template since it is quite common to format the
%   marks differently in main text and in the note text.
%
%   This template does miss a lot of necessary keys such as the h\&j
%   setup for the paragraph text, font setup, and, and, and. Most of
%   this is currently hardwired. --- New implementation needed.
%
% \end{TemplateDescription}
%
%
%
%
% \begin{TemplateDescription}{notetext}{para}
%
%   \TemplateKey{area-id}{n}
%      {Name of the area to place notes into (an insertion register)}
%      {footins}
%
%   \TemplateKey{counter-id}{n}
%      {Name of \LaTeX{} counter to use for mark generation}
%      {footnote}
%
%   \TemplateKey{mark-format}{f1}
%      {Function that formats the mark}
%      {make superscript}
%
%   \TemplateKey{mark-sep}{l}
%      {Separation between formatted mark and note text}
%      {}
%
%   \TemplateKey{para-action}{f0}
%      {What to do if note text contains \texttt{\textbackslash par}
%       commands}
%      {a paragraph sign separated by word space}
%
%   \TemplateSemantics
%
%   Prepares for formatting all notes in the note area as a single
%   paragraph. The formatting is actually split between this template
%   and the `notearea' template with the same name, i.e., those two
%   need to be selected together.
%
%   A design with running notes is suitable for documents with many
%   and typically short notes. It is badly suited to handle
%   multi-paragraphed notes. For this reason the template provides an
%   action key to specify what should happen if a |\par| command is
%   encountered in the note text. Technically starting a new paragraph
%   would difficult (if not impossible) and anyway is not a suitable
%   solution for that particular design. So the alternatives are,
%   signalling an error\footnote{Perhaps this should be the default!}
%   or signalling the start of a new paragraph by other typographical
%   means such as a paragraph sign or a bullet.
%
%   The `area-id' should match the one used in the corresponding
%   instance of the `notearea template.
%
%   The `counter-id' should match the one used in the corresponding
%   instance of the `notemark' template.
%
%   The `mark-format' key is independent of the corresponding key in
%   the `note-mark' template since it is quite common to format the
%   marks differently in main text and in the note text.
%
% \end{TemplateDescription}
%
%
%
%
%
% \begin{TemplateInterfaceDescription}{notearea}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%
%   Formats the contents of the `note area' by attaching things like a
%   rule, setting the overall color, etc. The typesetting of the
%   individual notes has happened earlier via the `notetext' template;
%   however it is permissible that the formatting is shared between
%   that template and templates of the current type (this may be
%   needed if the formatting depends on having all notes available,
%   e.g., in the case of templates that format all notes into a single
%   paragraph).
%
%   The reference to this `note area' must be settable by every
%   template; the suggested key name is `area-id'.
%
% \end{TemplateInterfaceDescription}
%
%
% \begin{TemplateDescription}{notearea}{std}
%
%   \TemplateKey{area-id}{n}
%      {Name of the area to retrieve notes from (an insertion register)}
%      {footins}
%
%   \TemplateKey{color-action}{f0}
%      {In what color do we set these notes?}
%      {\texttt{\textbackslash normalcolor}}
%
%   \TemplateSemantics
%    Typeset the collected notes. It misses several keys that needs to
%    be added at some point. For example, the footnote rule would be
%    an obvious candidate, except that i couldn't make up my mind how
%    to code this yet.
% \end{TemplateDescription}
%
%
%
%
% \begin{TemplateDescription}{notearea}{para}
%
%   \TemplateKey{area-id}{n}
%      {Name of the area to retrieve notes from (an insertion register)}
%      {footins}
%
%   \TemplateKey{color-action}{f0}
%      {In what color do we set these notes?}
%      {\texttt{\textbackslash normalcolor}}
%
%   \TemplateSemantics
%    Typeset the collected notes in case we are dealing with notes
%    collected as a single paragraph. See comments in the next
%    section.
%
% \end{TemplateDescription}
%
%
%
% \section{Dependencies}
%
% The templates provided by this package are closely related, thus
% choosing one to build an instance may have some influence on
% remaining choices for other templates.
% These dependencies are as follows:
% \begin{itemize}
% \item
%   The internal counter specified by a `notemark' instance should be
%   the same as the one specified by the corresponding `notetext'
%   instance. Of course, if a document class provides more than one
%   type of notes, e.g., footnotes as well as endnotes, then the
%   instances for the different type of notes will typically
%   \emph{not} share a counter name.
% \item
%   The `note area' filled by the `notetext' template has to be the
%   same as the one retrieved by the `notearea' template for
%   corresponding notes.
% \item
%   Furthermore in some cases selecting a `notetext' template requires
%   the selection of a particular `notearea' template as the
%   formatting of the notes is actually split across the two templates.
% \item
%   The name of the `note area' refers to an insertion register which
%   at the current moment has to be provided externally, i.e., via
%   |\newinsert|. Some of the values for this insertion register,
%   e.g., the |\skip| part have to be externally set as well --- this
%   should change!
% \item
%   \ldots
% \end{itemize}
%
%
% \section{Interfaces that should go in other modules}
%
%
% \begin{TemplateInterfaceDescription}{pagesetup}
%
%   \TemplateArgument{none}
%       {---}
%
%   \TemplateSemantics
%   This template type sets up the characteristics of a page. It
%   defines the various text areas their relation to each other, as
%   well as other information that is relevant for page makeup. What
%   in the end is required to be set by this template remains to be
%   seen.
%
%   As of today the only thing this template actually does is handling
%   footnote-related issues. It does most certainly need a completely
%   different implementation which --- once ready --- will certainly
%   have some influence on the way the note templates are defined.
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateDescription}{pagesetup}{std}
%
%   \TemplateKey{footnote-below-floats-boolean}{s}
%      {Should footnotes be placed above or below bottom floats?}
%      {false}
%
%   \TemplateKey{footnote-bottom-boolean}{s}
%      {Should footnotes appear at the bottom of page even if page
%      isn't full? (false means place footnotes directly below text)}
%      {false}
%
%   \TemplateKey{footnote-area-setup}{i notearea}
%      {Instance that defines how the footnote area is laid out}
%      {}
%
%   \TemplateKey{footnote-mark-setup}{i notemark}
%      {Instance that defines how the footnote marks in text are
%      formatted}
%      {}
%
%   \TemplateKey{footnote-text-setup}{i notetext}
%      {Instance that defines how the footnote text is formatted}
%      {}
%
%   \TemplateSemantics
%   As far as footnote-handling is concerned (and that is all what the
%   template currently does) it provides a footnote area below the
%   main text area, i.e., same thing as current \LaTeXe.
%
% \end{TemplateDescription}
%
%
%
% \begin{TemplateInterfaceDescription}{headedpara}
%
%   \TemplateArgument{1}
%       {Lemma}
%
%   \TemplateArgument{2}
%       {Remaining text of paragraph}
%
%   \TemplateSemantics
%    Formats `Lemma' and `Remaining text' as a single paragraph with
%    some special handling for `Lemma; (e.g., some special font, or
%    other embellishment). It should be considered if such a template
%    would better take three arguments as often the `Lemma' has a
%    structure like `Number' + `Heading'.
%
% \end{TemplateInterfaceDescription}
%
%
%
% \begin{TemplateDescription}{headedpara}{std}
%
%   \TemplateKey{indent-boolean}{s}
%      {Do we suppress the indentation of this special paragraph?}
%      {false}
%
%   \TemplateKey{title-format}{f1}
%      {Formatting of the title}
%      {identity}
%
%   \TemplateKey{title-sep}{l}
%      {Separation between title and following text}
%      {}
%
%   \TemplateSemantics
%    This is a very simple template; it doesn't even define how to set
%    the h\&j of the paragraph. I've ignored that part deliberately
%    until after we have the galley mechanism available which allows
%    to specify those issues with more ease.
%
% \end{TemplateDescription}
%
%
%
% \section{Open problems}
%
% \begin{itemize}
% \item The handling of the notearea is rather bad. First of all there
%   is no decent setup possibility yet for the insertion register
%   values, e.g., the |\skip| but also others.
% \item There is no natural way yet to integrate endnotes into this
%   concept (other than nevertheless setting up an insertion register
%   for them).
% \item All that and a few other things i've forgotten at the moment
%   suggest that this need some changes in the design!
% \item Most of the above templates could do with some further
%   generalisation.
% \item
%   Templates for endnotes need to written
% \item
%   Other interesting page setup templates should be provided, e.g.,
%   integration of the \texttt{ftnright} package, footnotes placed in
%   the margin, etc.
% \item
%   None of the templates set up the paragraph handling via
%   \texttt{hj} templates (hyphenation \& justification) which they
%   eventually will, because the h\&j templates make use of the new
%   galley mechanism which is not finished.
% \end{itemize}
%
%
%
% \section{Document Syntax}
%
% The document interface, i.e., the actual user commands do not really
% belong in this file, but for testing purposes they are included for
% the moment.
%
%
% \section{Implementation}
%
% Set up certain defaults including to ignore white space
% within the body of this package.
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\filename}{\filedate}{\fileversion}{\filedescription}
%    \end{macrocode}
% The \texttt{color} package is only there for some of the test
% instances and will vanish in the future from this package.
%    \begin{macrocode}
\RequirePackage{color}

\RequirePackage{xparse}
\RequirePackage{template}

\IgnoreWhiteSpace
%    \end{macrocode}
%
%
%
%
% \subsection{Document Interface}
%
% The document interface doesn't belong to this package either but at
% the moment it is convenient to keep everything in one place.
%    \begin{macrocode}
\DeclareDocumentCommand \footnotemark { s o }
 {
%    \end{macrocode}
%    Instead of using |\UseInstance| I apply a command which is set
%    in the pagesetup template. Thus this depends heavily on the final
%    implementation of the pagesetup stuff.
%    \begin{macrocode}
%  \UseInstance{notemark}{footnote} {#1} {#2}
   \footnote@mark {#1} {#2}
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \footnotetext { o +m }
 {
%  \UseInstance{notetext}{footnote} {#1} {#2}
   \footnote@text {#1} {#2}
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareDocumentCommand \footnote { s o +m }
 {
%  \UseInstance{notemark}{footnote} {#1} {#2}
%  \UseInstance{notetext}{footnote} {#2} {#3}
   \footnote@mark {#1} {#2}
   \footnote@text {#2} {#3}
 }
%    \end{macrocode}
%
%
%
% \subsection{Templates}
%
% \subsubsection{The Template std (type notemark)}
%
%    \begin{macrocode}
\DeclareTemplateType{notemark}{2}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplate{notemark}{std}{2}
 {
   counter-id  =n  [footnote] \note@counter,
   mark-format =f1 [\textsuperscript{\normalfont #1}] \note@mark@format,
   multi-mark-sep =f0 [\textsuperscript{\kern-1pt,}]  \note@multi@mark@sep,
 }
 {
  \DoParameterAssignments

  \begingroup
    \IfNoValueTF{#2}
       { \stepcounter \note@counter }
       { \SetInternalCounter{\value \note@counter}{#2} }
    \unrestored@protected@xdef \note@numrep
         {\csname the\note@counter \endcsname}
  \endgroup

  \leavevmode
  \ifhmode                           % we might be in math
     \edef\@x@sf{\the\spacefactor}
     \nobreak
  \fi

  \note@mark@format \note@numrep

  \IfBooleanT{#1}{ \note@multi@mark@sep }

  \ifhmode
     \spacefactor\@x@sf\relax
  \fi
 }
%    \end{macrocode}
%
%
% \subsubsection{The Template std (type notetext)}
%
%    \begin{macrocode}
\DeclareTemplateType{notetext}{2}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplate{notetext}{std}{2}
 {
   counter-id  =n  [footnote] \note@counter,
   area-id     =n  [footins]  \note@area,
   mark-format =f1 [\textsuperscript{\normalfont #1}]
                   \note@mark@format,
   headed-para-setup =i {headedpara} \note@headed@text,
 }
 {
  \DoParameterAssignments

  \begingroup
    \IfNoValueF{#1}
       { \SetInternalCounter{\value \note@counter}{#1} }
    \unrestored@protected@xdef \note@numrep
         {\csname the\note@counter \endcsname}
  \endgroup

  \insert\csname \note@area\endcsname
    {
% next bits need generalizations:
     \reset@font\footnotesize
     \interlinepenalty\interfootnotelinepenalty
     \splittopskip\footnotesep
     \splitmaxdepth \dp\strutbox \floatingpenalty \@MM
     \hsize\columnwidth \@parboxrestore
     \protected@edef\@currentlabel{
       \csname p@footnote\endcsname\note@numrep  }
     \note@headed@text
       {\note@mark@format \note@numrep \rule\z@\footnotesep}
       {#2\@finalstrut\strutbox}
    }
 }
%    \end{macrocode}
%
%
% \subsubsection{The Template para (type notetext)}
%
% Most of the code for this template is directly copied from the
% \texttt{footmisc} package by Robin.
%
%    \begin{macrocode}
\DeclareTemplate{notetext}{para}{2}
 {
   counter-id  =n  \note@counter,
   area-id     =n  [footins]  \note@area,
   mark-format =f1 [\textsuperscript{\normalfont #1}]
                   \note@mark@format,
   mark-sep    =L  \note@mark@sep,
   para-action =f0 [\ \P\nobreakspace] \note@para@action,
 }
 {
  \DoParameterAssignments

  \begingroup
    \IfNoValueF{#1}
       { \SetInternalCounter{\value \note@counter}{#1} }
    \unrestored@protected@xdef \note@numrep
         {\csname the\note@counter \endcsname}
  \endgroup

    \insert\csname \note@area\endcsname {%
        \reset@font\footnotesize
        \interlinepenalty\interfootnotelinepenalty
        \splittopskip\footnotesep
        \splitmaxdepth \dp\strutbox
        \floatingpenalty\@MM
        \hsize\columnwidth
        \@parboxrestore
        \protected@edef\@currentlabel{%
          \csname p@footnote\endcsname\note@numrep
        }%
%    \end{macrocode}
% We set the paragraph in an \cs{hbox} and apply the fudge factor
% here:
%
%    \begin{macrocode}
          \setbox\FN@tempboxa=\hbox{%
%    \end{macrocode}
%
%    Multiple paragraphs in an |\hbox| are not really possible. So we
%    have to do something if we encounter one.
%    \begin{macrocode}
          \let\par\note@para@action
          \let\endgraf\note@para@action  % this too?
%    \end{macrocode}
% This needs a parameter; the rule should be moved to the beginning of
% the footnote paragraph, but the \cs{ignorespaces} should be left
% here.
%
%    \begin{macrocode}
             \note@mark@format \note@numrep
             \nobreak \hskip \note@mark@sep \relax
             \ignorespaces #2 \strut
%    \end{macrocode}
%
% We insert a penalty\footnote{Well, a negative penalty~--- perhaps,
% more of an encouragement\dots} here to help line breaking in the
% footnote paragraph; the value is taken from the \TeX{}book.
%
%    \begin{macrocode}
            \penalty-10\relax
            \hskip\footglue
        }% end of \hbox
        \dp\FN@tempboxa=0pt\ht\FN@tempboxa=\fudgefactor\wd\FN@tempboxa
        \box\FN@tempboxa
      }%
   }
%    \end{macrocode}
%
%
% \subsubsection{The Template std (type pagesetup)}
%
% Next is a first stab at handling page setup (which includes
% footnotes :-) since handling of formatting of footnotes (as in
% footnote-ouput-setup) depends on handling the declaration of
% instances for commands like |\footnotemark| and |\footnotetext| itself
% (eg when using paragraph footnotes)
% It seems perhaps appropriate to declare those within the page setup
% itself (done by now but ...) --- think!
%
%    \begin{macrocode}
\DeclareTemplateType{pagesetup}{0}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplate{pagesetup}{std}{0}
 {
  footnote-below-floats-boolean =s
                            {\let\@combinefloats@before\relax
                             \let\@combinefloats@after\@combinefloats }
                            {\let\@combinefloats@before\@combinefloats
                             \let\@combinefloats@after\relax },
  footnote-bottom-boolean =s {\let\footnote@bottom@skip\vfill}
                             {\let\footnote@bottom@skip\relax},
  footnote-area-setup   =i {notearea} \footnote@area,
  footnote-mark-setup     =i {notemark} \footnote@mark,
  footnote-text-setup     =i {notetext} \footnote@text,
 }
 {\DoParameterAssignments}
%    \end{macrocode}

%    \begin{macrocode}
\let\footnote@bottom@skip\relax
%    \end{macrocode}
% If |\footnote@bottom@skip| is |\relax| footnotes will appear
% directly below text (except at end of document or after |\clearpage|
% or |\newpage| --- i think that is wrong and should be made
% consistent!)
%
%    \begin{macrocode}
\let\@combinefloats@before \relax
\let\@combinefloats@after  \@combinefloats
%    \end{macrocode}
%
%
%
%
% \subsubsection{The Template std (type notearea)}
%
%    Next thing should be a version of notearea template sort of,
%    right now it is more or less only a dummy
%    \begin{macrocode}
\DeclareTemplateType{notearea}{0}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplate{notearea}{std}{0}
 {
   area-id      =n  [footins]  \note@area,
   color-action =f0 [\normalcolor] \note@color,
 }
 {
   \DoParameterAssignments
   \expandafter\let \expandafter \note@area
      \csname \note@area \endcsname
   \vskip \skip\note@area
   \color@begingroup
     \note@color
     \footnoterule
     \unvbox \note@area
   \color@endgroup
 }
%    \end{macrocode}
%
%
%
%
% \subsubsection{The Template para (type notearea)}
%
%    \begin{macrocode}
\DeclareTemplate{notearea}{para}{0}
 {
   area-id      =n  [footins]  \note@area,
   color-action =f0 [\normalcolor] \note@color,
 }
 {
   \DoParameterAssignments
   \expandafter\let \expandafter \note@area
      \csname \note@area \endcsname
   \vskip \skip \note@area
   \color@begingroup
     \note@color
     \footnoterule
     \global\setbox\FN@tempboxc
        \vbox{\makefootnoteparagraph \note@area}
     \unvbox\FN@tempboxc
   \color@endgroup
 }
%    \end{macrocode}
%
%
%
%
% \subsubsection{The Template std (type headedpara)}
%
% Perhaps the next template type should really have three arguments
% (ie separating potential number or marker from potential heading
% text).
%    \begin{macrocode}
\DeclareTemplateType{headedpara}{2}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareTemplate{headedpara}{std}{2}
 {
   indent-boolean =s {\let\headedpara@indent\leavevmode}
                     {},
   title-format    =f1 \headedpara@title@format,
   title-sep       =L  \headedpara@title@sep,
 }
 {
  \let\headedpara@indent\noindent
  \let\headedpara@title@format\@firstofone
%
  \ifvmode \else \ERROR-OR-NOT? \fi
  \DoParameterAssignments
  \color@begingroup
    \headedpara@indent
    \headedpara@title@format{#1}
    \nobreak \hskip \headedpara@title@sep \relax
    \ignorespaces
    #2
    \endgraf
  \color@endgroup
 }
%    \end{macrocode}
%
%
%
% \subsection{The \texttt{para} option code}
%
% [all stolen]
%
% The basis of the code for this option comes from \TeX{}book, p.398
% ff.~(``Dirty Tricks''), though it does (of course) avoid
% redefining |\\| which has some other (somewhat significant) uses in
% \LaTeX{}!  The user should be aware of
% Knuth's note on the limitations of this method of doing the job: the
% \TeX{} stack is used four times per footnote, and the stack is
% limited (see the \TeX{}book, p.300 ff.).  If you have very large
% numbers of footnotes (in the hundreds), and encounter the error
% ``|! TeX capacity exceeded, sorry (... save size ...)|'', you may
% need to break your text into smaller sections and compile the
% separately.  Fortunately (say the comments on the original
% |fnpara.sty|) this is very easy to do with \LaTeX{}, provided that
% you reset the footnote counter to make the joins seamless.
%
% First we define a means of hiding |\par| in a case where we need it
% within the declaration of the |para| option
%
%    \begin{macrocode}
\def\FN@unhbox@par#1{\unhbox#1\par}
%    \end{macrocode}
%
% We need some temporary boxes, and \LaTeX{} only defines one
%
%    \begin{macrocode}
\let\FN@tempboxa\@tempboxa
\newbox\FN@tempboxb
\newbox\FN@tempboxc
%    \end{macrocode}
%
% Another direct crib from the \TeX{}book:
%
%    \begin{macrocode}
  \newskip\footglue \footglue=1em plus.3em minus.3em
%    \end{macrocode}
%
% The standard classes set the footnote mark flush with the text of
% the footnote, but that's not appropriate for paragraph footnotes, we
% find.
%
% We need to record a value for the baseline skip when in footnotes:
%
%    \begin{macrocode}
{\footnotesize \newdimen\footnotebaselineskip
  \global
  \footnotebaselineskip=\normalbaselineskip}
%    \end{macrocode}
%
%
% Now we derive a fudge factor from the baselineskip we've just
% established\footnote{We use \cs{strip@pt} which is defined for use
% in the \LaTeXe{} kernel, but not documented: this is a potential
% problem, but I don't imagine it will be, since the definition is
% obviously \emph{right}}:
%
%    \begin{macrocode}
\@tempdima=\footnotebaselineskip \multiply\@tempdima by 1024
\divide \@tempdima by \columnwidth \multiply\@tempdima by 64
\xdef\fudgefactor{\strip@pt\@tempdima }
%    \end{macrocode}
%
%    \begin{macrocode}
\def\makefootnoteparagraph #1 {\unvbox #1 \makehboxofhboxes
  \setbox\FN@tempboxa=\hbox{\unhbox\FN@tempboxa \removehboxes}
%    \end{macrocode}
%CCCC  ---now we are ready to set the paragraph:
%    \begin{macrocode}
    \hsize\columnwidth
    \@parboxrestore
    \baselineskip=\footnotebaselineskip
    \noindent
%    \end{macrocode}
%CCCC ---this is where the strut is needed:
%    \begin{macrocode}
  \rule{\z@}{\footnotesep}%
  \FN@unhbox@par{\FN@tempboxa}
}
\def\makehboxofhboxes{\setbox\FN@tempboxa=\hbox{}
  \loop\setbox\FN@tempboxb=\lastbox \ifhbox\FN@tempboxb
  \setbox\FN@tempboxa=\hbox{\box\FN@tempboxb\unhbox\FN@tempboxa}\repeat}
\def\removehboxes{\setbox\FN@tempboxa=\lastbox
  \ifhbox\FN@tempboxa{\removehboxes}\unhbox\FN@tempboxa \fi}
%    \end{macrocode}
%
%
%
% \subsection{Output Routines}
%
%
% This section contains a lot of stuff which might need changing but
% hasn't changed yet.
%
%
%
%    \begin{macrocode}
%\newinsert\footins
\newinsert\footinsi
\newinsert\footinsii
\newinsert\footinsiii
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\skip\footins=\bigskipamount % space added when footnote is present
\count\footins=1000 % footnote magnification factor (1 to 1)
\dimen\footins=8in % maximum footnotes per page
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\def\footnoterule{\kern-3\p@
  \hrule \@width 2in \kern 2.6\p@} % the \hrule is .4pt high
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\def \@doclearpage {%
     \ifvoid\footins
       \setbox\@tempboxa\vsplit\@cclv to\z@ \unvbox\@tempboxa
       \setbox\@tempboxa\box\@cclv
       \xdef\@deferlist{\@toplist\@botlist\@deferlist}%
       \global \let \@toplist \@empty
       \global \let \@botlist \@empty
       \global \@colroom \@colht
       \ifx \@currlist\@empty
       \else
          \@latexerr{Float(s) lost}\@ehb
          \global \let \@currlist \@empty
       \fi
       \@makefcolumn\@deferlist
       \@whilesw\if@fcolmade \fi{\@opcol\@makefcolumn\@deferlist}%
       \if@twocolumn
         \if@firstcolumn
           \xdef\@dbldeferlist{\@dbltoplist\@dbldeferlist}%
           \global \let \@dbltoplist \@empty
           \global \@colht \textheight
           \begingroup
              \@dblfloatplacement
              \@makefcolumn\@dbldeferlist
              \@whilesw\if@fcolmade \fi{\@outputpage
                                        \@makefcolumn\@dbldeferlist}%
           \endgroup
         \else
           \vbox{}\clearpage
         \fi
       \fi
     \else
       \setbox\@cclv\vbox{\box\@cclv\vfil}%     % why is this \vfil needed????
       \@makecol\@opcol
       \clearpage
     \fi
}
%    \end{macrocode}
%
%

% Need some thoughts on logic for handling |\newpage| and friends if we
% like to support footnotes directly below text as well as footnotes
% always at the bottom. in the first case |\newpage| should not add an
% unconditional |\vfil| since this forces any footnotes on this page to
% the bottom.
%
% The code below is not quite right i guess but something along those
% lines is needed --- right now a bottom float is still pushed to the
% very bottom while with a |\pagebreak| a bottom float is placed just
% below the text. (perhaps handling for those float areas also needs
% to be adjustable like handling of floats --- quite likely in fact)
%
%    \begin{macrocode}
\def \newpage {%
  \if@noskipsec
    \ifx \@nodocument\relax
      \leavevmode
      \global \@noskipsecfalse
    \fi
  \fi
  \if@inlabel
    \leavevmode
    \global \@inlabelfalse
  \fi
  \if@nobreak \@nobreakfalse \everypar{}\fi
  \par
% replaced:
%  \vfil
  \gdef\newpage@skip{\vfil\global\let\newpage@skip\relax}
  \penalty -\@M}

\let\newpage@skip\relax
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\gdef \@makecol {%
%
   \setbox\@outputbox \box\@cclv
% moved up
   \xdef\@freelist{\@freelist\@midlist}%
   \global \let \@midlist \@empty
   \@combinefloats@before
%
   \ifvoid\footins
   \else
     \setbox\@outputbox \vbox {%
       \boxmaxdepth \@maxdepth
       \@tempdima\dp\@outputbox
       \unvbox \@outputbox
       \vskip-\@tempdima
% new:
       \footnote@bottom@skip
% replaced:
%       \vskip \skip\footins
%       \color@begingroup
%         \normalcolor
%         \footnoterule
%         \unvbox \footins
%       \color@endgroup
       \footnote@area
% new:
       \newpage@skip  % needs to be coordinated with value of
                      % \footnote@bottom@skip (not done)
       }%
   \fi
% changed:
   \@combinefloats@after
   \ifvbox\@kludgeins
     \@makespecialcolbox
   \else
     \setbox\@outputbox \vbox to\@colht {%
       \@texttop
       \dimen@ \dp\@outputbox
       \unvbox \@outputbox
       \vskip -\dimen@
       \@textbottom
       }%
   \fi
   \global \maxdepth \@maxdepth
}
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\gdef \@reinserts{%
  \ifvoid\footins\else\insert\footins{\unvbox\footins}\fi
  \ifvbox\@kludgeins\insert\@kludgeins
                      {\unvbox\@kludgeins}\fi
}
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\gdef\@specialoutput{%
   \ifnum \outputpenalty>-\@Mii
     \@doclearpage
   \else
     \ifnum \outputpenalty<-\@Miii
       \ifnum \outputpenalty<-\@MM \deadcycles \z@ \fi
       \global \setbox\@holdpg \vbox {\unvbox\@cclv}%
     \else
       \global \setbox\@holdpg \vbox{%
                      \unvbox\@holdpg
                      \unvbox\@cclv
                      \setbox\@tempboxa \lastbox
                      \unskip
                                     }%
       \@pagedp \dp\@holdpg
       \@pageht \ht\@holdpg
       \unvbox \@holdpg
       \@next\@currbox\@currlist{%
         \ifnum \count\@currbox>\z@
           \advance \@pageht \@pagedp
           \ifvoid\footins \else
             \advance \@pageht \ht\footins
             \advance \@pageht \skip\footins
             \advance \@pageht \dp\footins
           \fi
           \ifvbox \@kludgeins
             \ifdim \wd\@kludgeins=\z@
               \advance \@pageht \ht\@kludgeins
             \fi
           \fi
           \@reinserts
           \@addtocurcol
         \else
           \@reinserts
           \@addmarginpar
         \fi
         }\@latexbug
       \ifnum \outputpenalty<\z@
         \if@nobreak
           \nobreak
         \else
           \addpenalty \interlinepenalty
         \fi
       \fi
     \fi
   \fi
}
%    \end{macrocode}
%
%
%
% \subsection{Test Instances}
%
%
% \subsubsection{Instances for notetext}
%
%    \begin{macrocode}
\DeclareInstance{notetext}{fnvertical}{std}
  {
    counter-id        =  footnote,
    mark-format       = \normalfont \oldstylenums{#1}.,
    headed-para-setup = \UseTemplate{headedpara}{std}{
                           indent-boolean = false,
                           title-format = #1,
                           title-sep = 5pt,
                        },
  }
%    \end{macrocode}
%
%
%    \begin{macrocode}
\DeclareInstance{notetext}{fnpara}{para}
  {
    counter-id        =  footnote,
    mark-format       = \normalfont \oldstylenums{#1}.,
    mark-sep          = 5pt,
  }
%    \end{macrocode}
%
%
% \subsubsection{Instances for notemark}
%
%    \begin{macrocode}
\DeclareInstance{notemark}{fnsuperscript}{std}
  {
   counter-id  = footnote,
   mark-format = \textsuperscript{\normalfont \oldstylenums{#1}}
  }
%    \end{macrocode}
%
%
%
% \subsubsection{Instances for pagesetup}
%
%    \begin{macrocode}
\DeclareInstance{pagesetup}{first}{std}
 {
   footnote-below-floats-boolean = false,
   footnote-bottom-boolean = false,
   footnote-area-setup     = \UseTemplate{notearea}{std}{},
   footnote-mark-setup     = fnsuperscript,
   footnote-text-setup     = fnvertical,
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagesetup}{second}{std}
 {
   footnote-below-floats-boolean = false,
   footnote-bottom-boolean = true,
   footnote-area-setup     = \UseTemplate{notearea}{std}{},
   footnote-mark-setup     = fnsuperscript,
   footnote-text-setup     = fnvertical,
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagesetup}{third}{std}
 {
   footnote-below-floats-boolean = true,
   footnote-bottom-boolean = false,
   footnote-area-setup     = \UseTemplate{notearea}{std}{},
   footnote-mark-setup     = fnsuperscript,
   footnote-text-setup     = fnvertical,
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagesetup}{fourth}{std}
 {
   footnote-below-floats-boolean = true,
   footnote-bottom-boolean = true,
   footnote-area-setup     = \UseTemplate{notearea}{std}
                                {color-action = \color{red}},
   footnote-mark-setup     = fnsuperscript,
   footnote-text-setup     = fnvertical,
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareInstance{pagesetup}{fnpara}{std}
 {
   footnote-below-floats-boolean = true,
   footnote-bottom-boolean = true,
   footnote-area-setup     = \UseTemplate{notearea}{para}{},
   footnote-mark-setup     = fnsuperscript,
   footnote-text-setup     = fnpara,
 }
%    \end{macrocode}
%
%    \begin{macrocode}
\UseInstance{pagesetup}{first}
%    \end{macrocode}
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% \Finale
%

\endinput
