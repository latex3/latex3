%%%%%%%%%%%%%%%%%%%%%%
%%% Initialization %%%
%%%%%%%%%%%%%%%%%%%%%%

%% Basic Loading
\ExplSyntaxOn

%% Required Packages
\RequirePackage { l3benchmark }

%% End the document at the end of the test file
\str_const:NV \c__example_this_file_str \tex_jobname:D
\everyeof={
    \str_if_eq:VVT \c__example_this_file_str \g_file_curr_name_str {
        \cs_if_exist_use:c { @@end }
    }
}

%% Set the testing mode
\lua_now:n {
    local~ mode = arg[rawlen(arg)]:lower()

    if~ mode == "flat" or~ mode == "linked" then~
        luatexbase.add_to_callback("process_input_buffer", function (line)
            if~ mode == "linked" then~
                line = line:gsub("prop_new", "prop_new_linked")
            end~
            return~ line:gsub("lprop", "prop")
        end, "fix_names")
    elseif~ mode == "lua" then~
        % Do nothing
    else~
        print()
        print("!~ Unknown~ mode:~ " .. mode .. ".")
        print("(Must~ be~ either~ 'flat',~ 'linked',~ or~ 'lua'.)")
        os.exit(-1)
    end
}

%% Show the "\show..." messages without pausing
\tex_scrollmode:D
\cs_undefine:N \tex_interactionmode:D
\int_new:N \tex_interactionmode:D

%% Hide the error context, and exit if we encounter a real error
\lua_now:n {
    luatexbase.add_to_callback("show_error_hook", function ()
        if~ status.lasterrorstring~ or~ status.lastluaerrorstring~ then~
            print(status.lasterrorcontext)
            tex.finish()
        end~
        print()
    end, "fix_show")
}

%% Section titles
\str_new:N \l__example_section_str
\cs_new:Nn \__example_section:n {
    \iow_term:e {
        \iow_newline:
        === \tl_use:N \c_space_tl
        \str_use:N \l__example_section_str :~
        \exp_not:n { #1 }
        \tl_use:N \c_space_tl ===
    }
}

%% Load the implementation
\str_if_eq:nnT { lprop } { l p r o p } {
    \file_input:n { expl-lua }
}

%% Variants
\cs_generate_variant:Nn \tl_analysis_show:n { e, o }
