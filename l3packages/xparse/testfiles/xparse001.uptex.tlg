This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
Author: Joseph Wright, Frank Mittelbach, Bruno Le Floch
============================================================
TEST 1: Checking for existing definitions
============================================================
! LaTeX3 Error: Command '\foo' already defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewDocumentCommand with a command that already has a
definition.
The existing definition of '\foo' will not be altered.
! LaTeX3 Error: Command '\foo' not yet defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewDocumentCommand with a command that was never defined.
LaTeX will ignore this entire definition.
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {}\foo  \foo  \foo
code ?{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:->First definition.
<recently read> }
l. ...}
============================================================
============================================================
TEST 2: Commands with simple mandatory arguments
============================================================
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {m}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmm}\foo  \foo
 \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmmm}\foo 
\foo  \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmmmm}\foo 
\foo  \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmmmmm}\foo 
\foo  \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 3: Command with too many arguments
============================================================
! LaTeX3 Error: Too many arguments in argument specification 'mmmmmmmmmm' of
(LaTeX3)        command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The argument specification provided has more than 9 arguments. This cannot be
implemented.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
============================================================
============================================================
TEST 4: Commands with one long mandatory argument
============================================================
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {+m}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {m+m}\foo  \foo  
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m_long:w
}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mm+m}\foo  \foo  
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmm+m}\foo  \foo 
 \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmm+m}\foo  \foo
  \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmm+m}\foo 
\foo   \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmm+m}\foo 
\foo   \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmmm+m}\foo 
\foo   \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mmmmmmmm+m}\foo 
\foo   \foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 5: Commands with one processed mandatory argument
============================================================
> \foo=\protected macro:->\__xparse_start:nNNnnn {>{\foo }m}\foo  \foo code
{\__xparse_grab_m:w }{}{{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {m>{\foo }m}\foo  \foo code
{\__xparse_grab_m_1:w \__xparse_grab_m:w }{}{{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mm>{\foo }m}\foo  \foo code
{\__xparse_grab_m_2:w \__xparse_grab_m:w }{}{{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmm>{\foo }m}\foo  \foo code
{\__xparse_grab_m_3:w \__xparse_grab_m:w }{}{{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmmm>{\foo }m}\foo  \foo
code {\__xparse_grab_m_4:w \__xparse_grab_m:w }{}{{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmmmm>{\foo }m}\foo  \foo
code {\__xparse_grab_m_5:w \__xparse_grab_m:w }{}{{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmmmmm>{\foo }m}\foo  \foo
code {\__xparse_grab_m_6:w \__xparse_grab_m:w }{}{{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmmmmmm>{\foo }m}\foo  \foo
code {\__xparse_grab_m_7:w \__xparse_grab_m:w }{}{{}{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mmmmmmmm>{\foo }m}\foo  \foo
code {\__xparse_grab_m_8:w \__xparse_grab_m:w }{}{{}{}{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 6: Arguments read up to first brace
============================================================
> \l_test_tl=(\bar )(1).
<recently read> }
l. ...}
> \l_test_tl=(100)(2).
<recently read> }
l. ...}
> \l_test_tl=(\bar )(1).
<recently read> }
l. ...}
> \l_test_tl=(100)(2).
<recently read> }
l. ...}
============================================================
============================================================
TEST 7: Various mandatory combinations
============================================================
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {lm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_u:w \foo (arg 1)
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {mlm}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_u:w \foo
(arg 2) \__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn
{u{end}u{stop!}}\foo  \foo  \foo code ?{\__xparse_expandable_grab_u:w \foo
(arg 1) \__xparse_expandable_grab_u:w \foo (arg 2) }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start_expandable:nNNNNn {lll}\foo  \foo 
\foo code ?{\__xparse_expandable_grab_u:w \foo (arg 1)
\__xparse_expandable_grab_u:w \foo (arg 2) \__xparse_expandable_grab_u:w \foo
(arg 3) }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {+l>{\foo }u{end}}\foo  \foo
code {\__xparse_grab_l_long:w \__xparse_grab_u:w {end}}{}{{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
============================================================
============================================================
TEST 8: Optional argument creation
============================================================
> \foo=\protected macro:->\__xparse_start:nNNnnn {som}\foo  \foo code
{\__xparse_grab_t:w *\__xparse_grab_D:w []\__xparse_grab_m_1:w }{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {t+d()+m}\foo  \foo code
{\__xparse_grab_t:w +\__xparse_grab_D:w ()\__xparse_grab_m_long:w }{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {+t\par O{default}mmm}\foo 
\foo code {\__xparse_grab_t:w \par \__xparse_grab_D:w []\__xparse_grab_m_3:w
}{\c_novalue_tl {\prg_do_nothing: default}\c_novalue_tl \c_novalue_tl
\c_novalue_tl }{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {momo}\foo  \foo code
{\__xparse_grab_m_1:w \__xparse_grab_D:w []\__xparse_grab_m_1:w
\__xparse_grab_D:w []}{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mgom}\foo  \foo code
{\__xparse_grab_m_1:w \__xparse_grab_G:w \__xparse_grab_D:w
[]\__xparse_grab_m_1:w }{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__xparse_start:nNNnnn {mG{test}sm}\foo  \foo code
{\__xparse_grab_m_1:w \__xparse_grab_G:w \__xparse_grab_t:w
*\__xparse_grab_m_1:w }{\c_novalue_tl {\prg_do_nothing: test}\c_novalue_tl
\c_novalue_tl }{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
============================================================
============================================================
TEST 9: Unknown argument types
============================================================
! LaTeX3 Error: Unknown argument type 'n' for the command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The letter 'n' does not specify a known argument type.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
! LaTeX3 Error: Unknown argument type 'a' for the command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The letter 'a' does not specify a known argument type.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
============================================================
============================================================
TEST 10: Some valid expandable functions
============================================================
> \foo=macro:->\__xparse_start_expandable:nNNNNn {m}\foo  \foo  \foo code
?{\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {+m}\foo  \foo  \foo code
?{\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {mmm}\foo  \foo  \foo code
?{\__xparse_expandable_grab_m:w \__xparse_expandable_grab_m:w
\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {om}\foo  \foo  \foo code
?{\__xparse_expandable_grab_D:w \foo (arg 1) []\__xparse_expandable_grab_m:w
}.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {+o+m}\foo  \foo  \foo code
?{\__xparse_expandable_grab_D:w \foo (arg 1)
[]\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {sm}\foo  \foo  \foo code
?{\__xparse_expandable_grab_t:w \__xparse_grabber_*:w
*\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {osm}\foo  \foo  \foo code
?{\__xparse_expandable_grab_D:w \foo (arg 1) []\__xparse_expandable_grab_t:w
\__xparse_grabber_*:w *\__xparse_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
============================================================
============================================================
TEST 11: Not valid as expandable functions
============================================================
! LaTeX3 Error: Argument specification 'mo' for expandable command '\foo' ends
(LaTeX3)        with optional argument.
For immediate help type H <return>.
 ...                                              
l. ...}
Expandable commands must have a final mandatory argument (or no arguments at
all). You cannot have a terminal optional argument with expandable commands.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
! LaTeX3 Error: Inconsistent long arguments for expandable command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The arguments for an expandable command must not involve short arguments after
long arguments. You have tried to mix the two types.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
> \foo=macro:->\__xparse_start_expandable:nNNNNn {o+m}\foo  \foo   \foo code
?{\__xparse_expandable_grab_D:w \foo (arg 1)
[]\__xparse_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
! LaTeX3 Error: Argument specification 'r()o' for expandable command '\foo'
(LaTeX3)        ends with optional argument.
For immediate help type H <return>.
 ...                                              
l. ...}
Expandable commands must have a final mandatory argument (or no arguments at
all). You cannot have a terminal optional argument with expandable commands.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
============================================================
============================================================
TEST 12: Checking for existing environments
============================================================
! LaTeX3 Error: Environment 'foo' already defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewDocumentEnvironment with an environment that already has a
definition.
The existing definition of 'foo' will not be altered.
! LaTeX3 Error: Environment 'foo' not yet defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewDocumentEnvironment with an environment that was never
defined.
LaTeX will ignore this entire definition.
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn {}{foo}{}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:->\cs_set_nopar:Npx \environment
foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }First.
<recently read> }
l. ...}
============================================================
============================================================
TEST 13: Valid environment declarations
============================================================
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn
{mmm}{foo}{\__xparse_grab_m_3:w }{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->\cs_set_nopar:Npx
\environment foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn
{som}{foo}{\__xparse_grab_t:w *\__xparse_grab_D:w []\__xparse_grab_m_1:w
}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->\cs_set_nopar:Npx
\environment foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn
{so+m}{foo}{\__xparse_grab_t:w *\__xparse_grab_D:w []\__xparse_grab_m_long:w
}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->\cs_set_nopar:Npx
\environment foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn
{u{stop}om}{foo}{\__xparse_grab_u:w {stop}\__xparse_grab_D:w
[]\__xparse_grab_m_1:w }{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->\cs_set_nopar:Npx
\environment foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__xparse_start_env:nnnnn
{moo}{foo}{\__xparse_grab_m_1:w \__xparse_grab_D:w []\__xparse_grab_D:w
[]}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->\cs_set_nopar:Npx
\environment foo end aux {\exp_not:N \environment foo end aux  \exp_not:o
\l__xparse_args_tl }(#1)(#2)(#3).
<recently read> }
l. ...}
============================================================
============================================================
TEST 14: Environment groups: should show "outside" and 1
============================================================
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
============================================================
============================================================
TEST 15: Passing args to end of environments: display correct args
============================================================
> (A).
<recently read> }
l. ...}
> (A)(B).
<recently read> }
l. ...}
> (A)(B)(C).
<recently read> }
l. ...}
> (A)(-NoValue-)(-NoValue-).
<recently read> }
l. ...}
============================================================
============================================================
TEST 16: Nested environments
============================================================
> \@currenvir=foo.
<recently read> }
l. ...}
> \@currenvir=document.
<recently read> }
l. ...}
============================================================
============================================================
TEST 17: Passing arguments to the end with more complex cases
============================================================
> \box...=
\hbox(6.94444+1.94444)x142.50034
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 a
.\OT1/cmr/m/n/10 r
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 m
.\OT1/cmr/m/n/10 i
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 l
.\OT1/cmr/m/n/10 e
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 o
.\OT1/cmr/m/n/10 p
.\OT1/cmr/m/n/10 !
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 a
.\OT1/cmr/m/n/10 r
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 m
.\OT1/cmr/m/n/10 i
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 l
.\OT1/cmr/m/n/10 e
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 o
.\OT1/cmr/m/n/10 p
.\OT1/cmr/m/n/10 !
! OK.
<argument> \l_tmpa_box 
l. ...  }
============================================================
============================================================
TEST 18: Expansion at end of environment
============================================================
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line ....
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line ....
> \box...=
\hbox(8.5+3.5)x58.44452
.\hbox(0.0+0.0)x0.0
.\hbox(8.5+3.5)x29.22226
..\mathon
..\vbox(8.5+3.5)x29.22226
...\rule(0.0+0.0)x29.22226
...\hbox(8.39996+3.60004)x29.22226
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x18.66667
.....\rule(8.39996+3.60004)x0.0
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 T
.....\kern-0.83334
.....\OT1/cmr/m/n/10 e
.....\OT1/cmr/m/n/10 s
.....\OT1/cmr/m/n/10 t
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.00002
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 a
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.55557
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 b
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
...\rule(0.0+0.0)x29.22226
..\mathoff
.\hbox(0.0+0.0)x0.0
.\hbox(0.0+0.0)x0.0
.\hbox(8.5+3.5)x29.22226
..\mathon
..\vbox(8.5+3.5)x29.22226
...\rule(0.0+0.0)x29.22226
...\hbox(8.39996+3.60004)x29.22226
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x18.66667
.....\rule(8.39996+3.60004)x0.0
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 T
.....\kern-0.83334
.....\OT1/cmr/m/n/10 e
.....\OT1/cmr/m/n/10 s
.....\OT1/cmr/m/n/10 t
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.00002
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 a
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.55557
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\OT1/cmr/m/n/10 b
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
...\rule(0.0+0.0)x29.22226
..\mathoff
.\hbox(0.0+0.0)x0.0
! OK.
<argument> \l_tmpa_box 
l. ...  }
============================================================
============================================================
TEST 19: (ab)using xparse commands in csnames
============================================================
\test-abc-def 
\test-test-abc 
\test-abc.{def} 
! Missing \endcsname inserted.
<to be read again> 
                   \xparse function is not expandable 
l. ...  }
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.
\test- \xparse function is not expandable \bool_set_false:N \l__xparse_environment_bool \__xparse_start_aux:NNnnnn \foo code {D...}{\__xparse_grab_D:w ..}{{.}}{}....\cs_end: 
============================================================
============================================================
TEST 20: Checking for existing expandable definitions
============================================================
! LaTeX3 Error: Command '\foo' already defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewExpandableDocumentCommand with a command that already has a
definition.
The existing definition of '\foo' will not be altered.
! LaTeX3 Error: Command '\foo' not yet defined!
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewExpandableDocumentCommand with a command that was never
defined.
LaTeX will ignore this entire definition.
> \foo=macro:->\__xparse_start_expandable:nNNNNn {}\foo  \foo  \foo code ?{}.
<recently read> }
l. ...}
> \foo code=\long macro:->First definition.
<recently read> }
l. ...}
============================================================
