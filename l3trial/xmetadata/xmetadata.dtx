% \iffalse
%
%% File xmetadata.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{l3dt,xparse}
\GetIdInfo$Id: xmetadata.dtx 3087 2011-12-22 23:05:26Z joseph $
  {L3 Experimental metadata management}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{xmetadata} package\\ Metadata management ^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% This module is intended to explore ways of defining the author metadata
% for a document in a flexible way. The intention is to provide a set of
% structures to input and store the metadata, as this is essentially a
% programmatic problem. The \emph{output} of the data will be tied to
% document design, and thus is best handled using the template system,
% and in a separate module.
%
% \section{User interface}
%
% \subsection{Author information}
%
% \begin{function}{\author}
%   \begin{syntax}
%     \cs{author}\oarg{extended information}\marg{names}
%   \end{syntax}
%   The \cs{author} function is used to define one or more document
%   authors. It requires one mandatory argument, which consists of a list
%   of one or more author \meta{names} separated by \cs{and} (see later).
%
%   As well as the mandatory \meta{name} for each author, one or more
%   additional pieces of information may be given as \meta{extended
%   information}. This is made up of a key--value list, which will
%   recognise the following keys
%   \begin{itemize}[font = \ttfamily]
%     \item[address] Postal or other contact address,
%     \item[email] E-mail address,
%     \item[homepage] Web page,
%     \item[note] Any notes concerning the author.
%   \end{itemize}
%   Each piece of \meta{extended information} given will apply to all
%   authors listed in the \meta{names}, and may itself be made up of multiple
%   entries.
% \end{function}
%
% \begin{function}{\and}
%   \begin{syntax}
%     \meta{entry1} \cs{and} \meta{entry2} \cs{and} \ldots
%   \end{syntax}
%   Within the list of \meta{names}, separate authors may be separated using
%   \cs{and}. Thus one \cs{author} statement may be used to refer to one
%   or more authors with different names but the same \meta{extended
%   information}.
%
%   Within the \meta{extended information} entries, \cs{and} may be used to
%   create two or more alternative entries, for example multiple addresses.
%   These will apply to all of the authors listed in the \meta{names}.
% \end{function}
%
% An example will make the use of the system clearer. At the most basic,
% one \cs{author} entry may be used for one author with one set of information
% \begin{verbatim}
%   \author
%     [
%       address = Some Place,
%       email   = a.n.other@gmail.com
%     ]
%     {Arthur N. Other}
% \end{verbatim}
% At the next level, a single author may be associated with more than one
% address (or similar)
% \begin{verbatim}
%   \author
%     [
%       address = Some Place \and A second place,
%       email   = a.n.other@gmail.com
%     ]
%     {Arthur N. Other}
% \end{verbatim}
% It is also possible that two or more authors are associated with the same
% address
% \begin{verbatim}
%   \author
%     [address = Some Place]
%     {Arthur N. Other \and Fredrick Bloggs \and John Brown}
% \end{verbatim}
%
% \subsection{Document information}
%
% \begin{function}{\publishers}
%   \begin{syntax}
%     \cs{publishers}\marg{publishers}
%   \end{syntax}
%   Sets the \meta{publishers} of the current document. The \meta{publishers}
%   should be given as a list separated by \cs{and}, in the same way as
%   in the \meta{names} given for \cs{author}.
% \end{function}
%
% \begin{function}{\keywords}
%   \begin{syntax}
%     \cs{keywords}\marg{keywords}
%   \end{syntax}
%   Sets the \meta{keywords} of the current document. The \meta{keywords}
%   should be given as a list separated by \cs{and}, in the same way as
%   in the \meta{names} given for \cs{author}.
% \end{function}
%
% \begin{function}{\subject}
%   \begin{syntax}
%     \cs{subject}\marg{subject}
%   \end{syntax}
%   Sets the \meta{subject} of the current document.
% \end{function}
%
% \begin{function}{\title, \subtitle}
%   \begin{syntax}
%     \cs{title}\oarg{short title}\marg{title}
%     \cs{subtitle}\oarg{short subtitle}\marg{subtitle}
%   \end{syntax}
%   Sets the \meta{(sub)title} of the current document. An optional
%   \meta{short title} may also be given. Document classes may choose to
%   use the latter in place of the full \meta{(sub)title} in for example
%   running headers.
% \end{function}
%
% \section{Programming interface}
%
% \subsection{Adding metadata}
%
% \begin{function}{\metadata_author_new:n}
%   \begin{syntax}
%     \cs{metadata_author_new:n} \meta{author}
%   \end{syntax}
%   Adds a new entry to the metadata for the document for the
%   \meta{author}.
% \end{function}
%
% \begin{function}{\metadata_set_author_item:nn, \metadata_set_author_item:nV}
%   \begin{syntax}
%     \cs{metadata_set_author_item:nn} \Arg{key} \Arg{value}
%   \end{syntax}
%   Stores the \meta{value} as the entry for the given \meta{key} for
%   the current author. The \meta{value} is unique to the current author
%   entry: duplicate \meta{values} will be stored separately. Any existing
%   \meta{value} for the \meta{key} will be overwritten.
% \end{function}
%
% \begin{function}{\metadata_set_author_list:nnn}
%   \begin{syntax}
%     \cs{metadata_set_author_list:nnn} \Arg{key} \Arg{separator} \Arg{values}
%   \end{syntax}
%   This function first attempts to separate out the \meta{values} into
%   one or more \meta{value}, splitting at the given \meta{separator}. Each
%   \meta{value} is then stored as for the \meta{key}, and these are
%   cross-linked to the list of known \meta{values} for the \meta{key} entry
%   for the current author. Thus one or more \meta{value} may be associated
%   with an author, and each potential \meta{value} will only be stored once.
% \end{function}
%
% \subsection{Accessing metadata}
%
% \subsection{Author information}
%
% To do!
%
% \subsection{Document information}
%
% \begin{variable}{\g_metadata_document_prop}
%   Holds document metadata which has only a single entry and no
%   further internal structure. The standard keys for this data are
%   \begin{itemize}[font = \ttfamily]
%     \item[short-title] A shortened version of the \texttt{title}, intended
%       for use for example in running headers.
%     \item[short-subtitle] A shortened version of the \texttt{subtitle},
%       intended for use for example in running headers.
%     \item[subject] The subject of the document.
%     \item[subtitle] The subtitle: typically a second phrase or
%       further detail for the \texttt{title}.
%     \item[title] The overall title of the document.
%   \end{itemize}
% \end{variable}
%
% \begin{variable}{\g_metadata_keywords_seq}
%   Holds the keywords assigned by the user for the current document.
% \end{variable}
%
% \begin{variable}{\g_metadata_publishers_seq}
%   Holds the publishers assigned by the user for the current document.
% \end{variable}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xmetadata} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% \subsection{Variants needed by this module}
%
% \begin{macro}{\dt_gput:NnV}
%   Data table variants.
%    \begin{macrocode}
\cs_generate_variant:Nn \dt_gput:Nnn { NnV }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\prop_get:cn}
% \begin{macro}{\prop_gput:cVn, \prop_gput:cnV}
%   Property list variants.
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_get:Nn { c }
\cs_generate_variant:Nn \prop_gput:Nnn { cV , cnV }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Data structures}
%
% \begin{variable}{\g_metadata_author_dt}
%   The main author data structure is a data table for authors, for which some
%   standard entries are set up.
%    \begin{macrocode}
\dt_new:N \g_metadata_author_dt
\dt_gadd_key:Nn \g_metadata_author_dt { name }
\dt_gadd_key:Nn \g_metadata_author_dt { address }
\dt_gadd_key:Nn \g_metadata_author_dt { email }
\dt_gadd_key:Nn \g_metadata_author_dt { homepage }
\dt_gadd_key:Nn \g_metadata_author_dt { note }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\metadata_array_new:n}
% \begin{variable}
%   {
%     \g_metadata_address_prop ,
%     \g_metadata_email_prop   ,
%     \g_metadata_homepage_prop,
%     \g_metadata_note_prop
%   }
%   Here, the subsidiary array fields are created as property lists. A
%   generator function is used, by as this is only needed here it is done
%   within a group: all metadata is global in any case.
%    \begin{macrocode}
\group_begin:
  \cs_set_protected:Npn \metadata_array_new:n #1
    {
      \prop_new:c { g_metadata_ #1 _prop }
      \prop_gput:cnn { g_metadata_ #1 _prop } { index } { -1 }
    }
  \metadata_array_new:n { address }
  \metadata_array_new:n { email }
  \metadata_array_new:n { homepage }
  \metadata_array_new:n { note }
\group_end:
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% \begin{variable}
%   {
%     \l_metadata_tmp_clist,
%     \l_metadata_tmp_int  ,
%     \l_metadata_tmp_seq
%   }
%   Scratch space.
%    \begin{macrocode}
\clist_new:N \l_metadata_tmp_clist
\int_new:N \l_metadata_tmp_int
\seq_new:N \l_metadata_tmp_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_metadata_document_prop}
%   Metadata which applies to the document as a whole, rather than to
%   individual authors, is stored in a property list. No items are
%   added initially
%    \begin{macrocode}
\prop_new:Nn \g_metadata_document_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_metadata_keywords_seq}
% \begin{variable}{\g_metadata_publishers_seq}
%   Two entries which may have multiple parts and so are stored as sequences.
%    \begin{macrocode}
\seq_new:N \g_metadata_keywords_seq
\seq_new:N \g_metadata_publishers_seq
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \subsection{Relationship tools}
%
% \begin{macro}[int]
%   {\metadata_prop_if_value_in:NnNF, \metadata_prop_if_value_in:cnNF}
%   To construct a \enquote{relational} system, property lists are used to
%   store the secondary fields, indexed by number. In order to find the
%   index from the value, a loop over all of the values is needed. As
%   duplicates are never stored this will always have exactly one valid hit:
%   a test is used for the special \texttt{items} entry to be on the safe
%   side. (It is unlikely that any other value will be a simple number, but
%   this is defensive against that case.) As everything is indexed from
%   zero, the marker value needed for success is $-1$.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_prop_if_value_in:NnNF #1#2#3
  {
    \int_set:Nn #3 { \c_minus_one }
    \prop_map_inline:Nn #1
      {
        \tl_if_eq:nnT {#2} {##2}
          {
            \str_if_eq:nnF {##1} { index }
              {
                \int_set:Nn #3 {##1}
                \prop_map_break:
              }
          }
      }
    \int_compare:nNnF #3 > \c_minus_one
  }
\cs_generate_variant:Nn \metadata_prop_if_value_in:NnNF { c }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Storing data about authors}
%
% \begin{macro}{\metadata_set_author_item:nn, \metadata_set_author_item:nV}
%   The most basic function for storing data simply saves it directly in the
%   data table. This is done as an independent function so that it's easy to
%   do an \texttt{V}-type expansion and to keep the rest of the code
%   independent of the underlying data structure.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_set_author_item:nn #1#2
  { \dt_gput:Nnn \g_metadata_author_dt {#1} {#2} }
\cs_generate_variant:Nn \metadata_set_author_item:nn { nV }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\metadata_set_author_list:nnn}
% \begin{macro}[aux]
%   {
%     \metadata_set_author_list_item:nn    ,
%     \metadata_set_author_list_item_aux:nn,
%     \metadata_set_author_list_item_aux:nV
%   }
%   Storing input which can be subdivided has two parts. The first part is
%   to split the input based on the divider, which is not hard coded but
%   instead is passed as |#2|. Before the mapping, any existing data is
%   cleared so that each \texttt{set} operation will produce a single list.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_set_author_list:nnn #1#2#3
  {
    \dt_gdel:Nn \g_metadata_author_dt {#1}
    \seq_set_split:Nnn \l_metadata_tmp_seq {#2} {#3}
    \seq_map_inline:Nn \l_metadata_tmp_seq
      { \metadata_set_author_list_item:nn {#1} {##1} }
  }
%    \end{macrocode}
%  For each item in a list, the storing procedure has to parts. First, there is
%  a look up to see if the value given has already been stored. If it has, the
%  relevant index is picked up as part of the look up. On the other hand, if
%  the item is new then the relevant property list index is stepped before the
%  storage step.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_set_author_list_item:nn #1#2
  {
    \metadata_prop_if_value_in:cnNF
      { g_metadata_ #1 _prop } {#2} \l_metadata_tmp_int
      {
        \int_set:Nn \l_metadata_tmp_int
          { \prop_get:cn { g_metadata_ #1 _prop } { index } + 1 }
        \prop_gput:cnV { g_metadata_ #1 _prop } { index } \l_metadata_tmp_int
        \prop_gput:cVn { g_metadata_ #1 _prop } \l_metadata_tmp_int {#2}
      }
    \metadata_set_author_list_item_aux:nV {#1} \l_metadata_tmp_int
  }
%    \end{macrocode}
%  The final stage is to store the index of the added entry in the main data
%  table. As it makes the table slightly more user-friendly, these are stored
%  as a comma list. So the relevant list is recovered, the new index is added
%  and the entry is stored again. There is a check for duplicates so that there
%  is always a unique relationship.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_set_author_list_item_aux:nn #1#2
  {
    \dt_get:NnNF \g_metadata_author_dt {#1} \l_metadata_tmp_clist
      { \clist_clear:N \l_metadata_tmp_clist }
    \clist_put_right:Nn \l_metadata_tmp_clist {#2}
    \clist_remove_duplicates:N \l_metadata_tmp_clist
    \dt_gput:NnV \g_metadata_author_dt {#1} \l_metadata_tmp_clist
  }
\cs_generate_variant:Nn \metadata_set_author_list_item_aux:nn { nV }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\metadata_author_new:n}
%   Adding a new author is a simple concept: add a new line to the data table
%   and save the name in the data table. This should be unique, but does not
%   have to be.
%    \begin{macrocode}
\cs_new_protected:Npn \metadata_author_new:n #1
  {
    \dt_gadd_row:N \g_metadata_author_dt
    \metadata_set_author_item:nn { name } {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{The user interface}
%
% \begin{macro}{\author}
%   The \LaTeXe{} user interface to the package is handled using the
%   \cs{author} macro. Thus the code here is tied to the interface in use.
%   At this stage, we split the author list into individual authors, then
%   for each author add a new entry to the data table and try to separate out
%   the author name, if possible.
%    \begin{macrocode}
\RenewDocumentCommand \author { O { } > { \SplitList { \and } } m }
  {
    \tl_map_inline:nn {#2}
      {
        \metadata_author_new:n {##1}
        \keys_set:nn { metadata  / author } {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% The keys for the data interface as defined here are pretty simple. In several
% cases it is possible to further sub-divide the entries. These are handled
% using the \cs{metadata_set_author_list:nnn} function. Thus the particular
% separator used for lists (\cs{and}) is defined here and not in the internals
% of the package.
%    \begin{macrocode}
\keys_define:nn { metadata / author }
  {
    address   .code:n =
      \metadata_set_author_list:nnn { address }  { \and } {#1},
    email     .code:n =
      \metadata_set_author_list:nnn { email }    { \and } {#1},
    homepage  .code:n =
      \metadata_set_author_list:nnn { homepage } { \and } {#1},
    note      .code:n =
      \metadata_set_author_list:nnn { note }     { \and } {#1}
  }
%    \end{macrocode}
%
% \begin{macro}{\subject, \subtitle, \title}
%   Simple store-the-data commands, so no need for any internal code here.
%   Fields are only added if given so that \cs{prop_if_in:Nn(TF)} and so
%   on can be used to test for values.
%    \begin{macrocode}
\NewDocumentCommand \subject { m }
  { \prop_gput:Nnn \g_metadata_document_prop { subject } {#1} }
\NewDocumentCommand \subtitle { o m }
  {
    \IfNoValueF {#1}
      { \prop_gput:Nnn \g_metadata_document_prop { short-subtitle } {#1} }
    \prop_gput:Nnn \g_metadata_document_prop { subtitle } {#2}
  }
\RenewDocumentCommand \title { o m }
  {
    \IfNoValueF {#1}
      { \prop_gput:Nnn \g_metadata_document_prop { short-title } {#1} }
    \prop_gput:Nnn \g_metadata_document_prop { title } {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\keywords, \publishers}
%   Two user level list structures, using the same interface as for
%   authors in terms of list separator.
%    \begin{macrocode}
\NewDocumentCommand \keywords { > { \SplitList { \and } } m }
  {
    \tl_map_inline:nn {#1}
      { \seq_gput_right:Nn \g_metadata_keywords_seq {##1} }
  }
\NewDocumentCommand \publishers { > { \SplitList { \and } } m }
  {
    \tl_map_inline:nn {#1}
      { \seq_gput_right:Nn \g_metadata_publishers_seq {##1} }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
