%
% Copyright (C) 2012,2017,2018,2021 The LaTeX Project
%
\RequirePackage[enable-debug]{expl3}
\RequirePackage{xtemplate}
\RequirePackage{l3ldb}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff

\documentclass{article}
\input{regression-test}

\START
\AUTHOR{Frank Mittelbach}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% temporary code which used to be setup in a separate file:
%   shows that the xtemplate interface needs looking at, at the moment we
%   use a \__function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ExplSyntaxOn
\cs_new:Npn \env_begin:nnn #1#2#3
  { % obj-type env-name ldb-class
    \ldb_update_begin:n { #3 , #2 }
    \__xtemplate_use_instance_aux:nn { #1 }{ \UseInstanceName }
  }
\cs_new:Npn \env_end:nn #1 #2
  { % env-name ldb-class
    \ldb_update_end:n { #2 , #1 }
    \MaybeExecuteEndCode
    \cs_set:Npn \MaybeExecuteEndCode {}
  }
\cs_new:Npn \MaybeExecuteEndCode {}

\cs_new:Npn \DeclareLDBenvironment #1#2#3#4
  { % env-name ldb-class obj-type inst-name
    \newenvironment { #1 }
      { \env_begin:nnn {#3}{#1}{#2} }
      { \env_end:nn    {#1}{#2}     }
    \LDBenter { <#1 } { \UseInstanceName } { #4 }
    \LDBenter { <#1 } { \l_xtemplate_type_tl} { #3 }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\cs_new:Npn \LDBdeclFunction { \LDBdeclDefParm }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tl_new:N \UseInstanceName
\tl_new:N \l_xtemplate_type_tl

\LDBdeclDefParm  {\UseInstanceName}
\LDBdeclDefParm  {\l_xtemplate_type_tl}

\cs_new:Npn \UseInstanceValues #1
  { \EditInstance \l_xtemplate_type_tl \UseInstanceName {#1} }
\ldb_decl_function:N {\UseInstanceValues}

\nopointer

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareObjectType{list}{0}

\DeclareTemplateInterface{list} {std} {0}
  {
    top-sep          : skip = 8pt plus 2pt minus 4pt ,
    partop-sep       : skip = 2pt plus 1pt minus 1pt ,
    item-sep         : skip = 4pt plus 2pt minus 1pt ,
    par-sep          : skip = 4pt plus 2pt minus 1pt ,
    left-margin      : length = 0pt ,
    right-margin     : length = 0pt ,
    list-parindent   : length = 0pt ,
    item-indent      : length = 0pt ,
    label-sep        : length = 5pt ,
    label-width      : length = \maxdimen ,
         % should be \KeyValue{left-margin} - \KeyValue{label-sep}
         % but this doesn't work on this level
    make-label       : function{1} = {#1} ,
    counter-setup    : function{0} = {} ,
    item-label-text  : function{0} = {} ,
    text-font        : function{0} = \normalfont ,
  }

\DeclareTemplateCode{list} {std} {0}
  {
    top-sep          = \topsep      ,
    partop-sep       = \partopsep   ,
    item-sep         = \itemsep     ,
    par-sep          = \parsep      ,
    left-margin      = \leftmargin  ,
    right-margin     = \rightmargin ,
    list-parindent   = \listparindent ,
    item-indent      = \itemindent  ,
    label-sep        = \labelsep    ,
    label-width      = \labelwidth  ,
    make-label       = \makelabel   ,
    counter-setup    = \list_cnt_setup: ,
    item-label-text  = \list_label_text:   ,
    text-font        = \list_text_font:  ,             % this is extra ..
  }
  {
    \cs_set:Npn \MaybeExecuteEndCode {\endlist}
    \list { \list_label_text: }
      {
        % if no value given for \labelwidth use default calculation:
        \dim_compare:nNnT \labelwidth = \maxdimen
          { \dim_set:Nn \labelwidth { \leftmargin - \labelsep } }
        \list_cnt_setup:
        \list_text_font:
      }
  }

\cs_undefine:N \itemize
\cs_undefine:N \enumerate
\cs_undefine:N \enditemize
\cs_undefine:N \endenumerate

\cs_set_eq:NN \origitem \item
\cs_undefine:N \item

\DeclareObjectType{listitem}{0}
\DeclareTemplateInterface {listitem} {std} {0} { }
\DeclareTemplateCode {listitem} {std} {0}
  { } { \origitem }
\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% First set up some list instances for testing. the ``std'' template
% is essentially a standard \LaTeX{} ``list'' with more or less the
% same configuration possibilities as in \LaTeXe.
%
% The interface to  the list ``std'' template is as follows:
%\begin{verbatim}
% \DeclareTemplateInterface{list} {std} {0}
%   {
%     top-sep          : skip = 8pt plus 2pt minus 4pt ,
%     partop-sep       : skip = 2pt plus 1pt minus 1pt ,
%     item-sep         : skip = 4pt plus 2pt minus 1pt ,
%     par-sep          : skip = 4pt plus 2pt minus 1pt ,
%     left-margin      : length = 0pt ,
%     right-margin     : length = 0pt ,
%     list-parindent   : length = 0pt ,
%     item-indent      : length = 0pt ,
%     label-sep        : length = 5pt ,
%     label-width      : length = -5pt ,       % should be \KeyValue{left-margin} - \KeyValue{label-sep},
%     make-label       : function{1} = {#1} ,
%     counter-setup    : function{0} = {} ,
%     item-label-text  : function{0} = {} ,
%     text-font        : function{0} = \normalfont ,
%   }
%\end{verbatim}
%

\DeclareInstance {list} {itemize} {std}
   {
     left-margin  = 0pt    ,
     right-margin = 20pt   ,
     par-sep = 0pt plus 1pt     ,
     item-label-text = $\star$
   }

\DeclareInstance {list} {enumerate} {std}
   {
     left-margin = 20pt    ,
     right-margin = 20pt   ,
     par-sep = 0pt plus 1pt     ,
     counter-setup   = \usecounter{enumi} ,
     item-label-text = \arabic{enumi} ,
     make-label      = \hss\llap{#1} ,
   }

%
% What is different (for now) is that I made ``item'' an environment
% and a template (again, it is in reality just the original code).
%
% It is an environment as the LDB is currenty made up for environemnt
% type structures and to produce something like \texttt{<item>} in the
% LDB context one would need to gain control after the command has
% read its arguments and processed its code and then issue
% |\ldb_update_end:nn|. Doable but may need some more thought, so
% changing to an environment for testing is simpler

\DeclareInstance {listitem} {item} {std} {}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
% The next three declarations produce document elements that are each
% associated one of the above instances.
%
% This is **NOT** the final syntax, it is just some simple setup for
% testing. There is no handling of arguments for example (which is
% fine for the test, but of course not in general.
%
% The arguments are as follows:
% \begin{enumerate}
% \item Name of the environment to be defined. This name will also be
%       pushed as an environment name on the LDB, i.e., as
%       \texttt{<env}}.
%
% \item Any additional LDB class, e.g., an ``enumerate'' is also a
%       list, so by pushing that in addition attributes common to all
%       lists can be manipulated there. If there is more than one
%       class then they are separated with commas.
%
% \item The object type of the environment
% \item The default instance to use when this environment is
%       called. The name of this  instance  will automatically stored
%       under |\UseInstanceName| for use in LDB entries.
% \end{enumerate}
%
%
%                       env    extra class(es)  type    initial instance
%
\DeclareLDBenvironment {itemize}   {list}      {list}  {itemize}
\DeclareLDBenvironment {enumerate} {list}      {list}  {enumerate}
\DeclareLDBenvironment {item}      {}          {listitem}  {item}

%
% Above results in, e.g., ``itemize'' executing the ``itemize'' instance as
% defined earlier unless overwritten in context. It also means that
% ``itemize'' and ``enumerate are also of LDB class ``list'' so that
% for example indentation for nested lists can be adjusted on ``list''
% level and thus applies for all environments in that class (unless
% further overwritten with a context specifying the environment directly).

\LDBenter{<list*<list}             {\UseInstanceValues} { left-margin = 20pt }
\LDBenter{<list*<list*<list}       {\UseInstanceValues} { left-margin = 10pt }

% So the above means that a nested list on second level with have a
% left margin of 20pt increase and on third (and further) nesting
% levels the value would get reduced to 10pt.
%
% That could in turn be overwritten for, say ``itemize'' alone through
% (with some weird value for testing):
%
\LDBenter{<list*<list*<itemize}       {\UseInstanceValues} { left-margin = 70pt }

% By now you may have wondered what |\UseInstanceValues| is precisely
% doing. What it does the the following: it takes the instance stored
% in |\UseInstanceName| and modifies it using the key value settings
% given as an argument. Thus the next setting does the following: for
% a nested ``itemize'' the label text, the form and position of the
% label and the font for the text will be changed.

\LDBenter{<list*<itemize}          {\UseInstanceValues} { item-label-text = \textbf{--} ,
                                                          make-label      = \hss\llap{#1} ,
                                                          text-font = \itshape }

% Similarly, on the third and forth level font and label text will be further modified.
%
\LDBenter{<list*<list*<itemize}    {\UseInstanceValues} {  item-label-text = \textbullet ,
                                                             text-font = \sffamily\slshape }
\LDBenter{<list*<list*<list*<itemize} {\UseInstanceValues} { item-label-text = ?? ,
                                                             text-font = \footnotesize\sffamily\slshape }

% second level enumerates will get alph numbering:
%
\LDBenter{<enumerate*<enumerate}      {\UseInstanceValues} { item-label-text = \alph{enumi}) }

% for third and further levels we change the used instance, by
% overriding the used instance name (so enumerate becomes an itemize
% for testing). In addition we set the label text to show a boxed ``x''.

\LDBenter{<enumerate*<enumerate*<enumerate}      {\UseInstanceName} { itemize }
\LDBenter{<enumerate*<enumerate*<enumerate}      {\UseInstanceValues} { item-label-text = \fbox{x} }

% finally we do something special if an itemize starts immediately
% after a previous itemize finished. Not really sensible but for testing:

\LDBenter{itemize><itemize}           {\UseInstanceValues} { item-label-text = (cont.) }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Now once more: this is not a proposal how any of the interfaces
% should look like!
%
% It is an attempt to explore how the LDB and the template
% conceptually could work together. Once that is understood (and
% considered useful (with or without changes) then the next step would
% be to think about a designer interface for it and then for an
% implementation of it.


% dump the ldb state to see what got set up internally:

\dumpLaTeXstate{m3ldb003}

\OMIT
\begin{document}
\TIMO

\newcommand\sample{Some text for testing. It should show more than a single line. Here is the second sentence. }


\noindent Some text before. \sample
\begin{itemize}           % level 1 itemize
  \begin{item} \sample \sample
  \end{item}
  \begin{item} \sample \par \sample
  \end{item}
  \begin{item}
    Intro
    \begin{enumerate}       % level 2 enum
      \begin{item} foo (how does this look?)
      \end{item}
      \begin{item} bar
        \begin{enumerate}       % level 3 enum
          \begin{item} first inner enum
          \end{item}
          \begin{item} second inner enum
            \begin{enumerate}       % level 4 enum
              \begin{item} forth level enum
              \end{item}
              \begin{item} second forth level enum
              \end{item}
            \end{enumerate}
          \end{item}
        \end{enumerate}
      \end{item}
      \begin{item} baz
      \end{item}
    \end{enumerate}
    \begin{itemize}         % level 2 itemize
      \begin{item}
        some bla bla \sample \par \sample
        \begin{enumerate}     % level 3 enum
          \begin{item}
            \sample
            \begin{itemize}     % level 4 itemize
              \begin{item} more text \sample
              \end{item}
              \begin{item} more text
              \end{item}
            \end{itemize}
          \end{item}
          \begin{item}
            text text
          \end{item}
        \end{enumerate}
        \begin{item}
          Some intro
          \begin{itemize}       % level 3 itemize
           \begin{item} woah
           \end{item}
           \begin{item} isn't this nice?
           \end{item}
          \end{itemize}
        \end{item}
      \end{item}
    \end{itemize}
    \begin{itemize}         % level 2 itemize
      \begin{item} foo
      \end{item}
      \begin{item} bar \sample
      \end{item}
    \end{itemize}
    Some intermediate text
    \begin{itemize}         % level 2 itemize
      \begin{item} AB
      \end{item}
      \begin{item} CD
      \end{item}
    \end{itemize}
  \end{item}
  \begin{item} test
  \end{item}
\end{itemize}

Test   % some output in the end

\END



\begin{itemize}           % level 1 itemize
  \begin{enumerate}       % level 2 enum
  \end{enumerate}
  \begin{itemize}         % level 2 itemize
    \begin{enumerate}     % level 3 enum
      \begin{itemize}     % level 4 itemize
      \end{itemize}
    \end{enumerate}
    \begin{itemize}       % level 3 itemize
    \end{itemize}
  \end{itemize}
  \begin{itemize}         % level 2 itemize
  \end{itemize}
  \begin{itemize}         % level 2 itemize
  \end{itemize}
 end{itemize}




% \begin{enumerate}
% \item
%    Update the LDB with the ``class list'' associated with the new
%    document element.
% \item
