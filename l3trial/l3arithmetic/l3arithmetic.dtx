% \iffalse
%
%% File l3arithmetic.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id: l3arithmetic.dtx 2968 2011-11-20 06:03:34Z bruno $
  {L3 Experimental advanced arithmetic}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3arithmetic} package\\ Advanced arithmetic^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{\pkg{l3arithmetic} documentation}
%
% This package is a tentative collection of various functions
% on integers which could be useful to some niche users
% (\emph{e.g.} myself when developping \pkg{l3rand}), but
% should not go to the format.
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3arithmetic} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \subsection{Factorization}
%
% \begin{macro}[EXP]{\int_factor:n}
% \begin{macro}[EXP,aux]{\int_factor_aux:n}
% \begin{macro}[EXP,aux]{\int_factor_aux:w}
% \begin{macro}[EXP,aux]{\int_factor_aux:ww}
%   This expands to the factorization of its argument, with each
%   factor enclosed in braces, an item of the resulting token list.
%   The factors appear in descending order.
%   Negative integers have a trailing |{-1}| factor.
%   Zero raises an error.
%    \begin{macrocode}
\cs_new:Npn \int_factor:n #1
  { \exp_args:Nf \int_factor_aux:n { \int_eval:n {#1} } }
\cs_new:Npn \int_factor_aux:n #1
  {
    \int_compare:nNnTF {#1} = \c_zero
      { \msg_expandable_kernel_error:nn { int } { factor-zero } }
      {
        \int_compare:nNnTF {#1} < \c_zero
          { \exp_after:wN \int_factor_aux:w \use_none:n #1 ; {-1} }
          { \int_factor_aux:w #1 ; }
      }
  }
\cs_new:Npn \int_factor_aux:w #1 ;
  {
    \int_if_even:nTF {#1}
      { \exp_after:wN \int_factor_aux:w \int_use:N \__int_eval:w #1/2 ; {2} }
      {
        \int_compare:nNnF {#1} = \c_one
          { \int_factor_aux:ww 3 ; #1 ; }
      }
  }
\cs_new:Npn \int_factor_aux:ww #1 ; #2 ;
  {
    \int_compare:nNnTF { #1 } > { #2/#1 }
      { {#2} }
      {
        \int_compare:nNnTF { (#2/#1-1)*#1 } = { #2-#1 } % avoids overflow.
          {
            \exp_after:wN \int_factor_aux:ww
            \int_use:N \__int_eval:w #1 \exp_after:wN ;
            \int_use:N \__int_eval:w #2 / #1 ;
            {#1}
          }
          {
            \exp_after:wN \int_factor_aux:ww
            \int_use:N \__int_eval:w #1 + \c_two ;
            #2 ;
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Euler's totient function $\phi$}
%
% \begin{macro}[EXP]{\int_phi:n}
% \begin{macro}[EXP,aux]{\int_phi_aux:}
% \begin{macro}[EXP,aux]{\int_phi_aux:nn}
%    \begin{macrocode}
\cs_new:Npn \int_phi:n #1
  {
    \int_eval:n
      {
        \c_one
        \exp_last_unbraced:Nf \int_phi_aux:
          { \int_factor:n {#1} } \c_minus_one \q_stop
      }
  }
\cs_new:Npn \int_phi_aux: { \int_phi_aux:nn { \c_one } }
\cs_new:Npn \int_phi_aux:nn #1#2
  {
    \int_compare:nNnF {#2} > \c_zero { \use_none_delimit_by_q_stop:w }
    \int_compare:nNnTF {#1} = {#2} { * #2 } { * ( #2 - \c_one ) }
    \int_phi_aux:nn {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Number of divisors}
%
% \begin{macro}[EXP]{\int_divisors:n}
% \begin{macro}[EXP,aux]{\int_divisors_aux:}
% \begin{macro}[EXP,aux]{\int_divisors_aux:nn}
%
%    \begin{macrocode}
\cs_new:Npn \int_divisors:n #1
  {
    \int_eval:n
      {
        (
          \c_one
          \exp_last_unbraced:Nf \int_divisors_aux:
            { \int_factor:n {#1} } \c_minus_one \q_stop
        )
      }
  }
\cs_new:Npn \int_divisors_aux: { \int_divisors_aux:nn { \c_one } }
\cs_new:Npn \int_divisors_aux:nn #1#2
  {
    \int_compare:nNnF {#2} > \c_zero { \use_none_delimit_by_q_stop:w }
    \int_compare:nNnTF {#1} = {#2}
      { + \c_one }
      { )*(\c_two }
    \int_divisors_aux:nn {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Operations in $\mathbb{Z}_m$}
%
% \begin{macro}[EXP]{\int_add_mod:nnn}
%   $x+y \mod m$ without overflow.
%   The result of |\int_mod:nn {#1}{#3}| always has the same sign as |#1|,
%   and similarly for |#2|. If |#1| and |#2| have opposite signs, then
%   their remainder modulo |#3| also have opposite signs, and no overflow
%   can occur. Furthermore, the sum of the remainders is always strictly
%   bounded by |#3| in absolute value. If |#1| and |#2| have the same sign,
%   we prevent overflow by adding or subtracting |#3| to the intermediate
%   result |\int_mod:nn {#1}{#3}|. That changes the sign of the temporary
%   sum, and the previous remarks hold.
%    \begin{macrocode}
\cs_new:Npn \int_add_mod:nnn #1#2#3
  {
    \int_eval:n
      {
        \int_mod:nn {#1} {#3}
        \if_int_compare:w \__int_eval:w #2
          \if_int_compare:w \__int_eval:w #1 < \c_zero
            < \c_zero
            +
          \else:
            > \c_zero
            -
          \fi:
          \int_abs:n {#3}
        \fi:
        + \int_mod:nn {#2} {#3}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\int_mul_mod:nnn}
%   Attempt to getting $x*y \mod m$ without overflow.
%   Then we can get $x^n \mod m$.
%    \begin{macrocode}
% \cs_new:Npn \int_mul_mod:nnn #1#2#3
%   {
%     \int_mul_mod_aux:n {#3}
%     \exp_args:Nf \int_mul_mod_aux:n { \int_mod:nn {#2} {#3} }
%     \exp_args:Nf \int_mul_mod_aux:n { \int_mod:nn {#1} {#3} }
%     \int_mul_mod_aux:wnnnnnnnnn ;
%   }
% \cs_new:Npn \int_mul_mod_aux:n #1
%   {
%     \int_compare:nNnTF {#1} < \c_one_thousand_million
%       {
%         \exp_after:wN \int_mul_mod_aux:wNNNNNNw
%           \int_use:N \__int_eval:w \c_one_thousand_million +
%       }
%       { \int_mul_mod_aux:NNNNNNNw }
%     #1 ;
%   }
% \cs_new:Npn \int_mul_mod_aux:wNNNNNNw 1 #1#2#3 #4#5#6 #7; #8;
%   { #8 ; {#1#2#3} {#4#5#6} {#7} }
% \cs_new:Npn \int_mul_mod_aux:NNNNNNNw #1#2#3#4 #5#6#7 #8; #9;
%   { #9 ; {#1#2#3#4} {#5#6#7} {#8} }
% % \cs_new:Npn \int_mul_mod_aux:wnnnnnnnnn ; #1#2#3 #4#5#6 #7#8#9
% %   {
% %     #1*#4
% %     #2*#4 + #1*#5
% %     #3*#4 + #2*#5 + #1*#6
% %     #3*#5 + #2*#6
% %     #3*#6
% %   }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_kernel_new:nnn { int } { factor-zero } { Zero~cannot~be~factored. }
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex