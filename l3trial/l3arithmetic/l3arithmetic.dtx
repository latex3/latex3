% \iffalse
%
%% File l3arithmetic.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id: l3arithmetic.dtx 2968 2011-11-20 06:03:34Z bruno $
  {L3 Experimental advanced arithmetic}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3arithmetic} package\\ Advanced arithmetic^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{\pkg{l3arithmetic} documentation}
%
% This package is a tentative collection of various functions
% on integers which could be useful to some niche users
% (\emph{e.g.} myself when developping \pkg{l3rand}), but
% should not go to the format.
%
% \subsection{Factorization}
%
% \begin{function}[EXP]{\int_count_divisors:n}
%   \begin{syntax}
%     \cs{int_count_divisors:n} \Arg{intexpr}
%   \end{syntax}
%   Counts the number of divisors of the integer obtained from
%   evaluating the \meta{integer expression}, and leaves this
%   information in the input stream.  Negative numbers have the same
%   number of divisors as their absolute value.  Zero triggers an
%   (expandable) error, then leads to the same result as~$1$,
%   namely~$1$.
% \end{function}
%
% \begin{function}[EXP]{\int_factor:n}
%   \begin{syntax}
%     \cs{int_factor:n} \Arg{intexpr}
%   \end{syntax}
%   Factorizes the integer obtained from evaluating the \meta{integer
%     expression} and leaves the resulting prime factors in the input
%   stream.  The prime factors are returned in decreasing order, with
%   multiplicity, and each factor is braced.  Negative integers lead to
%   a result ending with the item~|{-1}|.  Zero triggers an (expandable)
%   error and an empty result, identical to the result for~$1$.
% \end{function}
%
% \begin{function}[EXP]{\int_gcd:nn}
%   \begin{syntax}
%     \cs{int_gcd:nn} \Arg{intexpr_1} \Arg{intexpr_2}
%   \end{syntax}
%   Evaluates the two \meta{integer expressions} and computes their
%   greatest common divisor, leaving the result in the input stream.
% \end{function}
%
% \begin{function}[EXP]{\int_lcm:nn}
%   \begin{syntax}
%     \cs{int_lcm:nn} \Arg{intexpr_1} \Arg{intexpr_2}
%   \end{syntax}
%   Evaluates the two \meta{integer expressions} and computes their
%   least common multiple, leaving the result in the input stream.
% \end{function}
%
% \begin{function}[EXP]{\int_phi:n}
%   \begin{syntax}
%     \cs{int_phi:n} \Arg{intexpr}
%   \end{syntax}
%   Applies Euler's totient function to the integer obtained from
%   evaluating the \meta{integer expression} and leaves the result in
%   the input stream.
% \end{function}
%
% \subsection{Modular arithmetic}
%
% \begin{function}[EXP]{\int_add_mod:nnn}
%   \begin{syntax}
%     \cs{int_add_mod:nnn} \Arg{intexpr_1} \Arg{intexpr_2} \Arg{modulo}
%   \end{syntax}
%   Evaluates the three integer expressions, then calculates the integer
%   remainder of dividing the sum of the first two expressions by the
%   third.  This is left in the input stream as an \meta{integer
%     denotation}.
%   \begin{texnote}
%     This function avoids the overflow that may occur if the
%     \meta{intexpr_1} and the \meta{intexpr_2} are both close to
%     \TeX{}'s maximum integer.
%   \end{texnote}
% \end{function}
%
% \begin{function}[EXP]{\int_mul_mod:nnn}
%   Missing, would be quite useful.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3arithmetic} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=int>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \subsection{Factorization}
%
% \begin{macro}[EXP]{\int_factor:n}
% \begin{macro}[EXP,aux]{\@@_factor:n}
% \begin{macro}[EXP,aux]{\@@_factor:w}
% \begin{macro}[EXP,aux]{\@@_factor:ww}
%   This expands to the factorization of its argument, with each
%   factor enclosed in braces, an item of the resulting token list.
%   The factors appear in descending order.
%   Negative integers have a trailing |{-1}| factor.
%   Zero raises an error.
%    \begin{macrocode}
\cs_new:Npn \int_factor:n #1
  { \exp_args:Nf \@@_factor:n { \int_eval:n {#1} } }
\cs_new:Npn \@@_factor:n #1
  {
    \int_compare:nNnTF {#1} = \c_zero
      { \__msg_kernel_expandable_error:nn { int } { factor-zero } }
      {
        \int_compare:nNnTF {#1} < \c_zero
          { \exp_after:wN \@@_factor:w \use_none:n #1 ; {-1} }
          { \@@_factor:w #1 ; }
      }
  }
\cs_new:Npn \@@_factor:w #1 ;
  {
    \int_if_even:nTF {#1}
      { \exp_after:wN \@@_factor:w \int_use:N \__int_eval:w #1/2 ; {2} }
      {
        \int_compare:nNnF {#1} = \c_one
          { \@@_factor:ww 3 ; #1 ; }
      }
  }
\cs_new:Npn \@@_factor:ww #1 ; #2 ;
  {
    \int_compare:nNnTF { #1 } > { #2/#1 }
      { {#2} }
      {
        \int_compare:nNnTF { (#2/#1-1)*#1 } = { #2-#1 } % avoids overflow.
          {
            \exp_after:wN \@@_factor:ww
            \int_use:N \__int_eval:w #1 \exp_after:wN ;
            \int_use:N \__int_eval:w #2 / #1 ;
            {#1}
          }
          {
            \exp_after:wN \@@_factor:ww
            \int_use:N \__int_eval:w #1 + \c_two ;
            #2 ;
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\int_phi:n}
% \begin{macro}[EXP, aux]{\@@_phi:}
% \begin{macro}[EXP, aux]{\@@_phi:nn}
%   Euler's totient function $\phi$.  Start with $1$, then multiply for
%   each prime factor $p$ by $p$ or $p-1$ depending on whether the
%   previous prime factor was also $p$.
%    \begin{macrocode}
\cs_new:Npn \int_phi:n #1
  {
    \int_eval:n
      {
        \c_one
        \exp_last_unbraced:Nf \@@_phi:
          { \int_factor:n {#1} } \c_minus_one \q_stop
      }
  }
\cs_new:Npn \@@_phi: { \@@_phi:nn { \c_one } }
\cs_new:Npn \@@_phi:nn #1#2
  {
    \int_compare:nNnF {#2} > \c_zero { \use_none_delimit_by_q_stop:w }
    \int_compare:nNnTF {#1} = {#2} { * #2 } { * ( #2 - \c_one ) }
    \@@_phi:nn {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\int_count_divisors:n}
% \begin{macro}[EXP, aux]{\@@_count_divisors:}
% \begin{macro}[EXP, aux]{\@@_count_divisors:nn}
%   Number of divisors.
%    \begin{macrocode}
\cs_new:Npn \int_count_divisors:n #1
  {
    \int_eval:n
      {
        (
          \c_one
          \exp_last_unbraced:Nf \@@_count_divisors:
            { \int_factor:n {#1} } \c_minus_one \q_stop
        )
      }
  }
\cs_new:Npn \@@_count_divisors: { \@@_count_divisors:nn { \c_one } }
\cs_new:Npn \@@_count_divisors:nn #1#2
  {
    \int_compare:nNnF {#2} > \c_zero { \use_none_delimit_by_q_stop:w }
    \int_compare:nNnTF {#1} = {#2}
      { + \c_one }
      { )*(\c_two }
    \@@_count_divisors:nn {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Euclid's algorithm}
%
% \begin{macro}[EXP]{\int_gcd:nn}
% \begin{macro}[EXP, aux]{\@@_gcd:ww}
%   First evaluate the expressions without their sign.  Then apply
%   Euclid's algorithm: if an operand is $0$, we're done, otherwise
%   compute |#2| modulo |#1| and recurse with that and |#1| as
%   arguments.
%    \begin{macrocode}
\cs_new:Npn \int_gcd:nn #1#2
  {
    \__int_value:w
      \exp_after:wN \@@_gcd:ww
      \int_use:N \__int_eval:w #1 \exp_after:wN ;
      \int_use:N \__int_eval:w #2 ;
    \exp_stop_f:
  }
\cs_new:Npn \@@_gcd:ww #1 ; #2 ;
  {
    \if_case:w #1 \exp_stop_f:
      #2
    \else:
      \exp_after:wN \@@_gcd:ww
      \__int_value:w \int_mod:nn {#2} {#1} ; #1 ;
    \fi:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\int_lcm:nn}
% \begin{macro}[EXP]{\@@_lcm:ww}
%   Evaluate the two operands.  If either one is zero, this is the
%   result.  Otherwise, compute $ab/\operatorname{gcd}(a,b)$, playing it
%   safe with overflow by first computing $a/\operatorname{gcd}(a,b)$,
%   an integer, then multiplying by $b$.
%    \begin{macrocode}
\cs_new:Npn \int_lcm:nn #1#2
  {
    \int_use:N \__int_eval:w
      \exp_after:wN \@@_lcm:ww
      \int_use:N \__int_eval:w #1 \exp_after:wN ;
      \int_use:N \__int_eval:w #2 ;
    \__int_eval_end:
  }
\cs_new:Npn \@@_lcm:ww #1 ; #2 ;
  {
    \if_int_compare:w #1 = \c_zero
      \c_zero
    \else:
      \if_int_compare:w #2 = \c_zero
        \c_zero
      \else:
        ( #1 / \@@_gcd:ww #1 ; #2 ; ) * #2
      \fi:
    \fi:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Operations in $\mathbb{Z}_m$}
%
% \begin{macro}[EXP]{\int_add_mod:nnn}
%   Computing $x+y \mod m$ without overflow.  The result of
%   \cs{int_mod:nn}~|{#1}{#3}| always has the same sign as~|#1|, and
%   similarly for~|#2|.  If~|#1| and~|#2| have opposite signs, then
%   their remainder modulo~|#3| also have opposite signs, and no
%   overflow can occur.  Furthermore, the sum of the remainders is
%   always strictly bounded by~|#3| in absolute value.  If~|#1| and~|#2|
%   have the same sign, we prevent overflow by adding or
%   subtracting~|#3| to the intermediate result
%   \cs{int_mod:nn}~|{#1}{#3}|.  That changes the sign of the temporary
%   sum, and the previous remarks hold.
%    \begin{macrocode}
\cs_new:Npn \int_add_mod:nnn #1#2#3
  {
    \int_eval:n
      {
        \int_mod:nn {#1} {#3}
        \if_int_compare:w \__int_eval:w #2
          \if_int_compare:w \__int_eval:w #1 < \c_zero
            < \c_zero
            +
          \else:
            > \c_zero
            -
          \fi:
          \int_abs:n {#3}
        \fi:
        + \int_mod:nn {#2} {#3}
      }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \begin{macro}[EXP]{\int_mul_mod:nnn}
%   Attempt to getting $x*y \mod m$ without overflow.
%   Then we can get $x^n \mod m$.
%    \begin{macrocode}
\cs_new:Npn \int_mul_mod:nnn #1#2#3
  {
    \@@_mul_mod:n {#3}
    \exp_args:Nf \@@_mul_mod:n { \int_mod:nn {#2} {#3} }
    \exp_args:Nf \@@_mul_mod:n { \int_mod:nn {#1} {#3} }
    \@@_mul_mod:wnnnnnnnnn ;
  }
\cs_new:Npn \@@_mul_mod:n #1
  {
    \int_compare:nNnTF {#1} < \c_one_thousand_million
      {
        \exp_after:wN \@@_mul_mod:wNNNNNNw
          \int_use:N \__int_eval:w \c_one_thousand_million +
      }
      { \@@_mul_mod:NNNNNNNw }
    #1 ;
  }
\cs_new:Npn \@@_mul_mod:wNNNNNNw 1 #1#2#3 #4#5#6 #7; #8;
  { #8 ; {#1#2#3} {#4#5#6} {#7} }
\cs_new:Npn \@@_mul_mod:NNNNNNNw #1#2#3#4 #5#6#7 #8; #9;
  { #9 ; {#1#2#3#4} {#5#6#7} {#8} }
\cs_new:Npn \@@_mul_mod:wnnnnnnnnn ; #1#2#3 #4#5#6 #7#8#9
  {
    #1*#4
    #2*#4 + #1*#5
    #3*#4 + #2*#5 + #1*#6
    #3*#5 + #2*#6
    #3*#6
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\__msg_kernel_new:nnn { int } { factor-zero } { Zero~cannot~be~factored. }
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex