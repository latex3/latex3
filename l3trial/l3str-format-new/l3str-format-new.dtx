% \iffalse meta-comment
%
%% File: l3str-format-new.dtx (C) Copyright 2014 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3str-format-new bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX3 Project.
%%
%% -----------------------------------------------------------------------
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental Formatting as Strings}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \tableofcontents
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3str-format-new} package\\ LaTeX3 String Formatting^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Keys for string formatting}
%
% This module provides tools to turn various datatypes into strings.
% The formatting can be controlled by many options, given as key--value
% pairs.
%
% \begin{function}{width}
%   \begin{syntax}
%     |width| = \meta{non-negative integer}
%   \end{syntax}
%   Minimum width after formatting.
% \end{function}
%
% \begin{function}{fill}
%   \begin{syntax}
%     |fill| = \meta{character}
%   \end{syntax}
%   The \meta{character} used to reach the minimum \meta{width} if
%   needed.
% \end{function}
%
% \begin{function}{alignment}
%   \begin{syntax}
%     |alignment| = \Arg{character}
%   \end{syntax}
%   The \meta{character} can be |<| for left-alignment, |^| for
%   centering, |>| for right-alignment, or |=| for inserting the filling
%   characters between the sign and body of the formatted material.
%   Note that a value of |=| must be given within braces:
%   |alignment={=}|.
% \end{function}
%
% \begin{function}{style}
%   \begin{syntax}
%     |style| = \meta{character}
%   \end{syntax}
%   The \meta{character} should be one of |efg| for floating points.
% \end{function}
%
% \begin{function}{precision}
%   \begin{syntax}
%     |precision| = \meta{non-negative integer}
%   \end{syntax}
%   Number of significant digits/characters.
% \end{function}
%
% \subsection{Keys for numeric types}
%
% \begin{function}{+}
%   \begin{syntax}
%     |+| = \meta{string}
%   \end{syntax}
%   The \meta{string} will be inserted in front of positive numbers.
%   The default value is empty.  This \meta{string} is also used
%   for~$+0$, unless the key |0-sign| is given.  The same \meta{string}
%   is used for $+\infty$, unless the key |inf-sign| is given.
% \end{function}
%
% \begin{function}{-}
%   \begin{syntax}
%     |-| = \meta{string}
%   \end{syntax}
%   The \meta{string} will be inserted in front of (non-zero) negative
%   numbers.  The default value is~|-|.  This \meta{string} is also used
%   for~$-0$ unless the key |-0-sign| is given, and for $-\infty$ unless
%   the key |-inf-sign| is given.
% \end{function}
%
% \begin{function}{+0-sign, -0-sign, +inf-sign, -inf-sign, nan-sign}
%   \begin{syntax}
%     |+0-sign| = \meta{string}
%   \end{syntax}
%   The \meta{string} is used as the \meta{sign} of $+0$, $-0$,
%   $+\infty$, $-\infty$, or \texttt{nan} respectively.  The key
%   |+0-sign| applies to both the integer~$0$ and the floating
%   point~$+0$.  If those keys are not given, the default for |+0-sign|
%   is the value of |+|, for |-0-sign| is |-|, for |+inf-sign| is |+|,
%   for |-inf-sign| is |-|, and for |nan-sign| is empty.
% \end{function}
%
% \begin{function}{0-body, inf-body, nan-body}
%   \begin{syntax}
%     |0-body| = \meta{string}
%   \end{syntax}
%   Controls the formatting of $\pm 0$, $\pm\infty$, or \texttt{nan}.
%   Formatting $\pm 0$ yields the sign |+0-sign| or |-0-sign| followed
%   by |0-body| (default depends on the \meta{style}).  Formatting
%   $\pm\infty$ yields the sign |+inf-sign| or |-inf-sign| followed by
%   |inf-body| (default: |inf|).  Formatting \texttt{nan} yields the
%   sign |nan-sign| followed by |nan-body| (default: |nan|).
% \end{function}
%
% \subsection{Other syntaxes}
%
% \begin{function}{python}
%   Not implemented anymore.
%   \begin{syntax}
%     |python| = [[\meta{fill}]\meta{alignment}]
%     [\meta{sign}] [\meta{width}] [.\meta{precision}] [\meta{style}]
%   \end{syntax}
%   Each $[\ldots]$ denotes an independent optional part.  The syntax
%   follows that of Python's \texttt{format} built-in function
%   \begin{itemize}
%     \item \meta{fill} can be any character: it is assumed to be
%       present whenever the second character of the \meta{format
%         specification} is a valid \meta{alignment} character.
%     \item \meta{alignment} can be |<|~(left alignment), |>|~(right
%       alignment), |^|~(centering), or |=|~(insert padding between sign
%       and body).
%     \item \meta{sign} is allowed for numeric styles; it can be
%       |+|~(show a sign for positive and negative numbers), |-|~(only
%       put a sign for negative numbers), or a space~(show a space or
%       a~|-|).
%     \item \meta{width} is the minimum number of characters of the
%       result: if the result is naturally shorter than this
%       \meta{width}, then it is padded with copies of the character
%       \meta{fill}, with a position depending on the choice of
%       \meta{alignment}.  If the result is naturally longer, it is not
%       truncated.
%     \item \meta{precision}, whose presence is indicated by a period,
%       can have different meanings depending on the style.
%     \item \meta{style} is one character, which controls how the given
%       data should be formatted.  The list of allowed \meta{styles}
%       depends on the type.
%   \end{itemize}
% \end{function}
%
% \begin{function}{C}
%   Uses C |printf| syntax.  Not implemented.
% \end{function}
%
% \section{Formatting various data-types}
%
% \begin{function}[EXP]{\tl_format:Nn, \tl_format:cn, \tl_format:nn}
%   \begin{syntax}
%     \cs{tl_format:nn} \Arg{token list} \Arg{format specification}
%   \end{syntax}
%   Converts the \meta{token list} to a string according to the
%   \meta{format specification}.  The \meta{style}, if given, must
%   be~|s|.  If \meta{precision} is given, all characters of the string
%   representation of the \meta{token list} beyond the first
%   \meta{precision} characters are discarded.
% \end{function}
%
% \begin{function}[EXP]{\seq_format:Nn, \seq_format:cn}
%   \begin{syntax}
%     \cs{seq_format:Nn} \Arg{sequence} \Arg{format specification}
%   \end{syntax}
%   Converts each \meta{item} in the \meta{sequence} to a string using
%   \cs{tl_format:nn} \Arg{item} \Arg{format specification}, and
%   concatenates the results.
% \end{function}
%
% \begin{function}[EXP]{\int_format:nn}
%   \begin{syntax}
%     \cs{int_format:nn} \Arg{intexpr} \Arg{format specification}
%   \end{syntax}
%   Evaluates the \meta{integer expression} and converts the result to a
%   string according to the \meta{format specification}.  The
%   \meta{precision} must not be given.  The \meta{style} can be |b| for
%   binary output, |d| for decimal output (this is the default), |o| for
%   octal output, |X| for hexadecimal output (using capital letters).
% \end{function}
%
% \begin{function}[EXP]{\fp_format:nn}
%   \begin{syntax}
%     \cs{fp_format:nn} \Arg{fpexpr} \Arg{format specification}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and converts the
%   result to a string according to the \meta{format specification}.
%   The \meta{precision} defaults to $6$.  The \meta{style} can be
%   \begin{itemize}
%     \item |e| for scientific notation, with one digit before and
%       \meta{precision} digits after the decimal separator, and an
%       integer exponent, following |e|;
%     \item |f| for a fixed point notation, with \meta{precision} digits
%       after the decimal separator and no exponent;
%     \item |g| for a general format, which uses style |f| for numbers
%       in the range $[10^{-4}, 10^{\meta{precision}})$ and style |e|
%       otherwise, then trims trailing zeros and a trailing decimal dot.
%   \end{itemize}
% \end{function}
%
% \section{Possibilities, and things to do}
%
% \begin{itemize}
%   \item Note somewhere that the internal \cs{__tl_trim_spaces:nn} is
%     used!  Fix that.
%   \item Provide a token list formatting \meta{style} which keeps the
%     last \meta{precision} characters rather than the first
%     \meta{precision}.
%   \item Use the correct rounding mode.
% \end{itemize}
%
% \section{Internal commands}
%
% \begin{function}[int,EXP]{\@@_keyval_parse:NNn}
%   \begin{syntax}
%     \cs{@@_keyval_parse:NNn} \meta{function_1} \meta{function_2} \Arg{key--value list}
%   \end{syntax}
%   Parses the \meta{key--value list} into a series of \meta{keys} and
%   associated \meta{values}, or keys alone (if no \meta{value} was
%   given).  Keys given with no value are processed using the
%   \meta{function_1}, which receives a single braced argument, while
%   keys given with a value are processed with \meta{function_2}, which
%   receives two braced arguments.  The order of the \meta{keys} in the
%   \meta{key--value list} is preserved.  The precise behaviour is the
%   same as the non-expandable function \cs{keyval_parse:NNn} from
%   \pkg{l3keys}, except that the \meta{functions} are called on each
%   \meta{key} or \meta{key}--\meta{value} as it is found, rather than
%   parsing the whole \meta{key--value list} before the first call to
%   the \meta{functions}.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3str-format} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=str_format>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\RequirePackage{l3str}
%</package>
%    \end{macrocode}
%
% \subsection{Helpers}
%
% \begin{macro}[EXP]{\use:nf}
%    \begin{macrocode}
\cs_generate_variant:Nn \use:nn { nf }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\tl_if_single_token:oTF}
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_single_token:nTF { o }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Key--value pairs}
%
% \begin{macro}[aux,EXP]{\@@_keyval_strip:w, \@@_keyval_strip_aux:wn}
%   \cs{@@_keyval_strip_do:nn} receives |{| \cs{q_mark} \meta{token
%       list} |}| as its first argument, trims spaces from both ends of
%   the \meta{token list} thanks to \cs{__tl_trim_spaces:nn}, and
%   removes one set of braces, then feeds the result to its second
%   argument as a brace group.
%    \begin{macrocode}
\cs_new:Npn \@@_keyval_strip_do:nn #1
  {
    \__tl_trim_spaces:nn {#1}
      { \exp_last_unbraced:No \@@_keyval_strip_aux:wn } \q_stop
  }
\cs_new:Npn \@@_keyval_strip_aux:wn #1 \q_stop #2 { #2 {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int,EXP]{\@@_keyval_parse:NNn}
% \begin{macro}[aux,EXP]
%   {
%     \@@_keyval_loop:NNw,
%     \@@_keyval_split:wwwNNw,
%     \@@_keyval_item:Nww,
%     \@@_keyval_pair:Nwww,
%     \@@_keyval_many:ww
%   }
%    \begin{macrocode}
\cs_new:Npn \@@_keyval_parse:NNn #1#2#3
  {
    \@@_keyval_loop:NNw #1#2 \q_mark
    #3 , \q_recursion_tail , \q_recursion_stop
  }
\cs_new:Npn \@@_keyval_loop:NNw #1#2#3 ,
  {
    \exp_args:No \quark_if_recursion_tail_stop:n { \use_none:n #3 }
    \@@_keyval_split:wwwNNw #3 \q_mark
    , \@@_keyval_many:ww =
    , \@@_keyval_pair:Nwww #2 =
    , \@@_keyval_item:Nww #1 \q_stop
    \@@_keyval_loop:NNw #1#2 \q_mark
  }
\cs_new:Npn \@@_keyval_split:wwwNNw #1 = #2 = #3 , #4#5#6 \q_stop
  { #4 #5 #1 = \q_mark #2 = #3 \q_stop }
\cs_new:Npn \@@_keyval_item:Nww #1#2 \q_mark , #3 \q_stop
  {
    \tl_if_blank:oF { \use_none:n #2 }
      { \@@_keyval_strip_do:nn {#2} {#1} }
  }
\cs_new:Npn \@@_keyval_pair:Nwww #1#2 = #3 \q_mark , #4 \q_stop
  {
    \@@_keyval_strip_do:nn {#3}
      { \@@_keyval_strip_do:nn {#2} #1 }
  }
\cs_new:Npn \@@_keyval_many:ww
    = \q_mark #1 \q_mark #2 \q_mark \q_stop
  {
    \__msg_kernel_expandable_error:nnn
      { keyval } { extra-equals } { #1 #2 }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\__msg_kernel_new:nnn { keyval } { extra-equals }
  { Two~'='~in~'#1' }
%    \end{macrocode}
%
% \subsection{Helpers for expandable values}
%
% \begin{macro}[aux]{\s_@@}
%    \begin{macrocode}
\cs_new_eq:NN \s_@@ \scan_stop:
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_val_frame:n}
%    \begin{macrocode}
\cs_new:Npn \@@_val_frame:n #1
  {
    #1
    \use_none_delimit_by_q_stop:w \s_@@ \q_stop
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,TF,EXP]{\@@_val_if_set:n}
% \begin{macro}[aux,EXP]
%   {\@@_val_if_set_auxi:nnn, \@@_val_if_set_auxii:nwNw}
%    \begin{macrocode}
\cs_new:Npn \@@_val_if_set:nTF #1#2 \s_@@ #3 \q_stop
  {
    \@@_val_if_set_auxi:nnn {#1} #3 {#1} { }
    \q_mark \use_i:nn \q_mark \use_ii:nn \q_stop
    #2 \s_@@ #3 \q_stop
  }
\cs_new:Npn \@@_val_if_set:nT #1#2 { \@@_val_if_set:nTF {#1} {#2} { } }
\cs_new:Npn \@@_val_if_set:nF #1   { \@@_val_if_set:nTF {#1} { } }
\cs_new:Npn \@@_val_if_set_auxi:nnn #1#2#3
  {
    \str_if_eq:nnTF {#1} {#2}
      { \@@_val_if_set_auxii:nwNw }
      { \@@_val_if_set_auxi:nnn {#1} }
  }
\cs_new:Npn \@@_val_if_set_auxii:nwNw #1#2 \q_mark #3#4 \q_stop {#3}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP,TF]{\@@_val_do:nn, \@@_val_do:fn}
% \begin{macro}[aux,EXP]{\@@_val_do:nn}
% \begin{macro}[aux,EXP]{\@@_val_do_auxi:nn, \@@_val_do_auxii:nwn}
%    \begin{macrocode}
\prg_new_conditional:Npnn \@@_val_do:nn #1#2 { T , F , TF }
  {
    \@@_val_if_set:nTF {#1}
      { \@@_val_do:nn {#1} {#2} \prg_return_true: }
      { \prg_return_false: }
  }
\cs_new:Npn \@@_val_do:nn #1#2 \s_@@ #3 \q_stop
  {
    \@@_val_do_auxi:nn {#1} #3 {#1} { } \q_stop
    #2 \s_@@ #3 \q_stop
  }
\cs_new:Npn \@@_val_do_auxi:nn #1#2#3
  {
    \str_if_eq:nnTF {#1} {#2}
      { \@@_val_do_auxii:nwn {#3} }
      { \@@_val_do_auxi:nn {#1} }
  }
\cs_new:Npn \@@_val_do_auxii:nwn #1#2 \q_stop #3 { #3 {#1} }
\cs_generate_variant:Nn \@@_val_do:nn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_val_unset:n}
% \begin{macro}[aux,EXP]{\@@_val_unset_aux:n, \@@_val_unset_auxii:nnnww}
%    \begin{macrocode}
\cs_new:Npn \@@_val_unset:n #1
  { \@@_val_if_set:nT {#1} { \@@_val_unset_aux:n {#1} } }
\cs_new:Npn \@@_val_unset_aux:n #1#2 \s_@@ #3 \q_stop
  { \@@_val_unset_auxii:nnnww {#1} #3 \q_mark #2 \s_@@ \q_stop }
\cs_new:Npn \@@_val_unset_auxii:nnnww #1#2#3#4 \q_mark #5 \q_stop
  {
    \str_if_eq:nnTF {#1} {#2}
      { #5 #4 \q_stop }
      {
        \@@_val_unset_auxii:nnnww
          {#1} #4 \q_mark #5 {#2} {#3} \q_stop
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_val_set_if_new:nn, \@@_val_set_if_new:no}
% \begin{macro}[aux,EXP]{\@@_val_set:nn, \@@_val_set:no, \@@_val_set:ff}
% \begin{macro}[aux,EXP]{\@@_val_set_new_aux:nn}
%    \begin{macrocode}
\cs_new:Npn \@@_val_set_if_new:nn #1#2
  {
    \@@_val_if_set:nF {#1}
      { \exp_args:No \@@_val_set_new_aux:nn { \tl_to_str:n {#1} } {#2} }
  }
\cs_new:Npn \@@_val_set:nn #1
  {
    \@@_val_unset:n {#1}
    \exp_args:No \@@_val_set_new_aux:nn { \tl_to_str:n {#1} }
  }
\cs_new:Npn \@@_val_set_new_aux:nn #1#2#3 \s_@@ #4 \q_stop
  { #3 \s_@@ {#1} {#2} #4 \q_stop }
\cs_generate_variant:Nn \@@_val_set:nn { no , ff }
\cs_generate_variant:Nn \@@_val_set_if_new:nn { no }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_val_set_eq:nnF}
%    \begin{macrocode}
\cs_new:Npn \@@_val_set_eq:nnF #1#2
  {
    \@@_val_if_set:nTF {#2}
      {
        \@@_val_do:nn {#2}
          { \@@_val_set:nn {#1} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_val_end:n}
%    \begin{macrocode}
\cs_new:Npn \@@_val_end:n #1#2 \s_@@ #3 \q_stop {#1}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Defining keys for \pkg{str-format}}
%
% \begin{macro}[aux,EXP]{\@@_parse:n}
%   This must be called within a \cs{@@_val_frame:n}
%    \begin{macrocode}
\cs_new_nopar:Npn \@@_parse:n
  { \@@_keyval_parse:NNn \@@_key:n \@@_key:nn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_key:n, \@@_key:nn}
% \begin{macro}[aux,EXP]{\@@_key_aux:nn}
%   The \texttt{keyval} processing does not turn \meta{keys} to strings,
%   and weird things would happen if they got expanded differently at
%   various places in the code, so we turn \meta{keys} into strings
%   right away.
%    \begin{macrocode}
\cs_new:Npn \@@_key:n #1 { \@@_key:nn {#1} { } }
\cs_new:Npn \@@_key:nn #1
  { \exp_args:No \@@_key_aux:nn { \tl_to_str:n {#1} } }
\cs_new:Npn \@@_key_aux:nn #1#2
  {
    \cs_if_exist_use:cTF { @@ / #1 :nn }
      { {#1} {#2} }
      {
        \__msg_kernel_expandable_error:nnnn
          { str-format } { unknown-key } {#1} {#2}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@/style:nn, \@@/fill:nn, \@@/alignment:nn}
%   A few keys whose value must be a single character.  The
%   \texttt{style} and \texttt{alignment} are subject to additional
%   restrictions which depend on the type of variable hence are catered
%   for later on.
%    \begin{macrocode}
\cs_new:cpn { @@ / style :nn } #1#2
  {
    \tl_if_single_token:oTF { \tl_to_str:n {#2} }
      {
        \@@_val_set:ff { \str_head:n {#1} }
          {
            \tl_if_blank:oTF { \tl_to_str:n {#2} }
              { \c_catcode_other_space_tl }
              { \tl_to_str:n {#2} }
          }
      }
      {
        \__msg_kernel_expandable_error:nnnn
          { str-format } { invalid-value } {#1} {#2}
      }
  }
\cs_new_eq:cc { @@ / fill :nn } { @@ / style :nn }
\cs_new_eq:cc { @@ / alignment :nn } { @@ / style :nn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@/width:nn, \@@/precision:nn}
%   Keys with non-negative integer values.
%    \begin{macrocode}
\cs_new:cpn { @@ / width :nn } #1#2
  {
    \@@_val_set:ff { \str_head:n {#1} } { \int_eval:n {#2} }
    \@@_val_do:fn { \str_head:n {#1} } \int_compare:nNnT < \c_zero
      {
        \@@_val_do:fn { \str_head:n {#1} }
          {
            \__msg_kernel_expandable_error:nnnn
              { str-format } { invalid-value } {#1}
          }
      }
  }
\cs_new_eq:cc { @@ / precision :nn } { @@ / width :nn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]
%   {
%     \@@/+:nn, \@@/-:nn,
%     \@@/+0-sign:nn, \@@/-0-sign:nn, \@@/0-body:nn,
%     \@@/+inf-sign:nn, \@@/-inf-sign:nn, \@@/inf-body:nn,
%     \@@/nan-sign:nn, \@@/nan-body:nn
%   }
%   Keys with string values.
%    \begin{macrocode}
\cs_new:cpn { @@ / + :nn } #1#2
  { \@@_val_set:no {#1} { \tl_to_str:n {#2} } }
\cs_new_eq:cc { @@ / - :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ / +  0-sign :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ / -  0-sign :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ /    0-body :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ / +inf-sign :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ / -inf-sign :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ /  inf-body :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ /  nan-sign :nn } { @@ / + :nn }
\cs_new_eq:cc { @@ /  nan-body :nn } { @@ / + :nn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@/sign:nn}
%    \begin{macrocode}
 % \cs_new:cpn { @@ / sign :nn } #1#2
 %   {
 %     \str_case:nnF {#2}
 %       {
 %         {   } { \@@_key:nn { + } {   } }
 %         { - } { \@@_key:nn { + } {   } }
 %         { ~ } { \@@_key:nn { + } { ~ } }
 %         { + } { \@@_key:nn { + } { + } }
 %       }
 %       {
 %         \__msg_kernel_expandable_error:nnnn
 %           { str-format } { invalid-value } {#1} {#2}
 %       }
 %   }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\__msg_kernel_new:nnn { str-format } { unknown-key }
  { Unknown~key~'#1'~for~string~format. }
\__msg_kernel_new:nnn { str-format } { invalid-value }
  { Key~'#1'~given~invalid~value~'#2'. }
\__msg_kernel_new:nnn { str-format } { invalid-style }
  { The~style~'#1'~is~invalid~for~type~'#2'. }
%    \end{macrocode}
%
% \subsection{Final alignment}
%
% \begin{macro}[aux,EXP]{\@@_align:n, \@@_align:f}
% \begin{macro}[aux,EXP]
%   {
%     \@@_align_aux:nnnnn, \@@_align_<:nnnn, \@@_align_^:nnnn,
%     \@@_align_>:nnnn , \@@_align_=:nnnn
%   }
%   Importantly, \cs{@@_align:n} ends with a call to \cs{@@_val_end:n},
%   hence any further code in the same \cs{@@_val_frame:n} is ignored.
%   The auxiliary \cs{@@_align_aux:nnnnn} receives the alignment type,
%   followed by the target width, the padding character, the \meta{sign}
%   and the \meta{body}.  Each of the other four auxiliaries receives
%   the amount of padding required, the padding character, the
%   \meta{sign}, and the \meta{body}.  For the alignment~|^|, if the
%   number of padding characters is odd, we add one more after than
%   before.
%    \begin{macrocode}
\cs_new_nopar:Npn \@@_align:n
  {
    \@@_val_do:nn { S }
      {
        \@@_val_set_if_new:no { f } { \c_catcode_other_space_tl }
        \@@_val_do:nn { f }
          {
            \@@_val_do:nn { w }
              {
                \@@_val_set_if_new:nn { a } { < }
                \@@_val_do:nn { a }
                  { \@@_align_aux:nnnnn }
              }
          }
      }
  }
\cs_generate_variant:Nn \@@_align:n { f }
\cs_new:Npn \@@_align_aux:nnnnn #1#2#3#4#5
  {
    \@@_val_end:n
      {
        \exp_args:Nf \tl_to_str:n
          {
            \cs_if_exist:cTF { @@_align_#1:nnnn }
              { \exp_args:Nc \exp_args:Nf { @@_align_#1:nnnn } }
              {
                \__msg_kernel_expandable_error:nnnn
                  { str-format } { invalid-value } { alignment } {#1}
                \exp_args:Nc \exp_args:Nf { @@_align_<:nnnn }
              }
              { \int_max:nn { 0 } { #2 - \str_count:n { #4 #5 } } }
              {#3}
              {#4}
              {#5}
          }
      }
  }
\cs_new:cpn { @@_align_<:nnnn } #1#2#3#4
  { \use:nf { #3 #4 } { \prg_replicate:nn {#1} {#2} } }
\cs_new:cpn { @@_align_^:nnnn } #1#2#3#4
  {
    \use:nf
      { \prg_replicate:nn { #1 - #1 / 2 } {#2} #3 #4 }
      { \prg_replicate:nn { #1 / 2 } {#2} }
  }
\cs_new:cpn { @@_align_>:nnnn } #1#2#3#4
  { \prg_replicate:nn {#1} {#2} #3 #4 }
\cs_new:cpn { @@_align_=:nnnn } #1#2#3#4
  { \use:nf {#3} { \prg_replicate:nn {#1} {#2} } #4 }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Floating point helper}
%
% \begin{macro}[aux,EXP]{\@@_fp_split:nN}
% \begin{macro}[aux,EXP]
%   {\@@_fp_split_auxi:Nwww, \@@_fp_split_auxii:NwwwnN}
%    \begin{macrocode}
\group_begin:
  \char_set_catcode_other:N \E
  \tex_lowercase:D
    {
      \cs_new:Npn \@@_fp_split:nN #1
        {
          \exp_last_unbraced:Nf \@@_fp_split_auxi:Nwww
            { \fp_to_scientific:n {#1} } E 0 E \q_stop
        }
      \cs_new:Npn \@@_fp_split_auxi:Nwww #1#2 E #3 E #4 \q_stop
        {
          \token_if_eq_charcode:NNTF - #1
            { \@@_fp_split_auxii:NwwwnN }
            { \@@_fp_split_auxii:NwwwnN + }
            #1 #2 . . \q_stop
          {#3}
        }
      \cs_new:Npn \@@_fp_split_auxii:NwwwnN
          #1#2 . #3 . #4 \q_stop #5#6 { #6 #1 #2 {#3} {#5} }
    }
\group_end:
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Floating point formatting}
%
% \begin{macro}[EXP]{\fp_format:nn}
% \begin{macro}[aux,EXP]{\@@_fp_dispatch:nnn}
%   Parse the format specification~|#2| and set some default values:
%   align to the right, precision~$6$, style~|g|.  Then evaluate the
%   floating-point expression and dispatch depending on the style |e|,
%   |f| or~|g|, as the rounding required by the \meta{precision}
%   parameter depends on the style, and rounding can turn a non-zero
%   finite floating point into $\pm 0$ or $\pm\infty$.
%    \begin{macrocode}
\cs_new:Npn \fp_format:nn #1#2
  {
    \@@_val_frame:n
      {
        \@@_parse:n {#2}
        \@@_val_set_if_new:nn { a } { > }
        \@@_val_set_if_new:nn { p } { 6 }
        \@@_val_set_if_new:nn { s } { g }
        \@@_val_do:nn { p }
          {
            \@@_val_do:nn { s }
              {
                \exp_args:Nf \@@_fp_dispatch:nnn
                  { \fp_to_tl:n {#1} }
              }
          }
      }
  }
\cs_new:Npn \@@_fp_dispatch:nnn #1#2
  {
    \cs_if_exist_use:cF { @@_fp_#2:nn }
      {
        \__msg_kernel_expandable_error:nnnn
          { str-format } { invalid-style } {#2} { fp }
        \@@_fp_g:nn
      }
    {#1}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_fp_special:nF}
% \begin{macro}[aux,EXP]{\@@_fp_special_aux:nn}
%   This function receives |inf|, |-inf| or |nan| and calls
%   \cs{@@_align:n} after setting~|S| correctly.  The result does not
%   depend on the \meta{style}.  For |inf|, the result is the value of
%   |+inf-sign| (or of~|+|) followed by the value of |inf-body|.  Same
%   for |-inf| with the keys |-inf-sign| and~|-| instead.  The sign of
%   |nan| can only come from |nan-sign|.
%    \begin{macrocode}
\cs_new:Npn \@@_fp_special:nF #1
  {
    \str_case:nnF {#1}
      {
        {  inf } { \@@_fp_special_aux:nn { + } { inf } }
        { -inf } { \@@_fp_special_aux:nn { - } { inf } }
        {  nan } { \@@_fp_special_aux:nn {   } { nan } }
      }
  }
\cs_new:Npn \@@_fp_special_aux:nn #1#2
  {
    \@@_val_set_eq:nnF { S } { #1#2-sign }
      {
        \tl_if_empty:nF {#1}
          { \@@_val_set_eq:nnF { S } {#1} { } }
      }
    \@@_val_do:nnF { #2-body } { \@@_align:n }
      { \@@_align:n {#2} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_fp_sign:N, \@@_fp_zero:NN}
%   These two functions are always called one after the other, and do
%   not depend on the \meta{style}.  The \meta{sign} is the value of the
%   key |+| or~|-| (depending on~|#1|), where |+|~defaults to being
%   empty and |-|~defaults to~|-|.  If the number is~$\pm 0$ and the
%   corresponding key |+0-sign| or |-0-sign| is set, then that is used
%   instead.  Once the sign~|S| is found, if the number is zero and the
%   key |0-body| is set, its value is aligned using \cs{@@_align:n}.
%   Otherwise carry on to the \meta{style}-specific code.
%    \begin{macrocode}
\cs_new:Npn \@@_fp_sign:N #1
  {
    \@@_val_set_eq:nnF { S } {#1}
      {
        \token_if_eq_charcode:NNT - #1
          { \@@_val_set:nn { S } { - } }
      }
  }
\cs_new:Npn \@@_fp_zero:NN #1#2
  {
    \token_if_eq_charcode:NNT 0 #2
      {
        \@@_val_set_eq:nnF { S } { #1 0-sign } { }
        \@@_val_do:nnF { 0-body } { \@@_align:n } { }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_fp_e:nn}
% \begin{macro}[aux,EXP]{\@@_fp_e_auxi:nn, \@@_fp_e_auxii:NNnnn}
%   First filter out floating point numbers which are infinite or
%   \texttt{nan}, as the rounding step would blow up.  For finite
%   floating point numbers, the construction \cs{@@_fp_split:nN} |{#1}|
%   \cs{use_iv:nnnn} extracts the (scientific notation) exponent
%   of~|#1|, and we round to $1+|#2|$ significant figures.  If the
%   \meta{precision} |#2| is negative or zero, we replace it by~$0$,
%   hence we round to~$1$ significant figure.  Rounding may make the
%   floating point infinite, so we filter this case out again (for
%   instance, the largest finite number is rounded to $+\infty$ if
%   \meta{precision} is less than~$15$).  Then split into a \meta{sign},
%   a \meta{first digit} (zero only if the rounded floating point number
%   is zero), \Arg{more digits}, an \Arg{exponent}, and keep the
%   \Arg{precision}.  Using those five arguments, the \texttt{auxii}
%   auxiliary finds the final \meta{sign}, filters out zero if needed,
%   and constructs the result, which has the appropriate number of zeros
%   so that there are |#5|~digits after the decimal dot (absent for zero
%   precision), before calling \cs{@@_align:n}.
%    \begin{macrocode}
\cs_new:Npn \@@_fp_e:nn #1#2
  {
    \@@_fp_special:nF {#1}
      {
        \exp_args:Nf \@@_fp_e_auxi:nn
          {
            \fp_to_tl:n
              {
                round ( #1 , \int_max:nn {0} {#2}
                  - \@@_fp_split:nN {#1} \use_iv:nnnn )
              }
          }
          {#2}
      }
  }
\cs_new:Npn \@@_fp_e_auxi:nn #1#2
  {
    \@@_fp_special:nF {#1}
      { \@@_fp_split:nN {#1} \@@_fp_e_auxii:NNnnn {#2} }
  }
\cs_new:Npn \@@_fp_e_auxii:NNnnn #1#2#3#4#5
  {
    \@@_fp_sign:N #1
    \@@_fp_zero:NN #1#2
    \@@_align:f
      {
        \use:nf
          { \int_compare:nNnTF {#5} > \c_zero { #2 . #3 } {#2} }
          {
            \prg_replicate:nn
              { \int_max:nn { 0 } { #5 - \str_count:n {#3} } } { 0 }
          }
        e #4
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_fp_f:nn}
% \begin{macro}[aux,EXP]
%   {\@@_fp_f_auxi:nn, \@@_fp_f_auxii:NNnnn, \@@_fp_f_auxiii:wwwn}
%   Round to |#2| (absolute) decimal places, then filter out special
%   cases.  Then, the \texttt{auxii} auxiliary constructs the correct
%   sign and takes care of zeroes if needed.  The main case uses
%   \cs{fp_to_decimal:n} for most of the work, simply taking care of
%   putting/omitting the decimal dot and adding trailing zeros if
%   needed.
%    \begin{macrocode}
\cs_new:Npn \@@_fp_f:nn #1#2
  {
    \exp_args:Nf \@@_fp_f_auxi:nn
      { \fp_to_tl:n { round ( #1 , \int_max:nn {0} {#2} ) } }
      {#2}
  }
\cs_new:Npn \@@_fp_f_auxi:nn #1#2
  {
    \@@_fp_special:nF {#1}
      { \@@_fp_split:nN {#1} \@@_fp_f_auxii:NNnnn {#2} }
  }
\cs_new:Npn \@@_fp_f_auxii:NNnnn #1#2#3#4#5
  {
    \@@_fp_sign:N #1
    \@@_fp_zero:NN #1#2
    \@@_align:f
      {
        \exp_last_unbraced:Nf \@@_fp_f_auxiii:wwwn
          { \fp_to_decimal:n { #2.#3e#4 } } . . \q_stop {#5}
      }
  }
\cs_new:Npn \@@_fp_f_auxiii:wwwn #1 . #2 . #3 \q_stop #4
  {
    \use:nf {#1}
      {
        \int_compare:nNnT {#4} > \c_zero
          {
            \use:nf { . #2 }
              { \prg_replicate:nn { #4 - \str_count:n {#2} } {0} }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[aux,EXP]{\@@_fp_g:nn}
% \begin{macro}[aux,EXP]{\@@_fp_g_auxi:nn, \@@_fp_g_auxii:NNnnn}
%   The |g|~style starts like the |e|~style, but rounding to
%   \meta{precision}~(|#2|) significant figures instead of $|#2|+1$.
%   Once the special cases, signs and zeroes are taken care of, simply
%   call \cs{fp_to_decimal:n} on inputs that are in the range $[10^{-4},
%   10^{\meta{precision}})$ and otherwise use scientific notation.
%    \begin{macrocode}
\cs_new:Npn \@@_fp_g:nn #1#2
  {
    \@@_fp_special:nF {#1}
      {
        \exp_args:Nf \@@_fp_g_auxi:nn
          {
            \fp_to_tl:n
              {
                round ( #1 , \int_max:nn { 0 } { #2 - 1 }
                  - \@@_fp_split:nN {#1} \use_iv:nnnn )
              }
          }
          { \int_max:nn { 1 } {#2} }
      }
  }
\cs_new:Npn \@@_fp_g_auxi:nn #1#2
  {
    \@@_fp_special:nF {#1}
      { \@@_fp_split:nN {#1} \@@_fp_g_auxii:NNnnn {#2} }
  }
\cs_new:Npn \@@_fp_g_auxii:NNnnn #1#2#3#4#5
  {
    \@@_fp_sign:N #1
    \@@_fp_zero:NN #1#2
    \@@_align:f
      {
        \int_compare:nTF { -5 < #4 < #5 }
          { \fp_to_decimal:n { #2.#3 e #4 } }
          { \tl_if_empty:nTF {#3} {#2} { #2 . #3 } e #4 }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\tex_endinput:D
%    \end{macrocode}
%
% \subsection{Helpers}
%
% \begin{macro}[aux, EXP]{\use:nf, \use:fnf}
%   A simple variant.
%    \begin{macrocode}
\cs_generate_variant:Nn \use:nn { nf }
\cs_generate_variant:Nn \use:nnn { fnf }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\tl_to_str:f}
%   A simple variant.
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_to_str:n { f }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_if_digit:NTF}
%   Here we expect |#1| to be a character with category other, or
%   \cs{s__stop}.
%    \begin{macrocode}
\prg_new_conditional:Npnn \@@_if_digit:N #1 { TF }
  {
    \if_int_compare:w \c_nine < 1 #1 \exp_stop_f:
      \prg_return_true: \else: \prg_return_false: \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]
%   {\@@_put:nw, \@@_put:ow, \@@_put:fw}
%   Put |#1| after an \cs{s__stop} delimiter.
%    \begin{macrocode}
\cs_new:Npn \@@_put:nw #1 #2 \s__stop { #2 \s__stop #1 }
\cs_generate_variant:Nn \@@_put:nw { o , f }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP, TF]{\@@_if_in:nN}
% \begin{macro}[aux, EXP]{\@@_if_in_aux:NN}
%   A copy of \cs{__str_if_contains_char:nNTF} to avoid relying on
%   this weird internal string function.
%    \begin{macrocode}
\prg_new_conditional:Npnn \@@_if_in:nN #1#2 { TF }
  {
    \@@_if_in_aux:NN #2 #1
      { #2 \prg_return_false: \exp_after:wN \__prg_break: \else: }
    \__prg_break_point:
  }
\cs_new:Npn \@@_if_in_aux:NN #1#2
  {
    \if_charcode:w #1 #2
      \prg_return_true:
      \exp_after:wN \__prg_break:
    \fi:
    \@@_if_in_aux:NN #1
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Parsing a format specification}
%
% \begin{macro}[aux, EXP]{\@@_python:n}
% \begin{macro}[aux, EXP]
%   {
%     \@@_python_auxi:NN,
%     \@@_python_auxii:nN,
%     \@@_python_auxiii:nN,
%     \@@_python_auxiv:nwN,
%     \@@_python_auxv:nN,
%     \@@_python_auxvi:nwN,
%     \@@_python_auxvii:nN,
%     \@@_python_end:nwn,
%   }
%   The goal is to parse
%   \begin{equation*}
%     \meta{format specification} = [[\meta{fill}]\meta{alignment}]
%     [\meta{sign}] [\meta{width}] [.\meta{precision}] [\meta{style}]
%   \end{equation*}
%    \begin{macrocode}
\cs_new:Npn \@@_python:n #1
  {
    \exp_last_unbraced:Nf \@@_python_auxi:NN
      \__str_to_other:n {#1} \s__stop \s__stop {#1}
  }
\cs_new:Npx \@@_python_auxi:NN #1#2
  {
    \exp_not:N \@@_if_in:nNTF { < > = ^ } #2
      { \exp_not:N \@@_python_auxiii:nN { #1 #2 } }
      {
        \exp_not:N \@@_python_auxii:nN
          { \c_catcode_other_space_tl } #1 #2
      }
  }
\cs_new:Npn \@@_python_auxii:nN #1#2
  {
    \@@_if_in:nNTF { < > = ^ } #2
      { \@@_python_auxiii:nN { #1 #2 } }
      { \@@_python_auxiii:nN { #1 ? } #2 }
  }
\cs_new:Npx \@@_python_auxiii:nN #1#2
  {
    \exp_not:N \@@_if_in:nNTF
      { + - \c_catcode_other_space_tl }
      #2
      { \exp_not:N \@@_python_auxiv:nwN { #1 #2 } ; }
      { \exp_not:N \@@_python_auxiv:nwN { #1 ? } ; #2 }
  }
\cs_new:Npn \@@_python_auxiv:nwN #1#2; #3
  {
    \@@_if_digit:NTF #3
      { \@@_python_auxiv:nwN {#1} #2 #3 ; }
      { \@@_python_auxv:nN { #1 {#2} } #3 }
  }
\cs_new:Npn \@@_python_auxv:nN #1#2
  {
    \token_if_eq_charcode:NNTF . #2
      { \@@_python_auxvi:nwN {#1} 0 ; }
      { \@@_python_auxvii:nN { #1 { } } #2 }
  }
\cs_new:Npn \@@_python_auxvi:nwN #1#2; #3
  {
    \@@_if_digit:NTF #3
      { \@@_python_auxvi:nwN {#1} #2 #3 ; }
      { \@@_python_auxvii:nN { #1 {#2} } #3 }
  }
\cs_new:Npn \@@_python_auxvii:nN #1#2
  {
    \token_if_eq_meaning:NNTF \s__stop #2
      { \@@_python_end:nwn { #1 ? } #2 }
      { \@@_python_end:nwn { #1 #2 } }
  }
\cs_new:Npn \@@_python_end:nwn #1 #2 \s__stop \s__stop #3
  {
    \tl_if_empty:nF {#2}
      { \__msg_kernel_expandable_error:nnn { str } { invalid-format } {#3} }
    #1
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Formatting token lists}
%
% \begin{macro}[EXP]{\tl_format:Nn, \tl_format:cn, \tl_format:nn}
%   Call \cs{@@_tl:NNNnnNn} to read the parsed \meta{format
%     specification}.  Then convert the result to a string.
%    \begin{macrocode}
\cs_new_nopar:Npn \tl_format:Nn { \exp_args:No \tl_format:nn }
\cs_generate_variant:Nn \tl_format:Nn { c }
\cs_new:Npn \tl_format:nn #1#2
  {
    \tl_to_str:f
      {
        \exp_last_unbraced:Nf \@@_tl:NNNnnNn
          { \@@_python:n {#2} }
          {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_tl:NNNnnNn}
%   \begin{quote}
%     \cs{@@_tl:NNNnnNn} \meta{fill} \meta{alignment} \meta{sign}
%     \Arg{width} \Arg{precision} \meta{style} \Arg{token list}
%   \end{quote}
%   First check that the \meta{alignment} is not |=|, and set the
%   default alignment |?| to |<|.  Place the modified information after
%   a trailing \cs{s__stop} for later retrieval.  Then check that there
%   was no \meta{sign}.  The width will be useful later, store it after
%   \cs{s__stop}.  Afterwards, store the precision, and the function
%   \cs{__str_range_unsafe:nnn} that will be used to extract the first
%   |#5| characters of the string.
%   There is a need to use the \enquote{unsafe} function, as otherwise
%   leading spaces would get stripped by |f|-expansion.  Finally, check
%   that the \meta{style} is |?| or |s|.
%    \begin{macrocode}
\cs_new:Npn \@@_tl:NNNnnNn #1#2#3#4#5#6
  {
    \token_if_eq_charcode:NNTF #2 =
      {
        \__msg_kernel_expandable_error:nnnn
          { str } { invalid-align-format } {#2} {tl}
        \@@_put:nw { #1 < }
      }
      {
        \token_if_eq_charcode:NNTF #2 ?
          { \@@_put:nw { #1 < } }
          { \@@_put:nw { #1 #2 } }
      }
    \token_if_eq_charcode:NNF #3 ?
      {
        \__msg_kernel_expandable_error:nnnn
          { str } { invalid-sign-format } {#3} {tl}
      }
    \@@_put:nw { {#4} }
    \tl_if_empty:nTF {#5}
      { \@@_put:nw { \__str_range_unsafe:nnn { {1} {-1} } } }
      { \@@_put:nw { \__str_range_unsafe:nnn { {1} {#5} } } }
    \token_if_eq_charcode:NNF #6 s
      {
        \token_if_eq_charcode:NNF #6 ?
          {
            \__msg_kernel_expandable_error:nnnn
              { str } { invalid-style-format } {#6} {tl}
          }
      }
    \@@_tl_s:NNnnNNn
    \s__stop
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_tl_s:NNnnNNn}
%   \begin{quote}
%     \cs{@@_tl_s:NNnnNNn} \cs{s__stop} \meta{function}
%     \Arg{arguments} \Arg{width} \meta{fill} \meta{alignment}
%     \Arg{token list}
%   \end{quote}
%   The \meta{function} and \meta{arguments} are built in such a way
%   that |f|-expanding \meta{function} \Arg{other string}
%   \meta{arguments} yields the piece of the \meta{other string} that we
%   want to output.  The \meta{other string} is built from the
%   \meta{token list} by |f|-expanding \cs{__str_to_other:n}.
%    \begin{macrocode}
\cs_new:Npn \@@_tl_s:NNnnNNn #1#2#3#4#5#6#7
  {
    \exp_args:Nc \exp_args:Nf
      { @@_align_#6:nnnN }
      { \exp_args:Nf #2 { \__str_to_other:n {#7} } #3 }
      { }
      {#4} #5
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Formatting sequences}
%
% \begin{macro}[EXP]{\seq_format:Nn, \seq_format:cn}
%   Each item is formatted as a token list according to the
%   specification.  First parse the format and expand the sequence, then
%   loop through the items.  Eventually, convert to a string.
%    \begin{macrocode}
\cs_new:Npn \seq_format:Nn #1#2
  {
    \tl_to_str:f
      {
        \@@_seq:ff
          { \exp_after:wN \use_i:nn \exp_after:wN \exp_stop_f: #1 }
          { \@@_python:n {#2} }
      }
  }
\cs_generate_variant:Nn \seq_format:Nn { c }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_seq:nn, \@@_seq:ff}
%   The first argument is the contents of a \texttt{seq} variable.  The
%   second is a parsed \meta{format specification}.  Set up the loop.
%    \begin{macrocode}
\cs_new:Npn \@@_seq:nn #1#2
  {
    \@@_seq_loop:nnNn { } {#2}
      #1
      { ? \@@_seq_end:w } { }
  }
\cs_generate_variant:Nn \@@_seq:nn { ff }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_seq_loop:nnNn}
%   \begin{quote}
%     \cs{@@_seq_loop:nnNn} \Arg{done} \Arg{parsed format}
%     \cs{__seq_item:n} \Arg{item}
%   \end{quote}
%   The first argument is the result of formatting the items read so
%   far.  The third argument is a single token (\cs{__seq_item:n}),
%   until we reach the end of the sequence, where |\use_none:n #3| ends
%   the loop.
%    \begin{macrocode}
\cs_new:Npn \@@_seq_loop:nnNn #1#2#3#4
  {
    \use_none:n #3
    \exp_args:Nf \@@_seq_loop:nnNn
      { \use:nf {#1} { \@@_tl:NNNnnNn #2 {#4} } }
      {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_seq_end:w}
%   Pick the right piece in the loop above.
%    \begin{macrocode}
\cs_new:Npn \@@_seq_end:w #1#2#3#4 { \use_ii:nnn #3 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Formatting integers}
%
% \begin{macro}[EXP]{\int_format:nn}
%   Evaluate the first argument and feed it to \cs{@@_int:nn}.
%    \begin{macrocode}
\cs_new:Npn \int_format:nn #1
  { \exp_args:Nf \@@_int:nn { \int_eval:n {#1} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_int:nn}
%   Parse the \meta{format specification} and feed it to
%   \cs{@@_int:NNNnnNn}.  Then convert the result to a string
%    \begin{macrocode}
\cs_new:Npn \@@_int:nn #1#2
  {
    \tl_to_str:f
      {
        \exp_last_unbraced:Nf \@@_int:NNNnnNn
          { \@@_python:n {#2} }
          {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_int:NNNnnNn}
%   \begin{quote}
%     \cs{@@_int:NNNnnNn} \meta{fill} \meta{alignment}
%     \meta{sign} \Arg{width} \Arg{precision} \meta{style} \Arg{integer}
%   \end{quote}
%   First set the
%   default alignment |?| to |>|.  Place the modified information after
%   a trailing \cs{s__stop} for later retrieval.  Then check the
%   \meta{sign}: if the integer is negative, always put~|-|.  Otherwise,
%   if the format's \meta{sign} is |~|, put a space (with category
%   \enquote{other}); if it is~|+| put |+|; if it is |-| (default), put
%   nothing, represented as a brace group.  The width |#4| will be
%   useful later, store it after \cs{s__stop}.  Afterwards, check that
%   the \meta{precision} was absent.  Finally, dispatch depending on the
%   \meta{style}.
%    \begin{macrocode}
\cs_new:Npn \@@_int:NNNnnNn #1#2#3#4#5#6#7
  {
    \token_if_eq_charcode:NNTF #2 ?
      { \@@_put:nw { #1 > } }
      { \@@_put:nw { #1 #2 } }
    \int_compare:nNnTF {#7} < \c_zero
      { \@@_put:nw { - } }
      {
        \str_case:nnF {#3}
          {
            { ~ } { \@@_put:ow { \c_catcode_other_space_tl } }
            { + } { \@@_put:nw { + } }
          }
          { \@@_put:nw { { } } }
      }
    \@@_put:nw { {#4} }
    \tl_if_empty:nF {#5}
      {
        \__msg_kernel_expandable_error:nnnn
          { str } { invalid-precision-format } {#5} {int}
      }
    \str_case:nnF {#6}
      {
        { ? } { \@@_int:NwnnNNn \use:n }
        { d } { \@@_int:NwnnNNn \use:n }
        { b } { \@@_int:NwnnNNn \int_to_binary:n }
        { o } { \@@_int:NwnnNNn \int_to_octal:n }
        { X } { \@@_int:NwnnNNn \int_to_hexadecimal:n }
      }
      {
        \__msg_kernel_expandable_error:nnnn
          { str } { invalid-style-format } {#6} { int }
        \@@_int:NwnnNNn \use:n
      }
    \s__stop {#7}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_int:NwnnNNn}
%   \begin{quote}
%     \cs{@@_int:NwnnNNn} \meta{function} \cs{s__stop}
%     \Arg{width} \Arg{sign} \meta{fill} \meta{alignment} \Arg{integer}
%   \end{quote}
%   Use the |format_align| function corresponding to the
%   \meta{alignment}, with the following arguments:
%   \begin{itemize}
%     \item the string formed by combining the sign |#4| with the result
%       of converting the absolute value of the \meta{integer} |#7|
%       according to the conversion function |#1|;
%     \item the \meta{width};
%     \item the \meta{fill} character.
%   \end{itemize}
%    \begin{macrocode}
\cs_new:Npn \@@_int:NwnnNNn #1#2 \s__stop #3#4#5#6#7
  {
    \exp_args:Nc \exp_args:Nf
      { @@_align_#6:nnnN }
      { #1 { \int_abs:n {#7} } }
      {#4}
      {#3} #5
  }
%    \end{macrocode}
% ^^A todo: note similarity with  \@@_tl_s:NNnnNNn
% \end{macro}
%
% \subsection{Messages}
%
% All of the messages are produced expandably, so there is no need for
% an extra-text.
%    \begin{macrocode}
\__msg_kernel_new:nnn { str } { invalid-format }
  { Invalid~format~'#1'. }
\__msg_kernel_new:nnn { str } { invalid-align-format }
  { Invalid~alignment~'#1'~for~style~'#2'. }
\__msg_kernel_new:nnn { str } { invalid-sign-format }
  { Invalid~sign~'#1'~for~style~'#2'. }
\__msg_kernel_new:nnn { str } { invalid-precision-format }
  { Invalid~precision~'#1'~for~style~'#2'. }
\__msg_kernel_new:nnn { str } { invalid-style-format }
  { Invalid~style~'#1'~for~type~'#2'. }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
