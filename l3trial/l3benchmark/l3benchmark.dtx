% \iffalse
%
%% File l3benchmark.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental benchmark}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3benchmark} package\\ Benchmark^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Benchmark}
%
% \begin{function}{\benchmark:n}
%   \begin{syntax}
%     \cs{benchmark:n} \Arg{code}
%   \end{syntax}
%   Measures the time taken by \TeX{} to run the \meta{code},
%   stores it in \cs{l_benchmark_time_fp}, and calls \cs{benchmark_display:}.
%   By default, that display function prints the time to the terminal.
%   The behaviour can be changed by redefining \cs{benchmark_display:}.
%   This function cannot be nested.
% \end{function}
%
% \begin{variable}{\l_benchmark_duration_fp}
%   This variable controls the duration of the benchmark. Namely,
%   the benchmark will take a time between half and twice
%   \cs{l_benchmark_duration_fp} seconds.
% \end{variable}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3benchmark} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\package_check_loaded_expl:
%</package>
%    \end{macrocode}
%
%    \begin{macrocode}
\pdftex_if_engine:F
  {
    \msg_new:nnnn { benchmark } { pdftex-only }
      { The~l3benchmark~module~only~supports~pdfTeX. }
      {
        You~are~trying~to~load~the~l3benchmark~module~
        on~top~of~the~\xetex_if_engine:TF {XeTeX} {LuaTeX}~engine.~
        This~is~not~supported,~and~loading~the~benchmark~module~
        will~abort.
      }
    \msg_error:nn { benchmark } { pdftex-only }
    \tex_endinput:D
  }
%    \end{macrocode}
%
% \begin{variable}{\pdftex_elapsedtime:D}
%   The pdf\TeX{} engine gives access to the time starting
%   from the start of the run.
%    \begin{macrocode}
\cs_set_eq:NN \pdftex_elapsedtime:D \pdfelapsedtime
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_benchmark_time_int}
% \begin{variable}{\l_benchmark_time_fp}
%   These two variables hold the time, as measured using the
%   \tn{pdfelapsedtime} primitive, and converted to seconds
%   in the floating point.
%    \begin{macrocode}
\int_new:N \l_benchmark_time_int
\fp_new:N \l_benchmark_time_fp
%    \end{macrocode}
% \end{variable}
% \end{variable}
%
% \begin{variable}{\l_benchmark_repeat_int}
%   Holds the number of times that the piece of code was
%   repeated when timing.
%    \begin{macrocode}
\int_new:N \l_benchmark_repeat_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_benchmark_duration_fp}
% \begin{variable}{\l_benchmark_tmp_fp}
% \begin{variable}{\l_benchmark_duration_int}
%   The benchmark is constrained to take roughly
%   (from half to twice) \cs{l_benchmark_duration_fp}
%   seconds, unless one iteration of the code takes longer.
%    \begin{macrocode}
\fp_new:N \l_benchmark_duration_fp
\fp_set_eq:NN \l_benchmark_duration_fp \c_one_fp
\fp_new:N \l_benchmark_tmp_fp
\int_new:N \l_benchmark_duration_int
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{macro}[int]{\benchmark_outer_do_nothing:}
%   Cannot appear in any macro argument.
%    \begin{macrocode}
\tex_outer:D \cs_set_nopar:Npn \benchmark_outer_do_nothing: { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\benchmark_raw:n}
%   Stores the time it took to perform a given piece of code
%   in the integer \cs{l_benchmark_time_int}.
%   The function \cs{benchmark_outer_do_nothing:} prevents
%   the arbitrary user code from tampering with the rest of
%   the time module.
%    \begin{macrocode}
\cs_new_protected:Npx \benchmark_raw:n #1
  {
    \int_set_eq:NN \l_benchmark_time_int \pdftex_elapsedtime:D
    #1
    \exp_not:c { benchmark_outer_do_nothing: }
    \int_set:Nn \l_benchmark_time_int
      { \pdftex_elapsedtime:D - \l_benchmark_time_int }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\benchmark_raw_replicate:nn}
%   Here, we wish to measure the time it takes for the piece of code |#2|
%   to be run |#1| times. The \cs{prg_replicate:nn} is expanded before
%   being fed to \cs{benchmark_raw:n} to avoid timing its expansion as well.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark_raw_replicate:nn #1#2
  {
    \exp_args:Nx \benchmark_raw:n
      { \prg_replicate:nn {#1} { \exp_not:n {#2} } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP,aux]{\benchmark_replicate_kibi_fold:n}
%   As its name indicates, expanding this function once yields
%   $1024$ copies of its argument. This is used to avoid reaching
%   the limits of \TeX{}'s memory in case the user input is a very
%   simple piece of code.
%    \begin{macrocode}
\cs_new:Npx \benchmark_replicate_kibi_fold:n #1
  { \prg_replicate:nn {1024} {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\benchmark:n}
%   The main timing function. First time the user code once.
%   If that took less than half a second, repeat the measurement
%   with $4$ copies of the code. Continue quadrupling the number
%   of copies until reaching a time greater than half a second.
%   If the number of copies required is large (here ${}>1024$),
%   it may exhaust \TeX{}'s main memory. In that case, we
%   replicate $1024$ times less the code
%   |\benchmark_replicate_kibi_fold:n {#1}|.
%   Once a large enough time was measured, divide that by $65536$
%   and by the number of repetitions.
%   The function \cs{benchmark_display:} can be redefined by the user
%   if the output should be done differently than to the terminal.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark:n #1
  {
    \int_set_eq:NN \l_benchmark_repeat_int \c_one
    \benchmark_raw:n {#1}
    \fp_set_eq:NN \l_benchmark_tmp_fp \l_benchmark_duration_fp
    \fp_mul:Nn \l_benchmark_tmp_fp { 32768 }
    \int_set:Nn \l_benchmark_duration_int
      { \fp_to_int:N \l_benchmark_tmp_fp }
    \int_while_do:nNnn \l_benchmark_time_int < \l_benchmark_duration_int
      {
        \int_set:Nn \l_benchmark_repeat_int { 4*\l_benchmark_repeat_int }
        \int_compare:nNnTF \l_benchmark_repeat_int > { 1024 }
          {
            \int_compare:nNnTF \l_benchmark_repeat_int > { 1048576 }
              {
                \benchmark_raw_replicate:nn
                  { \l_benchmark_repeat_int / 1048576 }
                  {
                    \benchmark_replicate_kibi_fold:n
                      { \benchmark_replicate_kibi_fold:n {#1} }
                  }
              }
              {
                \benchmark_raw_replicate:nn { \l_benchmark_repeat_int / 1024 }
                  { \benchmark_replicate_kibi_fold:n {#1} }
              }
          }
          { \benchmark_raw_replicate:nn { \l_benchmark_repeat_int } {#1} }
      }
    \fp_set_from_dim:Nn \l_benchmark_time_fp { \l_benchmark_time_int sp }
    \fp_div:Nn \l_benchmark_time_fp { \int_use:N \l_benchmark_repeat_int }
    \benchmark_display:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\benchmark_display:}
%   Function to display the time that was measured.
%   This can be redefined by the user.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \benchmark_display:
  { \iow_term:x { \fp_to_tl:N \l_benchmark_time_fp \c_space_tl seconds } }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex