% \iffalse
%
%% File l3benchmark.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental benchmark}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3benchmark} package\\ Benchmark^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Benchmark}
%
% \begin{function}{\clock_get:N}
%   \begin{syntax}
%     \cs{clock_get:N} \meta{tl~var}
%   \end{syntax}
%   Stores the current time in seconds in the \meta{tl~var}.  The output
%   is the same as \cs{fp_to_decimal:n}.  The time is measured from the
%   last occurrence of \cs{clock_zero:}, which is called when loading
%   the package.  This function may fail for large values (about $9$
%   hours) in some engines.
% \end{function}
%
% \begin{function}{\clock_zero:}
%   \begin{syntax}
%     \cs{clock_zero:}
%   \end{syntax}
%   Resets the timer to zero.
% \end{function}
%
% \begin{function}{\benchmark:n}
%   \begin{syntax}
%     \cs{benchmark:n} \Arg{code}
%   \end{syntax}
%   Measures the time taken by \TeX{} to run the \meta{code}, and calls
%   \cs{benchmark_display:n} with the time in seconds as its argument.
%   By default, that display function prints the time to the terminal.
%   The behaviour can be changed by redefining \cs{benchmark_display:n}.
%   This function cannot be nested.  The \meta{code} is run many times
%   in a row, and not within a group, thus it should not have
%   side-effects.
% \end{function}
%
% \begin{variable}{\l_benchmark_duration_fp}
%   This variable controls the duration of the benchmark. Namely,
%   the benchmark will take a time between half and twice
%   \cs{l_benchmark_duration_fp} seconds.
% \end{variable}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3benchmark} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \subsection{Case where the clock is unavailable}
%
% The \pkg{benchmark} package needs to access the time in a way or
% other.  The \pdfTeX{} engine provides \tn{pdfelapsedtime}.  Heiko
% Oberdiek's \pkg{pdftexcmds} provides \tn{pdf@elapsedtime} for the
% \LuaTeX{} engine.  For \XeTeX{}, we need to access the system time.
% This can only be done with an external call with full |\write18|
% enabled.
%
% \begin{variable}{\l_benchmark_time_fail_bool}
%   This boolean is true if \pkg{l3benchmark} is unable to access the
%   time, \emph{i.e.,} if the engine is \XeTeX{} and full shell-escape
%   is disabled.  In that case, define the user commands to raise an
%   error, and raise a critical error.  The current file stops being
%   read.
%    \begin{macrocode}
\bool_new:N \l_benchmark_time_fail_bool
\xetex_if_engine:T
  {
    \cs_if_exist:NTF \shellescape
      {
        \int_compare:nNnF \shellescape = \c_one
          { \bool_set_true:N \l_benchmark_time_fail_bool }
      }
      { \bool_set_true:N \l_benchmark_time_fail_bool }
  }
\bool_if:NT \l_benchmark_time_fail_bool
  {
    \msg_new:nnnn { benchmark } { no-time }
      { The~l3benchmark~package~failed~to~access~a~clock. }
      {
        The~XeTeX~engine~provides~no~way~to~access~the~system~time,~
        hence~making~benchmarking~impossible~without~shell-escape.~
        Please~use~pdfTeX,~LuaTeX,~or~call~XeTeX~with~the~
        --shell-escape~option.
      }
    \cs_new_protected:Npn \clock_get:N #1
      {
        \msg_error:nn { benchmark } { no-time }
        \int_zero:N #1
      }
    \cs_new_protected_nopar:Npn \clock_zero:
      { \msg_error:nn { benchmark } { no-time } }
    \cs_new_protected:Npn \benchmark:n #1
      {
        \msg_error:nn { benchmark } { no-time }
        \benchmark_display:n { 0 }
      }
    \cs_new_protected:Npn \benchmark_display:n #1
      { \iow_term:x { \tl_to_str:n {#1} ~ seconds } }
    \fp_new:N \l_benchmark_duration_fp
    \fp_set_eq:NN \l_benchmark_duration_fp \c_one_fp
    \msg_critical:nn { benchmark } { no-time }
  }
%    \end{macrocode}
% \end{variable}
%
% \subsection{Clock}
%
% This section defines two functions.
% \begin{itemize}
% \item \cs{clock_get:N}, which stores the current time as a token list
%   variable in its argument.  This function is based on
%   \tn{pdfelapsedtime} in \pdfTeX{}, on \tn{pdf@elapsedtime} in
%   \LuaTeX{}, and on a call to \texttt{texlua} in \XeTeX{}.
% \item \cs{clock_zero:}, which resets the clock.  This function is
%   based on \tn{pdfresettimer} in \pdfTeX{}, \tn{pdf@resettimer} in
%   \LuaTeX{}, and on a call to \texttt{texlua} in \XeTeX{}.
% \end{itemize}
% Each of those functions has a complicated definition in \XeTeX{}, and
% neither is defined in \XeTeX{} without full shell-escape.
%
% \begin{macro}{\clock_get:N}
%   We postpone the definition for \XeTeX{}.  For \pdfTeX{} and
%   \LuaTeX{}, rescale the value of \tn{pdfelapsedtime} or
%   \tn{pdf@elapsedtime}.
%    \begin{macrocode}
\xetex_if_engine:F
  {
    \pdftex_if_engine:TF
      {
        \cs_new_protected:Npn \clock_get:N #1
          { \tl_set:Nx #1 { \fp_to_decimal:n { \pdfelapsedtime / 65536 } } }
      }
      {
        \cs_new_protected:Npn \clock_get:N #1
          {
            \tl_set:Nx #1
              { \fp_to_decimal:n { \the \pdf@elapsedtime / 65536 } }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\clock_zero:}
%   We postpone the definition for \XeTeX{}.  For \pdfTeX{} and
%   \LuaTeX{}, call \tn{pdfresettimer} or \tn{pdf@resettimer}.
%    \begin{macrocode}
\xetex_if_engine:F
  {
    \pdftex_if_engine:TF
      { \cs_new_protected_nopar:Npn \clock_zero: { \pdfresettimer } }
      { \cs_new_protected_nopar:Npn \clock_zero: { \pdf@resettimer } }
  }
%    \end{macrocode}
% \end{macro}
%
% What follows is exclusively run for \XeTeX{}.
%
% \begin{variable}{\c__clock_lua_file_tl, \c__clock_time_file_tl}
%   File names.
%    \begin{macrocode}
\xetex_if_engine:T
  {
    \tl_const:Nx \c__clock_lua_file_tl { \c_job_name_tl . lua }
    \tl_const:Nx \c__clock_time_file_tl { \c_job_name_tl . timestamp }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l__clock_iow}
%   Write the \Lua{} file.
%    \begin{macrocode}
\xetex_if_engine:T
  {
    \iow_new:N \l__clock_iow
    \iow_open:Nn \l__clock_iow { \c__clock_lua_file_tl }
    \iow_now:Nx \l__clock_iow
      {
                      os.remove("\c__clock_time_file_tl")
        \iow_newline: io.output("\c__clock_time_file_tl")
        \iow_newline: if ~ os.gettimeofday ~ then
        \iow_newline:   io.write(os.gettimeofday())
        \iow_newline: else
        \iow_newline:   io.write(os.date("\iow_char:N\%s"))
        \iow_newline: end
      }
    \iow_close:N \l__clock_iow
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\__clock_gget:N}
% \begin{variable}{\l__clock_ior}
% \begin{variable}{\l__clock_tl}
%   Call \texttt{texlua} to write the system time to
%   \cs{c__clock_time_file_tl} and read the information back as
%   \cs{l__clock_tl}.  Then assign it globally to the floating point
%   |#1|.
%    \begin{macrocode}
\xetex_if_engine:T
  {
    \ior_new:N \l__clock_ior
    \tl_new:N \l__clock_tl
    \cs_new_protected:Npn \__clock_gget:N #1
      {
        \tex_immediate:D \tex_write:D 18
          { texlua ~ \c__clock_lua_file_tl }
        \ior_open:Nn \l__clock_ior { \c__clock_time_file_tl }
        \ior_get_str:NN \l__clock_ior \l__clock_tl
        \ior_close:N \l__clock_ior
        \fp_gset:Nn #1 { \l__clock_tl }
      }
  }
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{macro}
%
% \begin{macro}{\clock_zero:}
% \begin{variable}{\g__clock_base_fp}
%   Resetting the timer amounts to changing the \enquote{base time},
%   used as an offset when reporting the time in \cs{__clock_get:N}.
%    \begin{macrocode}
\xetex_if_engine:T
  {
    \fp_new:N \g__clock_base_fp
    \cs_new_protected_nopar:Npn \clock_zero:
      { \__clock_gget:N \g__clock_base_fp }
  }
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% \begin{macro}{\clock_get:N}
% \begin{variable}{\g__clock_fp}
%   Get the current clock time, then compute the difference with the
%   base time.
%    \begin{macrocode}
\xetex_if_engine:T
  {
    \fp_new:N \g__clock_fp
    \cs_new_protected:Npn \clock_get:N #1
      {
        \__clock_gget:N \g__clock_fp
        \tl_set:Nx #1
          { \fp_to_decimal:n { \g__clock_fp - \g__clock_base_fp } }
      }
  }
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% The following line is needed in \XeTeX{}, because the starting value
% of the clock is otherwise very large (time is counted from epoch).
% For consistency, we call \cs{clock_zero:} in all engines.
%    \begin{macrocode}
\clock_zero:
%    \end{macrocode}
%
% \subsection{Benchmarking code}
%
% \begin{variable}{\l_benchmark_time_a_tl, \l_benchmark_time_b_tl}
%   These two variables hold the time before and after running a piece
%   of code, as a decimal number in seconds.
%    \begin{macrocode}
\tl_new:N \l_benchmark_time_a_tl
\tl_new:N \l_benchmark_time_b_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_benchmark_repeat_int}
%   Holds the number of times that the piece of code was
%   repeated when timing.
%    \begin{macrocode}
\int_new:N \l_benchmark_repeat_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_benchmark_duration_fp}
%   The benchmark is constrained to take roughly
%   (from half to twice) \cs{l_benchmark_duration_fp}
%   seconds, unless one iteration of the code takes longer.
%    \begin{macrocode}
\fp_new:N \l_benchmark_duration_fp
\fp_set_eq:NN \l_benchmark_duration_fp \c_one_fp
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\benchmark_raw:n}
% \begin{macro}[int]{\benchmark_outer_do_nothing:}
%   The time it took to perform a given piece of code is the difference
%   between the decimal numbers stored in the token lists
%   \cs{l_benchmark_time_a_tl} and \cs{l_benchmark_time_b_tl}.  The
%   function \cs{benchmark_outer_do_nothing:} prevents the arbitrary
%   user code from tampering with the rest of the time module.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark_raw:n #1
  {
    \clock_get:N \l_benchmark_time_a_tl
    #1
    \benchmark_outer_do_nothing:
    \clock_get:N \l_benchmark_time_b_tl
  }
\tex_outer:D \cs_set_nopar:Npn \benchmark_outer_do_nothing: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int]{\benchmark_raw_replicate:nn}
%   Here, we wish to measure the time it takes for the piece of code |#2|
%   to be run |#1| times. The \cs{prg_replicate:nn} is expanded before
%   being fed to \cs{benchmark_raw:n} to avoid timing its expansion as well.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark_raw_replicate:nn #1#2
  {
    \exp_args:Nx \benchmark_raw:n
      { \prg_replicate:nn {#1} { \exp_not:n {#2} } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP,aux]{\benchmark_replicate_kibi_fold:n}
%   As its name indicates, expanding this function once yields
%   $1024$ copies of its argument. This is used to avoid reaching
%   the limits of \TeX{}'s memory in case the user input is a very
%   simple piece of code.
%    \begin{macrocode}
\cs_new:Npx \benchmark_replicate_kibi_fold:n #1
  { \prg_replicate:nn {1024} {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\benchmark:n}
%   The main timing function. First time the user code once.
%   If that took less than half a second, repeat the measurement
%   with $4$ copies of the code. Continue quadrupling the number
%   of copies until reaching a time greater than half a second.
%   If the number of copies required is large (here ${}>1024$),
%   it may exhaust \TeX{}'s main memory. In that case, we
%   replicate $1024$ times less the code
%   |\benchmark_replicate_kibi_fold:n {#1}|.
%   Once a large enough time was measured, divide that by $65536$
%   and by the number of repetitions.
%   The function \cs{benchmark_display:n} can be redefined by the user
%   if the output should be done differently than to the terminal.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark:n #1
  {
    \int_set_eq:NN \l_benchmark_repeat_int \c_one
    \benchmark_raw:n {#1}
    \bool_while_do:nn
      {
        \fp_compare_p:nNn
          { \l_benchmark_time_b_tl - \l_benchmark_time_a_tl }
          < { .5 \l_benchmark_duration_fp }
      }
      {
        \int_set:Nn \l_benchmark_repeat_int { 4*\l_benchmark_repeat_int }
        \int_compare:nNnTF \l_benchmark_repeat_int > { 1024 }
          {
            \int_compare:nNnTF \l_benchmark_repeat_int > { 1048576 }
              {
                \benchmark_raw_replicate:nn
                  { \l_benchmark_repeat_int / 1048576 }
                  {
                    \benchmark_replicate_kibi_fold:n
                      { \benchmark_replicate_kibi_fold:n {#1} }
                  }
              }
              {
                \benchmark_raw_replicate:nn { \l_benchmark_repeat_int / 1024 }
                  { \benchmark_replicate_kibi_fold:n {#1} }
              }
          }
          { \benchmark_raw_replicate:nn { \l_benchmark_repeat_int } {#1} }
      }
    \benchmark_display:f
      {
        \fp_to_tl:n
          {
            ( \l_benchmark_time_b_tl - \l_benchmark_time_a_tl )
            / \l_benchmark_repeat_int
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\benchmark_display:n}
%   Function to display the time that was measured.
%   This can be redefined by the user.
%    \begin{macrocode}
\cs_new_protected:Npn \benchmark_display:n #1
  { \iow_term:x { \tl_to_str:n {#1} ~ seconds } }
\cs_generate_variant:Nn \benchmark_display:n { f }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
