% \iffalse
%
%% File l3hooks.dtx Copyright (C) 2011,2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{l3bootstrap}
\GetIdInfo$Id$
  {L3 Experimental hooks}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3hooks} package\\ Hooks^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% At various points in the processing of a document, \LaTeX3 inserts
% tokens stored in the relevant \enquote{hooks}. Programmers can add
% or remove tokens from the beginning or the end of each provided hook.
% Contrarily to the \TeX{} primitive syntax, assignments performed on
% a given hook do not clear previous assignments to the same hook.
% This allows package authors to more easily collaborate.
%
% \section{Hooks}
%
% \subsection{Adding and removing from a hook}
%
% \begin{function}{\hook_pre_push:nn, \hook_post_push:nn}
%   \begin{syntax}
%     \cs{hook_pre_push:nn}  \Arg{hook name} \Arg{tokens}
%     \cs{hook_post_push:nn} \Arg{hook name} \Arg{tokens}
%   \end{syntax}
%   Adds \meta{tokens} either at the start or at the end of
%   the \meta{hook} for an element.
%   See Table~\ref{tab:hooks} for the hooks provided.
% \end{function}
%
% \begin{function}{\hook_pre_pop:n,\hook_post_pop:n}
%   \begin{syntax}
%     \cs{hook_pre_pop:n}  \Arg{hook name}
%     \cs{hook_post_pop:n} \Arg{hook name}
%   \end{syntax}
%   Removes the last \meta{tokens} added to the \meta{hook}.
% \end{function}
%
% \begin{function}{\hook_pre_once:nn, \hook_post_once:nn}
%   \begin{syntax}
%     \cs{hook_pre_once:nn} \Arg{hook name} \Arg{tokens}
%     \cs{hook_pre_once:nn} \Arg{hook name} \Arg{tokens}
%   \end{syntax}
%   Adds \meta{tokens} to the \meta{hook} only for the next
%   occurrence of the element (\emph{i.e.}~after executing
%   the hook once, it automatically pops itself).
% \end{function}
%
% \begin{table}
%   \centering
%   \begin{tabular}{@{}>{\sffamily}rl@{}}
%     \toprule
%     Hook name & Insertion point \\
%     \midrule
%     par       & Paragraph      \\
%     math      & Inline maths   \\
%     display   & Display maths  \\
%     hbox      & Horizontal box \\
%     vbox      & Vertical box   \\
%     cr        & Tabular item   \\
%     \bottomrule
%   \end{tabular}
%   \caption{Hooks based on \TeX{} primitive token parameters.}
%   \label{tab:hooks}
% \end{table}
%
% \subsection{Creating a hook and using its material}
%
% \begin{function}{\hook_new:n}
%   \begin{syntax}
%     \cs{hook_new:n} \Arg{hook name}
%   \end{syntax}
%   Defines a new empty \meta{hook}. The \meta{hook name} should
%   consist of letters only.
% \end{function}
%
% \begin{function}{\hook_use:n}
%   \begin{syntax}
%     \cs{hook_use:n} \Arg{hook name}
%   \end{syntax}
%   Inserts the material of the \meta{hook} in the input stream,
%   and removes from the \meta{hook} all items which have been
%   inserted using the \cs{hook_..._once:nn} functions. For instance,
% \begin{verbatim}
% \hook_new:n {mfoot}
% \cs_new:Npn \mfoot #1 { \footnote { \hook_use:n { mfoot } #1 } }
% \end{verbatim}
%   defines the command \cs{mfoot} to behave somewhat like \cs{footnote}
%   (without optional argument), but inserting the \enquote{mfoot}
%   hook before the argument.
% \end{function}
%
% \subsection{Deprecated \TeX{} syntax}
%
% \begin{function}{\everypar,\everymath,\everydisplay,
%                  \everyhbox,\everyvbox,\evercr}
% \begin{syntax}
%   \cs{everypar} \Arg{tokens}
% \end{syntax}
%   These commands are used to alter/replace the main hooks into these
%   elements. It is \emph{not recommended} that you use these since older
%   package authors may override any changes you make here.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3hooks} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \begin{variable}{\l_hook_tmp_tl}
%   Used for popping items.
%    \begin{macrocode}
\tl_new:N \l_hook_tmp_tl
%    \end{macrocode}
% \end{variable}
%
% \subsection{Creating and using hooks}
%
% \begin{macro}{\hook_new:n}
%   A hook has two pieces: a token list, for use by the kernel team,
%   and a sequence \cs{g_hook_\meta{name}_seq} with
%   a special structure. The items of the sequence can be of two types:
%   \begin{itemize}
%   \item \cs{hook_item:n} for items which should remain
%     (unless explicitly popped),
%   \item \cs{hook_item_once:n} for items which should be removed
%     by \cs{hook_use:n}.
%   \end{itemize}
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \hook_new:n #1
  {
    \tl_new:c   { g_hook_kernel_ #1 _tl }
    \tl_gset:cx { g_hook_kernel_ #1 _tl }
      { \hook_use:N \exp_not:c { g_hook_ #1 _seq } }
    \seq_new:c { g_hook_ #1 _seq }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hook_use:n}
%   Builds the kernel token list, which in most cases calls
%   \cs{hook_use:N} with the \meta{hook} built
%   from the given \meta{hook name}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \hook_use:n #1
  {
    \cs_if_exist_use:cF { g_hook_kernel_ #1 _tl }
      { \msg_error:nnx { hook } { use-unknown-hook } {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hook_use:N}
% \begin{macro}[aux,EXP]{\hook_item:n,\hook_item_once:n}
%   Slightly misnamed, this function places the contents of a hook
%   in the input stream and removes the items that are to be inserted
%   only once. The definition of \cs{__seq_item:n} is such that |#1|
%   expands to the contents of the hook without any \cs{hook_item:n}
%   nor \cs{hook_item_once:n}. On the other hand, the expansion of
%   \cs{seq_use:N} |#1| does not involve \cs{__seq_item:n}, but
%   \cs{hook_item:n} and \cs{hook_item_once:n}, which keep and drop
%   their argument, respectively.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \hook_use:N #1
  {
    \group_begin:
    \cs_set:Npn \__seq_item:n ##1 { \etex_unexpanded:D \use_none:n ##1 }
    \use:x
      {
        \group_end:
        \exp_not:n { \tl_gset:Nx #1 { \seq_map_function:NN #1 \use:n } }
        #1
      }
  }
\cs_new_eq:NN \hook_item_once:n \use_none:n
\cs_new:Npn \hook_item:n #1
  { \exp_not:n { \__seq_item:n { \hook_item:n {#1} } } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Adding and removing tokens from a hook}
%
% \begin{macro}{\hook_pre_push:nn, \hook_post_push:nn}
% \begin{macro}{\hook_pre_once:nn, \hook_post_once:nn}
% \begin{macro}[aux]{\hook_put_aux:NNnn}
%   These functions are used to add/remove material from a hook, in
%   addition to the main |\everyxyz| interface. Using push/pop is more
%   reliable since you never know when a dastardly package author overrides
%   anything you might do with |\everyxyz|.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \hook_pre_push:nn
  { \hook_put_aux:NNnn \seq_gput_left:cn \hook_item:n }
\cs_new_protected_nopar:Npn \hook_post_push:nn
  { \hook_put_aux:NNnn \seq_gput_right:cn \hook_item:n }
\cs_new_protected_nopar:Npn \hook_pre_once:nn
  { \hook_put_aux:NNnn \seq_gput_left:cn \hook_item_once:n }
\cs_new_protected_nopar:Npn \hook_post_once:nn
  { \hook_put_aux:NNnn \seq_gput_right:cn \hook_item_once:n }
\cs_new_protected:Npn \hook_put_aux:NNnn #1#2#3#4
  {
    \cs_if_exist:cTF { g_hook_ #3 _seq }
      { #1  { g_hook_ #3 _seq } { #2 {#4} } }
      { \msg_error:nnx { hook } { put-unknown-hook } {#3} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hook_pre_pop:n, \hook_post_pop:n}
% \begin{macro}[aux]{\hook_pop_aux:Nn}
%    \begin{macrocode}
\cs_new_protected:Npn \hook_pre_pop:n
  { \hook_pop_aux:Nn \seq_gpop_left:cN }
\cs_new_protected:Npn \hook_post_pop:n
  { \hook_pop_aux:Nn \seq_gpop_right:cN }
\cs_new_protected:Npn \hook_pop_aux:Nn #1 #2
  {
    \cs_if_exist:cTF { g_hook_ #2 _seq }
      {
        \seq_if_empty:cTF { g_hook_ #2 _ seq }
          { \msg_error:nnx { hook } { empty-hook } {#2} }
          { #1  { g_hook_ #2 _seq } \l_hook_tmp_tl }
      }
      { \msg_error:nnx { hook } { pop-unknown-hook } {#2} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Creating hooks on \TeX{}'s token parameters}
%
%    \begin{macrocode}
\group_begin:
%    \end{macrocode}
%
% \begin{macro}[aux]{\hook_new:nNN}
%   The hook-generator function. The primitive hook is already stored
%   by \pkg{l3names} in \cs{tex_every\meta{name}:D}, where \meta{name} is one
%   of the hook names in Table~\ref{tab:hooks}. In package mode, we keep
%   the interface \cs{every\meta{name>}}|={...}| by defining each of those
%   control sequences as toks registers.
%    \begin{macrocode}
  \cs_set_protected_nopar:Npn \hook_new:nNN #1#2#3
    {
      \hook_new:n {#1}
%<*package>
      \cs_undefine:N #3
      \newtoks #3
      \tex_global:D #3 = #2
      \hook_pre_push:nn {#1} { \tex_the:D #3 }
%</package>
      \use:x
        { \tex_global:D #2 = { \exp_not:c { g_hook_kernel_ #1 _tl } } }
    }
%    \end{macrocode}
% \end{macro}
%
%   Don't bother with \cs{everyjob} or \cs{everyeof}.
%
%   In format mode, the second argument is not used at all.
%   The user-level \cs{every\meta{xyz}} functions are \emph{not}
%   provided as hooks.
%   In \LaTeXe{}, we want to replace the user-level \cs{every\meta{xyz}}
%   functions. This provides backwards compatibility for existing code.
%    \begin{macrocode}
  \hook_new:nNN { math }    \tex_everymath:D    \frozen@everymath
  \hook_new:nNN { display } \tex_everydisplay:D \frozen@everydisplay
  \hook_new:nNN { par }     \tex_everypar:D     \everypar
  \hook_new:nNN { hbox }    \tex_everyhbox:D    \everyhbox
  \hook_new:nNN { vbox }    \tex_everyvbox:D    \everyvbox
  \hook_new:nNN { cr }      \tex_everycr:D      \everycr
%    \end{macrocode}
%   Clean-up: (the allocator function is never to be used again).
%    \begin{macrocode}
\group_end:
%    \end{macrocode}
%
% \subsubsection{Fix the \texttt{cr} hook}
%
% \begin{macro}{\hook_cr_use:N}
%   The \texttt{cr} hook often contains the \cs{tex_noalign:D}
%   primitive. \TeX{} does not allow assignments, or groups
%   between the \cs{tex_cr:D} and a \cs{tex_noalign:D}.
%   Hence, the normal approach of \cs{hook_use:N} will fail
%   rather loudly. However, we can ourselves use a \cs{tex_noalign:D}
%   group rather than the normal \cs{group_begin:} \ldots{} \cs{group_end:}.
%   Furthermore, \cs{hook_cr_use:N} should not be protected! This is
%   not a problem, since it is only use within \TeX{}'s own
%   \cs{tex_everycr:D}, which has no reason to be unpacked within
%   an \texttt{x}-type argument.
%    \begin{macrocode}
\cs_new_nopar:Npn \hook_cr_use:N #1
  {
    \tex_noalign:D \c_group_begin_token
    \cs_set:Npn \__seq_item:n ##1 { \etex_unexpanded:D \use_none:n ##1 }
    \use:x
      {
        \exp_not:n { \tl_gset:Nx #1 { \seq_map_function:NN #1 \use:n } }
        \c_group_end_token
        #1
      }
  }
\tl_gset:Nn \g_hook_kernel_cr_tl { \hook_cr_use:N \g_hook_cr_seq }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Error messages}
%
% Finally, error messages.
%    \begin{macrocode}
\cs_new:Npn \hook_error_aux:nn #1 #2
  {
    You~asked~to~#1~the~hook~#2,~but~I~only~know~
    `par',~`math',~`display',~`hbox',~`vbox'~and~`cr'.
  }
\msg_new:nnnn { hook } { put-unknown-hook }
  { The~hook~`#1'~does~not~exist! }
  { \hook_error_aux:nn {add~material~to} {#1} }
\msg_new:nnnn { hook } { pop-unknown-hook }
  { The~hook~`#1'~does~not~exist! }
  { \hook_error_aux:nn {remove~material~from} {#1} }
\msg_new:nnnn { hook } { use-unknown-hook }
  { The~hook~`#1'~does~not~exist! }
  { \hook_error_aux:nn {use~the~contents~of} {#1} }
\msg_new:nnnn { hook } { empty-hook }
  { The~hook~`#1'~is~empty! }
  { \hook_error_aux:nn {remove~material~from} {#1} }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
