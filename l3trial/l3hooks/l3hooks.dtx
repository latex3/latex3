% \iffalse meta-comment
%
%% File: l3hooks.dtx
%
% Copyright(C) 2019 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "l3trial bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver|package>
\RequirePackage{expl3}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3hooks} package\\ Hook management^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2019-05-28}
%
% \maketitle
%
% \begin{documentation}
%
% \section{\pkg{l3hooks} documentation}
%
% Hooks are points in a code path where material may be injected by
% \enquote{user} modules. In \pkg{l3hooks}, each hook entry is given a
% description made up of the \meta{user} module and an optional sub-description.
% Hook entries are managed on a global basis.
%
% \subsection{Repeated hooks}
%
% Repeated hooks may be inserted at multiple positions in a document run, for
% example at the start of every section. These hooks are created on a per-module
% basis, allowing multiple \enquote{provider} modules to use simple names for
% their hooks.
%
% Entries may be added to all uses of a hook or strictly to the next use only.
% This allows one-off effects to be achieved without having to test within
% the \enquote{user} code.
%
% \begin{function}[added = 2019-06-06]
%   {\hook_new:nn}
%   \begin{syntax}
%     \cs{hook_new:nn} \Arg{module} \Arg{hook}
%   \end{syntax}
%   Creates a new \meta{hook} for the \meta{module} specified.
% \end{function}
%
% \begin{function}[added = 2019-06-07]
%   {
%     \hook_gadd_all:nnnn,  \hook_gadd_next:nnnn,
%     \hook_gadd_all:nnnnn, \hook_gadd_next:nnnnn,
%   }
%   \begin{syntax}
%     \cs{hook_gadd_all:nnnn} \Arg{provider} \Arg{hook} \Arg{user} \Arg{code}
%     \cs{hook_gadd_all:nnnnn} \Arg{provider} \Arg{hook} \Arg{user} \Arg{desc} \Arg{code}
%   \end{syntax}
%   Adds an entry to the \meta{hook} of the \meta{provider} module. At point
%   of use, this which will execute the \meta{code} from \meta{user} module. Each
%   entry must be unique, and thus repeated use of the
%   same \meta{user} (or \meta{user}/\meta{desc}) will overwrite older
%   entries. Entries are added at the \emph{end} of the hook.
% \end{function}
%
% \begin{function}[added = 2019-06-03]{\hook_use:nn}
%   \begin{syntax}
%     \cs{hook_use:nn} \Arg{module} \Arg{hook}
%   \end{syntax}
%   Inserts the entries in the \meta{hook} for the \meta{module} at this
%   point in the source. The |next| hook entries are inserted \emph{after}
%   those for |all|. The |next| hook is cleared before it is used, thus it
%   is possible for a |next| entry to add to the following |next| hook.
% \end{function}
%
% \begin{function}[added = 2019-06-07]{\hook_show:nn, \hook_log:nn}
%   \begin{syntax}
%     \cs{hook_show:nn} \Arg{module} \Arg{hook}
%   \end{syntax}
%   Displays entries in the \meta{hook} for the \meta{module} in the terminal
%   or writes them to the log, respectively.
% \end{function}
%
% \subsection{Document-wide hooks}
%
% Document-wide hooks may be used only once in a document. These are therefore
% not divided by module but rather have their own interfaces and a single
% namespace for all hooks. Adding to a document-wide hook after it has been used
% will raise an error.
%
% \begin{function}[added = 2019-06-06]{\hook_document_new:n}
%   \begin{syntax}
%     \cs{hook_document_new:n} \Arg{hook}
%   \end{syntax}
%   Creates a new \meta{hook} for use in a document-wide context. The
%   \meta{hook} may only be used once, after which point it is disable.
% \end{function}
%
% \begin{function}[added = 2019-06-06]
%   {\hook_document_gadd:nnn, \hook_document_gadd:nnnn}
%   \begin{syntax}
%     \cs{hook_document_gadd:nnn} \Arg{hook} \Arg{user} \Arg{code}
%     \cs{hook_document_gadd:nnnn} \Arg{hook} \Arg{user} \Arg{desc} \Arg{code}
%   \end{syntax}
%   Pushes an entry to the document-wide \meta{hook}. As for repeated hooks,
%   the code may be named using just the \meta{user} module name or the
%   \meta{user}/\meta{desc} combination.
% \end{function}
%
% \begin{function}[added = 2019-06-06]{\hook_document_use:n}
%   \begin{syntax}
%     \cs{hook_document_use:n} \Arg{hook}
%   \end{syntax}
%   Inserts the document-wide \meta{hook} at the current position. After this
%   point, the \meta{hook} may not be used again, nor may any material be
%   added to it.
% \end{function}
%
% \begin{function}[added = 2019-06-07]
%   {\hook_document_show:nn, \hook_document_log:nn}
%   \begin{syntax}
%     \cs{hook_document_show:n}\Arg{hook}
%   \end{syntax}
%   Displays entries in the \meta{hook} for the \meta{module} in the terminal
%   or writes them to the log, respectively.
% \end{function}
%
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3hooks} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=hook>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage{l3hooks}{2019-05-28}{}
  {L3 Experimental hook management}
%</package>
%    \end{macrocode}
%
% \subsection{Standard hooks}
%
% \begin{macro}{\hook_new:nn}
%   Simply create the structures at this point: nothing fancy.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_new:nn #1#2
  {
    \cs_if_free:cTF { g_@@_next_ #1 _ #2 _seq }
      {
        \prop_new:c { g_@@_all_ #1 _ #2 _prop }
        \prop_new:c { g_@@_next_ #1 _ #2 _prop }
        \seq_new:c { g_@@_all_ #1 _ #2 _seq }
        \seq_new:c { g_@@_next_ #1 _ #2 _seq }
      }
      {
        \__kernel_msg_error:nnnn { hooks }
          {  hook-already-defined } {#1} {#2}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hook_gadd_all:nnnn, \hook_gadd_next:nnnn}
% \begin{macro}{\hook_gadd_all:nnnnn, \hook_gadd_next:nnnnn}
% \begin{macro}{\@@_gadd:nnnnn}
%   Pushing code to a hook requires that we store the order (a sequence) and
%   the code (as a prop). Where a module uses a description for hook content,
%   we simply join that onto the module name.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_gadd_all:nnnn #1#2#3#4
  { \@@_gadd:nnnnn { all } {#1} {#2} {#3} {#4} }
\cs_new_protected:Npn \hook_gadd_next:nnnn #1#2#3#4
  { \@@_gadd:nnnnn { next } {#1} {#2} {#3} {#4} }
\cs_new_protected:Npn \hook_gadd_all:nnnnn #1#2#3#4#5
  { \@@_gadd:nnnnn { all } {#1} {#2} { #3 / #4 } {#5} }
\cs_new_protected:Npn \hook_gadd_next:nnnnn #1#2#3#4#5
  { \@@_gadd:nnnnn { next } {#1} {#2} { #3 / #4 } {#5} }
\cs_new_protected:Npn \@@_gadd:nnnnn #1#2#3#4#5
  {
    \seq_if_exist:cTF { g_@@_next_ #2 _ #3 _seq }
      {
        \seq_gremove_all:cn { g_@@_ #1 _ #2 _ #3 _seq } {#4}
        \seq_gput_right:cn { g_@@_ #1 _ #2 _ #3 _seq } {#4}
        \prop_gput:cnn { g_@@_ #1 _ #2 _ #3 _prop } {#4} {#5}
      }
      {
        \__kernel_msg_error:nnnn { hooks }
          {  unknown-hook } {#2} {#3}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hook_use:nn}
% \begin{macro}{\@@_use:n}
%   To insert a hook, first we deal with the |all| hook data and then the
%   |next|. The latter is set up such that the insertions will be ready-to-go
%   with a cleared hook, to cover the case where repeated use of the |next|
%   hook is needed.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_use:nn #1#2
  {
    \cs_if_free:cTF { g_@@_next_ #1 _ #2 _seq }
      {
        \__kernel_msg_error:nnnn { hooks }
          {  unknown-hook } {#1} {#2}
      }
      {
        \cs_set:Npn \@@_use:n ##1
          { \prop_item:cn { g_@@_all_ #1 _ #2 _prop } {##1} }
        \seq_map_function:cN { g_@@_all_ #1 _ #2 _seq } \@@_use:n
        \cs_set:Npn \@@_use:n ##1
          {
            \exp_not:f
              {
                \prop_item:cn { g_@@_next_ #1 _ #2 _prop }
                  {##1}
              }
          }
        \use:x
          {
            \seq_gclear:c { g_@@_next_ #1 _ #2 _seq }
            \seq_map_function:cN { g_@@_next_ #1 _ #2 _seq }
              \@@_use:n
          }
      }
  }
\cs_new:Npn \@@_use:n #1 { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Document-wide hooks}
%
% \begin{macro}{\hook_document_new:n}
%   A simpler version of the standard set up.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_document_new:n #1
  {
    \cs_if_free:cTF { g_@@_document_ #1 _seq }
      {
        \prop_new:c { g_@@_document_ #1 _prop }
        \seq_new:c { g_@@_document_ #1 _seq }
        \bool_new:c { g_@@_document_ #1 _used_bool }
      }
      {
        \__kernel_msg_error:nnn { hooks }
          {  document-hook-already-defined } {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\hook_document_gadd:nnn}
% \begin{macro}{\hook_document_gadd:nnnn}
% \begin{macro}{\@@_document_gadd:nnn}
%   Much the same as the generic case, but with a check for the hook being
%   disabled.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_document_gadd:nnn #1#2#3
  { \@@_document_gadd:nnn {#1} {#2} {#3} }
\cs_new_protected:Npn \hook_document_gadd:nnnn #1#2#3#4
  { \@@_document_gadd:nnn {#1} { #2 / #3 }  {#4} }
\cs_new_protected:Npn \@@_document_gadd:nnn #1#2#3
  {
    \seq_if_exist:cTF { g_@@_document_ #1 _seq }
      {
        \bool_if:cTF { g_@@_document_ #1 _used_bool }
          {
            \__kernel_msg_error:nnnn { hooks }
              {  document-hook-used } {#1} { add~to }
          }
          {
            \seq_gremove_all:cn { g_@@_document_ #1 _seq } {#2}
            \seq_gput_right:cn { g_@@_document_ #1 _seq } {#2}
            \prop_gput:cnn { g_@@_document_ #1 _prop } {#2} {#3}
          }
      }
      {
        \__kernel_msg_error:nnn { hooks }
          {  unknown-document-hook } {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hook_document_use:n}
%   As this can only fire once, we have to check for it being disabled.
%    \begin{macrocode}
\cs_new_protected:Npn \hook_document_use:n #1
  {
    \cs_if_free:cTF { g_@@_document_ #1 _seq }
      {
        \__kernel_msg_error:nnn { hooks }
          {  unknown-document-hook } {#1}
      }
      {
        \bool_if:cTF { g_@@_document_ #1 _used_bool }
          {
            \__kernel_msg_error:nnnn { hooks }
              {  document-hook-used } {#1} { use }
          }
          {
            \bool_gset_true:c { g_@@_document_ #1 _used_bool }
            \cs_set:Npn \@@_use:n ##1
              { \prop_item:cn { g_@@_document_ #1 _prop } {##1} }
            \seq_map_function:cN { g_@@_document_ #1 _seq } \@@_use:n
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Showing hooks}
%
% \begin{macro}{\hook_show:nn, \hook_log:nn}
% \begin{macro}{\@@_show:Nnn}
%    \begin{macrocode}
\cs_new_protected:Npn \hook_show:nn #1#2
   { \@@_show:Nnn \msg_show:nnxxxx {#1} {#2} }
\cs_new_protected:Npn \hook_log:nn #1#2
   { \@@_show:Nnn \msg_log:nnxxxx {#1} {#2} }
\cs_new_protected:Npn \@@_show:Nnn #1#2#3
  {
    \cs_if_free:cTF { g_@@_next_ #2 _ #3 _seq }
      {
        \__kernel_msg_error:nnnn { hooks }
          {  unknown-hook } {#2} {#3}
      }
      {
        #1 { LaTeX/hooks } { show-hook }
          {#2} {#3}
          {
            \seq_map_function:cN { g_@@_all_ #2 _ #3 _seq } \msg_show_item:n
          }
          {
            \seq_map_function:cN { g_@@_next_ #2 _ #3 _seq } \msg_show_item:n
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hook_document_show:n, \hook_document_log:n}
% \begin{macro}{\@@_document_show:Nn}
%    \begin{macrocode}
\cs_new_protected:Npn \hook_document_show:n #1
   { \@@_document_show:Nn \msg_show:nnxxxx {#1} }
\cs_new_protected:Npn \hook_document_log:n #1
   { \@@_document_show:Nn \msg_log:nnxxxx {#1} }
\cs_new_protected:Npn \@@_document_show:Nn #1#2
  {
    \cs_if_free:cTF { g_@@_document_ #2 _seq }
      {
        \__kernel_msg_error:nnn { hooks }
          {  unknown-document-hook } {#2}
      }
      {
        #1 { LaTeX/hooks } { show-document-hook }
          {#2}
          { \seq_map_function:cN { g_@@_document_ #2 _seq } \msg_show_item:n  }
          { } { }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\__kernel_msg_new:nnnn { hooks } { document-hook-already-defined }
  { Hook~'#1'~already~defined. }
  {
    LaTeX~has~been~asked~to~create~a~new~document-wide~hook~'#1'~
    but~this~name~has~already~been~used~elsewhere.
  }
\__kernel_msg_new:nnnn { hooks } { hook-already-defined }
  { Hook~'#1/#2'~already~defined. }
  {
    LaTeX~has~been~asked~to~create~a~new~hook~'#2'~for~module~'#1'~
    but~this~name~has~already~been~used~elsewhere.
  }
\__kernel_msg_new:nnnn { hooks } { document-hook-used }
  { Document~hook~'#1'~has~already~been~used. }
  {
    LaTeX~has~been~asked~to~ #2 ~document-wide~hook~'#1'~
    but~this~hook~has~already~been~used.
  }
\__kernel_msg_new:nnnn { hooks } { unknown-document-hook }
  { Unknown~document-wide~hook~'#1'. }
  {
    LaTeX~has~been~asked~insert~a~document-wide~hook~'#1'~
    but~this~name~has~not~been~defined.
  }
\__kernel_msg_new:nnnn { hooks } { unknown-hook }
  { Unknown~hook~'#1/#2'. }
  {
    LaTeX~has~been~asked~insert~a~hook~'#2'~for~module~'#1'~
    but~this~name~has~not~been~defined.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\__kernel_msg_new:nnn { hooks } { show-document-hook }
  {
    Document~hook~'#1'~
    \tl_if_empty:nTF {#2}
      { has~no~entries \\ >~ . }
      { contains~entries~: #2 . }
  }
\__kernel_msg_new:nnn { hooks } { show-hook }
  {
    Module~#1~hook~'#2'~
    \tl_if_empty:nTF {#3}
      { has~no~entries~for~all~uses~ }
      { contains~entries~for~all~uses: #3 \\ }
    \tl_if_empty:nTF {#4}
      { and~has~no~entries~for~the~next~use \\ >~ . }
      { and~has~the~following~entries~for~the~next~use: #4 . }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
