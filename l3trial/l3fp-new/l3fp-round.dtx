% \iffalse meta-comment
%
%% File: l3fp-round.dtx Copyright(C) 2011-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver>
\RequirePackage{expl3}
\GetIdInfo$Id: l3fp-round.dtx 3549 2012-03-13 20:54:30Z bruno $
  {L3 Experimental rounding of floating points}
\documentclass[full]{l3doc}
\usepackage{l3fp-new}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{l3fp-round} package\\ Rounding floating points^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-round} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
% \subsection{Rounding tools}
%
% \begin{variable}
%   {
%     \l_fp_rounding_mode_int,
%     \c_fp_rounding_mode_nearest_int,
%     \c_fp_rounding_mode_ninf_int,
%     \c_fp_rounding_mode_zero_int,
%     \c_fp_rounding_mode_pinf_int
%   }
%    \begin{macrocode}
\int_new:N    \l_fp_rounding_mode_int
\int_const:Nn \c_fp_rounding_mode_nearest_int {0}
\int_const:Nn \c_fp_rounding_mode_ninf_int    {1}
\int_const:Nn \c_fp_rounding_mode_zero_int    {2}
\int_const:Nn \c_fp_rounding_mode_pinf_int    {3}
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int, rEXP]{\fp_aux_round:NNN}
% \begin{macro}[aux, rEXP]
%   {
%     \fp_aux_round_to_nearest:NNN,
%     \fp_aux_round_to_ninf:NNN,
%     \fp_aux_round_to_zero:NNN,
%     \fp_aux_round_to_pinf:NNN
%   }
%   \begin{syntax}
%     \cs{fp_aux_round:NNN} \meta{final sign} \meta{digit1} \meta{digit2}
%   \end{syntax}
%   This expands to \cs{c_zero} if in the current rounding mode a number
%   of sign \meta{final sign} and ending with the \meta{digits} should
%   be rounded towards zero (truncated), and to \cs{c_one} if it should
%   be rounded away from zero.  Typically used within the scope of an
%   \cs{int_eval:w}, to add~$1$ if needed, and thereby round correctly.
%
%   It is very important that \meta{final sign} be the final sign of the
%   result. Otherwise, the result will be incorrect in the case of
%   rounding towards~$-\infty$ or towards~$+\infty$. Also recall that
%   \meta{final sign} is~$0$ for positive, and~$2$ for negative.
%
%   We use a trick similar to \cs{prg_return_true:}
%   and \cs{prg_return_false:}, but more dirty. By default,
%   the functions below return \cs{c_zero}, but this is superseded
%   by \cs{fp_aux_round_return_one:}, which instead returns \cs{c_one},
%   expanding everything and removing \cs{c_zero} in the process.
%   In the case of rounding towards~$\pm\infty$, $0$, this is not
%   really useful, but it prepares us for the \enquote{round to nearest,
%     ties to even} mode.
%    \begin{macrocode}
\cs_new:Npn \fp_aux_round_return_one:
  { \exp_after:wN \c_one \tex_romannumeral:D }
\cs_new:Npn \fp_aux_round_to_ninf:NNN #1 #2 #3
  {
    \if:w 2 #1
      \if_num:w #3 > \c_zero
        \fp_aux_round_return_one:
      \fi:
    \fi:
    \c_zero
  }
\cs_new:Npn \fp_aux_round_to_zero:NNN #1 #2 #3 { \c_zero }
\cs_new:Npn \fp_aux_round_to_pinf:NNN #1 #2 #3
  {
    \if:w 0 #1
      \if_num:w #3 > \c_zero
        \fp_aux_round_return_one:
      \fi:
    \fi:
    \c_zero
  }
%    \end{macrocode}
%   The \enquote{round to nearest} mode is the default.
%   If the \meta{digit2} is larger than~$5$, then round up.
%   If it is less than~$5$, round down. If it is exactly $5$,
%   then round such that \meta{digit1} plus the result is even.
%   In other words, round up if \meta{digit1} is odd.
%    \begin{macrocode}
\cs_new:Npn \fp_aux_round_to_nearest:NNN #1 #2 #3
  {
    \if_num:w #3 > \c_five
      \fp_aux_round_return_one:
    \else:
      \if:w 5 #3
        \if_int_odd:w #2 \exp_stop_f:
          \fp_aux_round_return_one:
        \fi:
      \fi:
    \fi:
    \c_zero
  }
\cs_new_eq:NN \fp_aux_round:NNN \fp_aux_round_to_nearest:NNN
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[rEXP, int]{\fp_aux_round_s:NNNw}
%   \begin{syntax}
%     \cs{fp_aux_round_s:NNNw} \meta{final sign}
%     ~~\meta{digit} \meta{more digits} |;|
%   \end{syntax}
%   Expands to \cs{c_zero} or \cs{c_one}, followed by a
%   semicolon. The value \cs{c_zero} is returned if rounding
%   (in the current mode) the number $\meta{final sign}
%   \meta{digit}.\meta{more digits}$ to an integer yields
%   $\meta{final sign} \meta{digit}$, and \cs{c_one} if it
%   yields $\meta{final sign} (\meta{digit} + 1)$. See
%   \cs{fp_aux_round:NNN} for details on the various
%   rounding modes.
%
%   Note that \meta{more digits} must be a digit, followed
%   by a piece that does not overflow a \cs{int_use:N}
%   \cs{int_eval:w} construction. The only relevant
%   information about this piece is whether it is zero or not.
%^^A Optimize for various rounding modes.
%    \begin{macrocode}
\cs_new:Npn \fp_aux_round_s:NNNw #1 #2 #3 #4;
  {
    \exp_after:wN \fp_aux_round:NNN
    \exp_after:wN #1
    \exp_after:wN #2
    \int_use:N \int_eval:w
      \if_int_odd:w 0 \if:w 0 #3 1 \fi:
                      \if:w 5 #3 1 \fi:
                \exp_stop_f:
        \if_num:w \int_eval:w #4 > \c_zero
          1 +
        \fi:
      \fi:
      #3
    ;
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int, rEXP]{\fp_aux_round:NNNN}
%   \begin{syntax}
%     \cs{fp_aux_round:NNNN} \meta{final sign} \meta{digit} \meta{2d}
%   \end{syntax}
%   Identical to \cs{fp_aux_round_s:NNNw} except for trailing semicolon.
%   \footnote{Bruno: I shouldn't have almost identical functions like this.}
%   \begin{macrocode}
\cs_new:Npn \fp_aux_round:NNNN #1 #2 #3 #4
  {
    \exp_after:wN \fp_aux_round:NNN
    \exp_after:wN #1
    \exp_after:wN #2
    \int_use:N \int_eval:w
      \if_int_odd:w 0 \if:w 0 #3 1 \fi:
                      \if:w 5 #3 1 \fi:
                \exp_stop_f:
        \if_num:w #4 > \c_zero
          1 +
        \fi:
      \fi:
      #3
    \int_eval_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int, rEXP]{\fp_aux_round_neg:NNN}
% \begin{macro}[aux, EXP]
%   {
%     \fp_aux_round_to_nearest_neg:NNN,
%     \fp_aux_round_to_ninf_neg:NNN,
%     \fp_aux_round_to_zero_neg:NNN,
%     \fp_aux_round_to_pinf_neg:NNN
%   }
%   \begin{syntax}
%     \cs{fp_aux_round_neg:NNN} \meta{final sign} \meta{digit1} \meta{digit2}
%   \end{syntax}
%   This expands to \cs{c_zero} or \cs{c_one}. Consider a number of
%   the form $ \meta{final sign}.X\ldots X\meta{digit1} $ with exactly
%   $15$ (non-all-zero) digits before \meta{digit1}, and subtract from it
%   $\meta{final sign}.0\ldots0\meta{digit2}$, where there are $16$ zeros.
%   If in the current rounding mode the result should be rounded down,
%   then this function returns \cs{c_one}. Otherwise, \emph{i.e.},
%   if the result is rounded back to the first operand, then this function
%   returns \cs{c_zero}.
%    \begin{macrocode}
\cs_new:Npn \fp_aux_round_to_ninf_neg:NNN #1 #2 #3
  {
    \if:w 0 #1
      \if_num:w #3 > \c_zero
        \fp_aux_round_return_one:
      \fi:
    \fi:
    \c_zero
  }
\cs_new:Npn \fp_aux_round_to_zero_neg:NNN #1 #2 #3
  {
    \if_num:w #3 > \c_zero
      \fp_aux_round_return_one:
    \fi:
    \c_zero
  }
\cs_new:Npn \fp_aux_round_to_pinf_neg:NNN #1 #2 #3
  {
    \if:w 2 #1
      \if_num:w #3 > \c_zero
        \fp_aux_round_return_one:
      \fi:
    \fi:
    \c_zero
  }
%    \end{macrocode}
%   It turns out that this negative \enquote{round to nearest}
%   is identical to the positive one. And this is the default mode.
%    \begin{macrocode}
\cs_new_eq:NN \fp_aux_round_to_nearest_neg:NNN
    \fp_aux_round_to_nearest:NNN
\cs_new_eq:NN \fp_aux_round_neg:NNN
    \fp_aux_round_to_nearest_neg:NNN
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Rounding floating point numbers}
%
% \begin{macro}[int, EXP]{\fp_round:ww}
%    \begin{macrocode}
\cs_new:Npn \fp_round:Nww #1#2;#3;
  {
    \fp_aux_small_int:wTF #3; { \fp_round:Nwn #1#2; }
      {
        \fp_error:x { {round(x,n)~with~n=} \fp_to_tl:w #3; }
        \exp_after:wN \c_nan_fp
      }
  }
\cs_new:Npn \fp_round:Nwn #1 \s_fp \fp_use:w #2#3#4; #5
  {
    \if_meaning:w 1 #2
      \exp_after:wN \fp_round_normal:NwNNnw
      \exp_after:wN #1
      \int_value:w #5
    \else:
      \exp_after:wN \fp_aux_exp_after_fp:wN
    \fi:
    \s_fp \fp_use:w #2#3#4;
  }
\cs_new:Npn \fp_round_normal:NwNNnw #1#2 \s_fp \fp_use:w 1#3#4#5;
  {
    \fp_aux_decimate:nNnnnn { \c_sixteen - #4 - #2 }
      \fp_round_normal_ii:NnnwNNnn #5 #1 #3 {#4} {#2}
  }
\cs_new:Npn \fp_round_normal_ii:NnnwNNnn #1#2#3#4; #5#6
  {
    \exp_after:wN \fp_round_normal_iii:NNwNnn
    \int_use:N \int_eval:w
      \if_int_compare:w #2 > \c_zero
        1 \int_value:w #2
        \exp_after:wN \fp_round_pack:Nw
        \int_use:N \int_eval:w 1#3 +
      \else:
        \if_int_compare:w #3 > \c_zero
          1 \int_value:w #3 +
        \fi:
      \fi:
      \exp_after:wN #5
      \exp_after:wN #6
      \use_none:nnnnnnn #3
      #1
      \int_eval_end:
      0000 0000 0000 0000 ; #6
  }
\cs_new:Npn \fp_round_pack:Nw #1
  { \if_meaning:w 2 #1 + \c_one \fi: \int_eval_end: }
\cs_new:Npn \fp_round_normal_iii:NNwNnn #1 #2
  {
    \if_meaning:w 0 #2
      \exp_after:wN \fp_round_special:NwwNnn
      \exp_after:wN #1
    \fi:
    \fp_aux_pack_twice_four:wNNNNNNNN
    \fp_aux_pack_twice_four:wNNNNNNNN
    \fp_round_normal_end:wwNnn
    ; #2
  }
\cs_new:Npn \fp_round_normal_end:wwNnn #1;#2;#3#4#5
  {
    \exp_after:wN \fp_aux_exp_after_fp:wN \tex_romannumeral:D -`0
    \fp_aux_sanitize:Nw #3 #4 ; #1 ;
  }
\cs_new:Npn \fp_round_special:NwwNnn #1#2;#3;#4#5#6
  {
    \if_meaning:w 0 #1
      \fp_aux_case_return:nw
        { \exp_after:wN \fp_aux_zero_fp:N \exp_after:wN #4 }
    \else:
      \exp_after:wN \fp_round_special_aux:Nw
      \exp_after:wN #4
      \int_use:N \int_eval:w \c_one
        \if_meaning:w 1 #1 -#6 \else: +#5 \fi:
    \fi:
    ;
  }
\cs_new:Npn \fp_round_special_aux:Nw #1#2;
  {
    \exp_after:wN \fp_aux_exp_after_fp:wN \tex_romannumeral:D -`0
    \fp_aux_sanitize:Nw #1#2; {1000}{0000}{0000}{0000};
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintChanges
%
% \PrintIndex