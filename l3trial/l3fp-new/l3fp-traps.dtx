% \iffalse
%%
%% File: l3fp-traps.dtx Copyright (C) 2011-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``l3trial bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver|package>
\RequirePackage{l3fp-new}
\GetIdInfo$Id: l3fp-traps.dtx 2479 2011-06-19 21:57:25Z bruno $
  {L3 Experimental floating-point exception trapping}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{l3fp-new}
\begin{document}
  \tableofcontents
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \textsf{l3fp-traps} package\thanks{This file
%         has version number \ExplFileVersion, last
%         revised \ExplFileDate.}\\
% Trapping floating-point exceptions}
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
% \date{Released \ExplFileDate}
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
% \subsection{Flags}
%
% \begin{macro}{\fp_flag_off:N}
%   Turns the given flag off.
%   We're careful not to apply that to a non-flag.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_flag_off:N #1
  {
    \cs_if_free:NTF #1
      { \cs_set_eq:NN #1 \tex_undefined:D }
      { \msg_error:nnx { fp } { not-a-flag } { \token_to_str:N #1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\fp_flag_on:N}
%   Turns the flag on, \emph{expandably}.
%   We are careful not to apply that to a non-flag.
%    \begin{macrocode}
\cs_new:Npn \fp_flag_on:N #1
  {
    \cs_if_free:NTF #1
      { \exp_args:Nc \use_none:n { \cs_to_str:N #1 } }
      { \msg_expandable_kernel_error:nnn { fp } { not-a-flag } {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP,pTF]{\fp_if_flag_on:N}
%   Returns true if the flag is on, false otherwise. A non-flag
%   causes an error and returns false.
%    \begin{macrocode}
\prg_new_conditional:Npnn \fp_if_flag_on:N #1 { p , T , F , TF }
  {
    \if_meaning:w \scan_stop: #1
      \prg_return_true:
    \else:
      \reverse_if:N \if_meaning:w \tex_undefined:D #1
        \msg_expandable_kernel_error:nnn { fp } { not-a-flag } {#1}
      \fi:
      \prg_return_false:
    \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{
%     \l_fp_invalid_operation_flag_token,
%     \l_fp_division_by_zero_flag_token,
%     \l_fp_overflow_flag_token,
%     \l_fp_underflow_flag_token,
%     \l_fp_inexact_flag_token}
%   The five exceptions defined by the IEEE standard.
%    \begin{macrocode}
\fp_flag_off:N \l_fp_invalid_operation_flag_token
\fp_flag_off:N \l_fp_division_by_zero_flag_token
\fp_flag_off:N \l_fp_overflow_flag_token
\fp_flag_off:N \l_fp_underflow_flag_token
\fp_flag_off:N \l_fp_inexact_flag_token
%    \end{macrocode}
% \end{macro}
%
% \subsection{Traps}
%
% \begin{macro}{\fp_trap_invalid_operation:Nww}
% \begin{macro}{\fp_trap_division_by_zero:Nww}
%    \begin{macrocode}
\cs_generate_internal_variant:n { NNff }
\cs_new_nopar:Npn \fp_trap_invalid_operation:Nww #1 #2; #3;
  {
    % \bool_if:NT \l_fp_catch_exceptions_bool
    %   {
    %     \exp_args:NNff \fp_trap_invalid_operation_msg:Nnn
    %       #1 { \fp_to_tl:w #2; } { \fp_to_tl:w #3; }
    %   }
    \c_nan_fp
  }
\cs_new_nopar:Npn \fp_trap_invalid_operation_msg:Nnn #1#2#3
  {
    \msg_expandable_kernel_error:nn
      { fp } { bad-operation } {#2~#1~#3}
  }
\cs_new_nopar:Npn \fp_trap_division_by_zero:Nww #1 #2; #3;
  {
    % \exp_args:NNff \fp_trap_division_by_zero:Nnn
    %   #1 { \fp_to_tl:w #2; } { \fp_to_tl:w #3; }
    \c_nan_fp
  }
\cs_new_nopar:Npn \fp_trap_division_by_zero_msg:Nnn #1#2#3
  {
    \msg_expandable_kernel_error:nnn
      { fp } { division-by-zero } { #2~#1~#3 }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fp_trap_overflow:Nw}
% \begin{macro}{\fp_trap_underflow:Nw}
% \begin{macro}{\fp_trap_inexact:Nw}
% \begin{macro}{\fp_trap_inexact_overflow:Nw}
% \begin{macro}{\fp_trap_inexact_underflow:Nw}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\msg_new:nnnn { fp } { not-a-flag }
  { The~control~sequence~#1~exists~and~is~not~a~flag. }
\msg_kernel_new:nnn { fp } { bad-operation }
  { Operation~#1~is~invalid. }
\msg_kernel_new:nnn { fp } { division-by-zero }
  { Division~by~zero~in~#1. }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintChanges
%
% \PrintIndex