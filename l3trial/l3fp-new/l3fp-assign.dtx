% \iffalse
%%
%% File: l3fp-assign.dtx Copyright (C) 2011-2012 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the ``l3trial bundle'' (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%<*driver|package>
\RequirePackage{l3fp-new}
\GetIdInfo$Id$
  {L3 Experimental floating-point assignments}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{l3fp-new}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \textsf{l3fp-assign} package\thanks{This file
%         has version number \ExplFileVersion, last
%         revised \ExplFileDate.}\\
% Floating point expressions}
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
% \date{Released \ExplFileDate}
% \maketitle
%
% \begin{documentation}
%
%   See \texttt{l3fp-new.dtx}.
%
% \end{documentation}
%
% \begin{implementation}
%
% \subsection{\pkg{l3fp-assign} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
% \subsubsection{Assigning values}
%
% \begin{macro}{\fp_new:N}
%   Floating point variables are initialized to be $+0$.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_new:N #1
  { \cs_new_eq:NN #1 \c_zero_fp }
\cs_generate_variant:Nn \fp_new:N {c}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \fp_set:Nn, \fp_set:cn,
%     \fp_gset:Nn, \fp_gset:cn,
%     \fp_const:Nn, \fp_const:cn
%   }
%   Simply use \cs{fp_parse:n} within various \texttt{x}-expanding
%   assignments.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_set:Nn   #1#2
  { \tl_set:Nx #1 { \fp_parse:n {#2} } }
\cs_new_protected:Npn \fp_gset:Nn  #1#2
  { \tl_gset:Nx #1 { \fp_parse:n {#2} } }
\cs_new_protected:Npn \fp_const:Nn #1#2
  { \tl_const:Nx #1 { \fp_parse:n {#2} } }
\cs_generate_variant:Nn \fp_set:Nn {c}
\cs_generate_variant:Nn \fp_gset:Nn {c}
\cs_generate_variant:Nn \fp_const:Nn {c}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \fp_set_eq:NN , \fp_set_eq:cN , \fp_set_eq:Nc , \fp_set_eq:cc,
%     \fp_gset_eq:NN, \fp_gset_eq:cN, \fp_gset_eq:Nc, \fp_gset_eq:cc
%   }
%   Copying a floating point is the same as copying the underlying token
%   list.
%    \begin{macrocode}
\cs_new_eq:NN \fp_set_eq:NN  \tl_set_eq:NN
\cs_new_eq:NN \fp_gset_eq:NN \tl_gset_eq:NN
\cs_generate_variant:Nn \fp_set_eq:NN  { c , Nc , cc }
\cs_generate_variant:Nn \fp_gset_eq:NN { c , Nc , cc }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fp_zero:N, \fp_zero:c, \fp_gzero:N, \fp_gzero:c}
%   Setting a floating point to zero: copy \cs{c_zero_fp}.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_zero:N #1 { \fp_set_eq:NN #1 \c_zero_fp }
\cs_new_protected:Npn \fp_gzero:N #1 { \fp_gset_eq:NN #1 \c_zero_fp }
\cs_generate_variant:Nn \fp_zero:N  { c }
\cs_generate_variant:Nn \fp_gzero:N { c }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {\fp_zero_new:N, \fp_zero_new:c, \fp_gzero_new:N, \fp_gzero_new:c}
%   Set the floating point to zero, or define it if needed.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_zero_new:N #1
  { \fp_if_exist:NTF #1 { \fp_zero:N #1 } { \fp_new:N #1 } }
\cs_new_protected:Npn \fp_gzero_new:N #1
  { \fp_if_exist:NTF #1 { \fp_gzero:N #1 } { \fp_new:N #1 } }
\cs_generate_variant:Nn \fp_zero_new:N  { c }
\cs_generate_variant:Nn \fp_gzero_new:N { c }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[pTF]{\fp_if_exist:N, \fp_if_exist:c}
%   Copies of the \texttt{cs} functions defined in \pkg{l3basics}.
%    \begin{macrocode}
\cs_new_eq:NN \fp_if_exist:NTF \cs_if_exist:NTF
\cs_new_eq:NN \fp_if_exist:NT  \cs_if_exist:NT
\cs_new_eq:NN \fp_if_exist:NF  \cs_if_exist:NF
\cs_new_eq:NN \fp_if_exist_p:N \cs_if_exist_p:N
\cs_new_eq:NN \fp_if_exist:cTF \cs_if_exist:cTF
\cs_new_eq:NN \fp_if_exist:cT  \cs_if_exist:cT
\cs_new_eq:NN \fp_if_exist:cF  \cs_if_exist:cF
\cs_new_eq:NN \fp_if_exist_p:c \cs_if_exist_p:c
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \fp_set_from_dim:Nn,  \fp_set_from_dim:cn,
%     \fp_gset_from_dim:Nn, \fp_gset_from_dim:cn
%   }
%   Use the appropriate function from \pkg{l3fp-convert}.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_set_from_dim:Nn #1#2
  { \tl_set:Nx #1 { \dim_to_fp:n {#2} } }
\cs_new_protected:Npn \fp_gset_from_dim:Nn #1#2
  { \tl_gset:Nx #1 { \dim_to_fp:n {#2} } }
\cs_generate_variant:Nn \fp_set_from_dim:Nn  { c }
\cs_generate_variant:Nn \fp_gset_from_dim:Nn { c }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Showing values}
%
% \begin{macro}{\fp_show:N, \fp_show:c, \fp_show:n}
%   This shows the result of computing its argument.
%   Using two functions, and the odd-looking \cs{use:nn}
%   improves the display slightly.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_show:N #1
  { \exp_args:Nf \fp_show_aux:n { \fp_to_tl:N #1 } }
\cs_new_protected:Npn \fp_show:n #1
  { \exp_args:Nf \fp_show_aux:n { \fp_to_tl:n {#1} } }
\cs_new_protected:Npn \fp_show_aux:n #1 { \use:nn \tl_show:n { {#1} } }
\cs_generate_variant:Nn \fp_show:N { c }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Some useful constants}
%
% \begin{variable}{\c_one_fp, \c_e_fp}
%   Some constants.
%    \begin{macrocode}
\fp_const:Nn \c_e_fp          { 2.718 2818 2845 9045 }
\fp_const:Nn \c_one_fp        { 1 }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\c_pi_fp, \c_one_degree_fp}
%   We do not round $\pi$ to the closest multiple of $10^{-15}$, which
%   would underestimate it by roughly $2.4\cdot 10^{-16}$, but instead
%   round it up to the next nearest multiple, which is an overestimate
%   by roughly $7.7\cdot 10^{-16}$.  This particular choice of rounding
%   has very nice properties: it is exactly divisible by $4$ and by
%   $180$ as a $16$-digit precision floating point number, hence
%   ensuring that $\sin(180\mathrm{deg}) = sin(2\pi) = 0$ exactly, with
%   no rounding artifact.
%    \begin{macrocode}
\fp_const:Nn \c_pi_fp         { 3.141 5926 5358 9794 }
\fp_const:Nn \c_one_degree_fp { 0.0 1745 3292 5199 4330 }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\c_undefined_fp}
%   ^^A todo: remove.
%   For compatibility, we also define \cs{c_undefined_fp} as a
%   \texttt{nan}.
%    \begin{macrocode}
\fp_const:Nn \c_undefined_fp { nan }
%    \end{macrocode}
% \end{variable}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintChanges
%
% \PrintIndex