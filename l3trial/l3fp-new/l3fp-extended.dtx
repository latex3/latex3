% \iffalse meta-comment
%
%% File: l3fp-extended.dtx Copyright (C) 2011 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{l3fp-new}
\GetIdInfo$Id: l3fp-extended.dtx 2474 2011-06-17 12:54:02Z bruno $
  {L3 Experimental floating-point arithmetic}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\usepackage{l3fp-new}
\begin{document}
  \tableofcontents
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \textsf{l3fp-extended} package\thanks{This file
%         has version number \ExplFileVersion, last
%         revised \ExplFileDate.}\\
% Floating point with extended precision for internal use}
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{Implementation}
%
%   We start by ensuring that the required packages are loaded.
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%<*initex|package>
%    \end{macrocode}
%
% \subsection{Dividing by a small integer}
%
% Within computations of Taylor series, we often need to divide an
% extended precision fixed point number ($6$ blocks of 4 digits) by
% a small integer $0<n<10^4$.
%
% \begin{macro}{\fp_fixed_div_int:wwN}
%   \begin{syntax}
%     \cs{fp_fixed_div_int:wwN} \Arg{a_1} \Arg{a_2} \Arg{a_3}
%     \Arg{a_4} \Arg{a_5} \Arg{a_6} |;| \meta{n} |;| \meta{function}
%   \end{syntax}
%   This feeds \meta{function} $6$ braced groups of $4$ digits,
%   followed by a semicolon, result of dividing the fixed point
%   number \meta{a} by the (small) integer \meta{n}.
%   We are working with fixed points rather than floating points,
%   since this is what is needed for log, sine, exponential. The
%   lowest block is wrong by at most...\footnote{Bruno complete,
%     and really analyse this algorithm for overflow etc. Actually,
%     I think \meta{n} doesn't need to be small. And \meta{a1} can
%     be bigger than $10^4$.}
%    \begin{macrocode}
\cs_new:Npn \fp_fixed_div_int:wwN #1#2#3#4#5#6 ; #7 ; #8
  {
    \exp_after:wN \fp_fixed_div_int_after:Nw
    \exp_after:wN #8
    \int_use:N \int_eval:w 9999
      \fp_fixed_div_int_i:w
      #1; #7; \fp_fixed_div_int_ii:w
      {#2} \fp_fixed_div_int_ii:w
      {#3} \fp_fixed_div_int_ii:w
      {#4} \fp_fixed_div_int_ii:w
      {#5} \fp_fixed_div_int_ii:w
      {#6} \fp_fixed_div_int_end:w ;
  }
\cs_new:Npn \fp_fixed_div_int_i:w #1; #2; #3 % a1; n; <func>
  {
    \exp_after:wN #3
    \int_use:N \int_eval:w #1 / #2 - \c_one ; % we need -1 : eTeX rounds
    #2;
    #1;
  }
\cs_new:Npn \fp_fixed_div_int_ii:w #1; #2; #3; #4 % Q1; n; a1; {a2}
  {
    + #1
    \exp_after:wN \fp_fixed_div_int_pack:Nw
    \int_use:N \int_eval:w 9999
      \exp_after:wN \fp_fixed_div_int_i:w
      \int_use:N \int_eval:w #3 - #1*#2 \int_eval_end: #4 ; #2;
  }
\cs_new:Npn \fp_fixed_div_int_end:w #1; #2; #3; % Q6; n; a'6;
  { + #1 + \c_two ; }
\cs_new:Npn \fp_fixed_div_int_pack:Nw #1 #2; { + #1; {#2} }
\cs_new:Npn \fp_fixed_div_int_after:Nw #1 1 #2; { #1 {#2} }
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Adding two extended fixed points}
%
% \begin{macro}{\fp_fixed_add:wwN}
%   \begin{syntax}
%     \cs{fp_fixed_add:wwN}
%     \Arg{X_1} \Arg{X_2} \Arg{X_3} \Arg{X_4} \Arg{X_5} \Arg{X_6} |;|
%     \Arg{Y_1} \Arg{Y_2} \Arg{Y_3} \Arg{Y_4} \Arg{Y_5} \Arg{Y_6} |;|
%     \meta{function}
%   \end{syntax}
%   Feeds $6$ brace groups followed by a semicolon as an argument to
%   \meta{function}. It would be nice to grab the $12$ first brace
%   groups to compute $X + Y$, but that's not possible.
%   Note that the first brace group of the result may have other than
%   $4$ digits (since there can be a carry, or the leading digit
%   may be $0$).
%    \begin{macrocode}
\cs_new:Npn \fp_fixed_add:wwN #1#2#3#4 #5; #6#7 #8; #9
  {
    \exp_after:wN \fp_fixed_add_after:NNNNNNw
    \exp_after:wN #9
    \int_use:N \int_eval:w 4 9999 9995 + #1#2 + #6#7
      \exp_after:wN \fp_fixed_add_pack:NNNNNw
      \int_use:N \int_eval:w 4 9999 9995 + #3#4
        \fp_fixed_add_aux:nnnn #8 + \use:nn #5 ; ;
  }
\cs_new:Npn \fp_fixed_add_aux:nnnn #1#2 #3#4
  {
    + #1#2
    \exp_after:wN \fp_fixed_add_pack:NNNNNw
    \int_use:N \int_eval:w 5 0000 0000 + #3#4
  }
\cs_new:Npn \fp_fixed_add_pack:NNNNNw #1 #2#3#4#5 #6;
  { + #1 ; {#2#3#4#5} {#6} }
\cs_new:Npn \fp_fixed_add_after:NNNNNNw #1 #2 #3#4#5#6 #7;
  {
    \exp_after:wN #1
    \exp_after:wN { \int_use:N \int_eval:w - 5 0000 + #2#3#4#5#6 }
    {#7}
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Difference of two extended fixed points}
%
% \begin{macro}{\fp_fixed_sub:wwN}
% \begin{macro}{\fp_fixed_sub_back:wwN}
%   \begin{syntax}
%     \cs{fp_fixed_sub:wwN}
%     \Arg{X_1} \Arg{X_2} \Arg{X_3} \Arg{X_4} \Arg{X_5} \Arg{X_6} |;|
%     \Arg{Y_1} \Arg{Y_2} \Arg{Y_3} \Arg{Y_4} \Arg{Y_5} \Arg{Y_6} |;|
%     \meta{function}
%   \end{syntax}
%   Feeds $6$ brace groups followed by a semicolon as an argument to
%   \meta{function}. Computes $X - Y$ (or $Y-X$ for \texttt{sub\_back}).
%   Only difference compared to
%   addition: a few signs. All the auxiliaries are the same, since
%   there is no error-checking.
%    \begin{macrocode}
\cs_new:Npn \fp_fixed_sub:wwN #1#2#3#4 #5; #6#7 #8; #9
  {
    \exp_after:wN \fp_fixed_add_after:NNNNNNw
    \exp_after:wN #9
    \int_use:N \int_eval:w 4 9999 9995 + #1#2 - #6#7
      \exp_after:wN \fp_fixed_add_pack:NNNNNw
      \int_use:N \int_eval:w 4 9999 9995 + #3#4
        \fp_fixed_sub_aux:nnnn #8 + \use:nn #5 ; ;
  }
\cs_new:Npn \fp_fixed_sub_aux:nnnn #1#2 #3#4
  {
    - #1#2
    \exp_after:wN \fp_fixed_add_pack:NNNNNw
    \int_use:N \int_eval:w 5 0000 0000 - #3#4
  }
\cs_new:Npn \fp_fixed_sub_back:wwN #1#2#3#4 #5; #6#7 #8; #9
  {
    \exp_after:wN \fp_fixed_add_after:NNNNNNw
    \exp_after:wN #9
    \int_use:N \int_eval:w 4 9999 9995 - #1#2 + #6#7
      \exp_after:wN \fp_fixed_add_pack:NNNNNw
      \int_use:N \int_eval:w 4 9999 9995 - #3#4
        \fp_fixed_add_aux:nnnn #8 - \use:nn #5 ; ;
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Multiplying two extended fixed points}
%
% \begin{macro}{\fp_fixed_mul:wwn}
%   \begin{syntax}
%     \cs{fp_fixed_mul:wwn}
%     \Arg{X_1} \Arg{X_2} \Arg{X_3} \Arg{X_4} \Arg{X_5} \Arg{X_6} |;|
%     \Arg{Y_1} \Arg{Y_2} \Arg{Y_3} \Arg{Y_4} \Arg{Y_5} \Arg{Y_6} |;|
%     \Arg{tokens}
%   \end{syntax}
%   Feeds $6$ brace groups followed by a semicolon as an argument to
%   \meta{tokens}. It would be nice to grab the $12$ first brace
%   groups to compute $X \cdot Y$, but that's not possible. On the
%   other hand, we don't need to obtain an exact result, contrarily
%   to the case in \cs{fp_mul:ww}, so things are not quite as bad as
%   they may seem.
%    \begin{macrocode}
\cs_new:Npn \fp_fixed_mul:wwn #1#2#3#4 #5; #6#7#8#9
  {
    \exp_after:wN \fp_fixed_mul_after:NNNNNwwn
    \int_use:N \int_eval:w 9999 0000 + #1*#6
      \exp_after:wN \fp_fixed_mul_pack:NNNNNw
      \int_use:N \int_eval:w 9999 0000 + #1*#7 + #2*#6
        \exp_after:wN \fp_fixed_mul_pack:NNNNNw
        \int_use:N \int_eval:w 9999 0000 + #1*#8 + #2*#7 + #3*#6
          \exp_after:wN \fp_fixed_mul_pack:NNNNNw
          \int_use:N \int_eval:w 9999 0000 + #1*#9 + #2*#8 + #3*#7 + #4*#6
            \exp_after:wN \fp_fixed_mul_pack:NNNNNw
            \int_use:N \int_eval:w 1 0000 0000 + #2*#9 + #3*#8 + #4*#7
              + ( #3*#9 + #4*#8
                + \fp_fixed_mul_aux:nnnnnnnn #5 {#6}{#7}  {#1}{#2}
  }
\cs_new:Npn \fp_fixed_mul_aux:nnnnnnnn #1#2 #3#4 #5#6 #7#8
  { #1*#4 + #2*#3 + #5*#8 + #6*#7 )/10000 + #1*#3 + #5*#7 ; }
\cs_new:Npn \fp_fixed_mul_pack:NNNNNw
    #1 #2#3#4#5 #6; { + #1#2#3#4#5 ; {#6} }
\cs_new:Npn \fp_fixed_mul_after:NNNNNwwn
    #1 #2#3#4#5 #6; #7; #8 { #8 {#2#3#4#5} {#6} #7 ; }
%    \end{macrocode}
%   The parenthesis computing the seventh group of digits
%   (computed because we need to know its potentially large
%   carry) is closed by \cs{fp_fixed_mul_aux:nnnnnnnn},
%   once we access the last two brace groups, which were
%   not read before. Also, in \cs{fp_fixed_mul_after:NNNNNwwN},
%   |#8| is the continuation tokens.\footnote{Bruno: insist
%     on the difference compared to \cs{fp_fixed_add:wwN}.}
% \end{macro}
%
% \subsection{Extended fixed point to floating point conversion}
%
% \begin{macro}{\fp_fixed_to_normal:w}
%   \begin{syntax}
%     \cs{int_eval:w} \meta{exponent} \cs{fp_fixed_to_normal:w}
%     \Arg{a_1} \Arg{a_2} \Arg{a_3} \Arg{a_4} \Arg{a_5} \Arg{a_6} |;|
%   \end{syntax}
%   yields
%   \begin{quote}
%     \meta{exponent'} |;| \Arg{a1'} \Arg{a2'} \Arg{a3'} \Arg{a4'} |;|
%   \end{quote}
%   At this stage, we know that \meta{a1} is positive (otherwise,
%   it is sign of an error before), and we assume that it is
%   less than $10^5$.\footnote{Bruno: I must double check this assumption.}
%    \begin{macrocode}
\cs_new:Npn \fp_fixed_to_normal:w #1#2#3#4#5#6;
  {
    + \c_one % for the 5-digit-at-the-start thing.
    \exp_after:wN \exp_after:wN
    \exp_after:wN \fp_fixed_to_normal_loop:N
    \exp_after:wN \use_none:n
    \int_use:N \int_eval:w 19 9998 + #1
      \exp_after:wN \fp_fixed_to_normal_pack:N
      \int_use:N \int_eval:w 1 9998 + #2
        \exp_after:wN \fp_fixed_to_normal_pack:N
        \int_use:N \int_eval:w 1 9998 + #3
          \exp_after:wN \fp_fixed_to_normal_pack:N
          \int_use:N \int_eval:w 1 9998 + #4
            \exp_after:wN \fp_fixed_to_normal_pack:N
            \int_use:N \int_eval:w 1 9998 + #5
              \exp_after:wN \fp_fixed_to_normal_pack:N
              \int_use:N \int_eval:w 2 0000 + #6
    \exp_after:wN ; \exp_after:wN ;
  }
\cs_new:Npn \fp_fixed_to_normal_pack:N #1 { + #1 \int_eval_end: }
\cs_new:Npn \fp_fixed_to_normal_loop:N #1
  {
    \if_meaning:w 0 #1
      - \c_one
      \exp_after:wN \fp_fixed_to_normal_loop:N
    \else:
      \fp_fixed_to_normal_loop_end:w
      #1
    \fi:
  }
\cs_new:Npn \fp_fixed_to_normal_loop_end:w #1 \fi: #2 ;
  {
    \fi:
    \if_meaning:w ; #1
      \exp_after:wN \fp_fixed_to_normal_zero:w
    \else:
      \exp_after:wN \fp_fixed_to_normal_pack_i:NNNNNNNN
    \fi:
    #1 #2 000 0000 0000 0000 ;
  }
\cs_new:Npn \fp_fixed_to_normal_zero:w ; 000 0000 0000 0000 ;
  { ; {0000} {0000} {0000} {0000} ; }
\cs_new:Npn \fp_fixed_to_normal_pack_i:NNNNNNNN #1#2#3#4 #5#6#7#8
  { \fp_fixed_to_normal_pack_ii:nNNNNNNNN { {#1#2#3#4} {#5#6#7#8} } }
\cs_new:Npn \fp_fixed_to_normal_pack_ii:nNNNNNNNN #1 #2#3#4#5 #6#7#8#9
  { \fp_fixed_to_normal_pack_iii:nw { #1 {#2#3#4#5} {#6#7#8#9} } }
\cs_new:Npn \fp_fixed_to_normal_pack_iii:nw #1 #2 ; ; { ; #1 ; }
%    \end{macrocode}
% \footnote{Bruno: rounding is missing!}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
%\PrintChanges
%
%\PrintIndex