% \iffalse meta-comment
%
%% File: l3fp-expo.dtx Copyright (C) 2011 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{l3fp-new}
\GetIdInfo$Id$
  {L3 Experimental floating-point arithmetic}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\usepackage{l3fp-expo}
\begin{document}
  \tableofcontents
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \textsf{l3fp-expo} package\thanks{This file
%         has version number \ExplFileVersion, last
%         revised \ExplFileDate.}\\
% Floating point exponential related functions}
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{function}[EXP]{\fp_exp:N,\fp_ln:N}
%   \begin{syntax}
%     \cs{fp_exp:N} \meta{fp~var}
%   \end{syntax}
%   These functions f-expand to the exponential and the logarithm
%   (in base $e$) of the \meta{floating point variable}.
% \end{function}
%
% \begin{function}[EXP]{\fp_pow:NN}
%   \begin{syntax}
%     \cs{fp_pow:NN} \meta{fp~var~1} \meta{fp~var~2}
%   \end{syntax}
%   This function f-expands to $\meta{fp~var~1}^{\meta{fp~var~2}}$.
% \end{function}
% \end{documentation}
%
% \begin{implementation}
%
% \section{Implementation}
%
%   We start by ensuring that the required packages are loaded.
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%<*initex|package>
%    \end{macrocode}
%
% \subsection{User commands}
%
% \begin{macro}[EXP]{\fp_exp:N,\fp_ln:N}
%    \begin{macrocode}
\cs_new:Npn \fp_exp:N #1 { \exp_after:wN \fp_exp:w #1 \fp_aux_do_nothing: }
\cs_new:Npn \fp_ln:N #1 { \exp_after:wN \fp_ln:w #1 \fp_aux_do_nothing: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\fp_pow:NN,\fp_pow:ww}
%    \begin{macrocode}
\cs_new:Npn \fp_pow:NN { \fp_basics_shuffle:NNN \fp_basics_pow_cases:NN }
\cs_new:Npn \fp_pow:ww { \fp_basics_shuffle:Nww \fp_basics_pow_cases:NN }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Some constants}
%
% \begin{macro}{\c_fp_ln_..._fixed_tl}
%   A few values of the logarithm which are needed in the implementation.
%    \begin{macrocode}
\tl_const:cn { c_fp_ln_1_fixed_tl } { {0000}{0000}{0000}{0000}{0000}{0000} }%?
\tl_const:cn { c_fp_ln_2_fixed_tl } { {6931}{4718}{0559}{9453}{0941}{7232} }
\tl_const:cn { c_fp_ln_3_fixed_tl } {{10986}{1228}{8668}{1096}{9139}{5245} }
\tl_const:cn { c_fp_ln_4_fixed_tl } {{13862}{9436}{1119}{8906}{1883}{4464} }
 %\tl_const:cn { c_fp_ln_5_fixed_tl } {{16094}{3791}{2434}{1003}{7460}{0759} }
 %\tl_const:cn { c_fp_ln_6_fixed_tl } {{17917}{5946}{9228}{0550}{0081}{2477} }
\tl_const:cn { c_fp_ln_7_fixed_tl } {{19459}{1014}{9055}{3133}{0510}{5353} }
 %\tl_const:cn { c_fp_ln_8_fixed_tl } {{20794}{4154}{1679}{8359}{2825}{1696} }
 %\tl_const:cn { c_fp_ln_9_fixed_tl } {{21972}{2457}{7336}{2193}{8279}{0490} }
\tl_const:cn { c_fp_ln_10_fixed_tl} {{23025}{8509}{2994}{0456}{8401}{7991} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Logarithm}
%
% \subsubsection{Sign, exponent, and special numbers}
%
% \begin{macro}[EXP]{\fp_ln:w}
%   \begin{syntax}
%     \cs{fp_ln:w} \cs{s_fp} \cs{fp_use:w} \meta{case} \meta{sign} \meta{body} |;|
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Npn \fp_ln:w \s_fp \fp_use:w #1 #2
  {
    \if_case:w #2 \exp_stop_f:
      \exp_after:wN \fp_ln_cases:N
      \exp_after:wN #1
    \or:
      \exp_after:wN \fp_ln_nan:w
    \or:
      \exp_after:wN \fp_ln_return_snan:Nw
      \cs:w
        fp_info: ~ ln(negative);
        \exp_after:wN
      \cs_end:
    \fi:
  }
\cs_new:Npn \fp_ln_nan:w #1 ;
  {
    \exp_after:wN \fp_aux_qnan_fp:N
    \exp_after:wN #1
  }
\cs_new:Npn \fp_ln_cases:N #1
  {
    \if_case:w #1 \exp_stop_f:
         \exp_after:wN \fp_ln_return_minus_inf:w
    \or: \exp_after:wN \fp_ln_npos:nw
    \or: \exp_after:wN \fp_ln_return_plus_inf:w
    \fi:
  }
\cs_new:Npn \fp_ln_return_minus_inf:w #1; { \exp_after:wN \c_minus_inf_fp }
\cs_new:Npn \fp_ln_return_plus_inf:w  #1; { \exp_after:wN \c_inf_fp }
\cs_new:Npn \fp_ln_return_snan:Nw #1 #2;
  { \exp_after:wN \fp_aux_snan_fp:N \exp_after:wN #1 }
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Absolute ln}
%
% In this subsection we are given a positive normal number,
% of the form $ a \cdot 10^{b} $ with $0.1\leq a < 1$. To compute
% its logarithm, we find a small integer $1\leq c < 10$ such that
% $ a c \sim 1 $, and use the relation
% \[
% \ln (a \cdot 10^b) = b \cdot \ln (10) - \ln (c) + \ln (a c).
% \]
% The logarithms $\ln(10)$ and $\ln(c)$ can be looked up in a table,
% while the last term is computed using an enhanced version of the
% naive Taylor series of $\ln$ near $1$. We leave the various pieces
% on the right on the input stream, to be added at the end.
%
% Two reasons for multiplying by $c$ instead of dividing by a
% corresponding appropriate number. Efficiency: multiplying by a
% single number digit is among the fastest operations. Accuracy: we
% can multiply by a single digit with no rounding at this stage, and
% at least it makes the analysis of the total rounding errors simpler.
%
% \begin{macro}{\fp_ln_npos:nw}
%   \begin{syntax}
%     \cs{fp_ln_npos:nw} \Arg{exp} \meta{mantissa} |;|
%   \end{syntax}
%   We catch the case of a mantissa very close to $0.1$ or to $1$.
%   In all other cases, the final result is at least $10^{-4}$, and
%   that an error of $0.5\cdot 10^{-20}$ is acceptable.\footnote{Bruno:
%     special cases not implemented yet.}
%    \begin{macrocode}
\cs_new:Npn \fp_ln_npos:nw #1 #2#3;
  { \fp_ln_x_i:Nw #2; #3 #1; }
\cs_new:Npn \fp_ln_x_i:Nw #1 #2;
  {
    % \if_num:w #1#2 = 1000 \exp_stop_f:
    %   \exp_after:wN \fp_ln_mantissa_min:nnnn
    % \else:
    %   \if_num:w #1#2 = 9999 \exp_stop_f:
    %     \exp_after:wN \exp_after:wN
    %     \exp_after:wN \fp_ln_mantissa_max:nnnn
    %   \else:
        \exp_after:wN \fp_ln_x_ii:Nnnnn
        \int_value:w
          \if_case:w #1 \exp_stop_f:
          \or: 7
          \or: 4
          \or: 3
          \or: 2
          \or: 2
          \or: 2
          \else: 1 %^^A should be optimized out
          \fi:
    %   \fi:
    % \fi:
    { #1 #2 }
  }
%    \end{macrocode}
%   We have thus found $c$. It is chosen such that $0.7\leq ac < 1.4$
%   in all cases. Compute $ 1 + x = 1 + ac \in [1.7,2.4)$.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_x_ii:Nnnnn #1 #2#3#4#5
  {
    \exp_after:wN \fp_ln_x_iv:NNNNNwnn
    \int_use:N \int_eval:w 9999 9999 + #1*#2#3 +
      \exp_after:wN \fp_ln_x_iii:NNNNNw
      \int_use:N \int_eval:w 1 0000 0000 + #1*#4#5 ;
    #1
  }
\cs_new:Npn \fp_ln_x_iii:NNNNNw #1 #2#3#4#5 #6; { #1; {#2#3#4#5} {#6} }
%    \end{macrocode}
%   The Taylor series will be expressed in terms of
%   $t = (x-1)/(x+1) = 1 - 2/(x+1)$. We now compute the
%   quotient with extended precision, reusing some code
%   from \cs{fp_div:ww}. Note that $1+x$ is known exactly.
%
%   To reuse notations from \pkg{l3fp-basics}, we want to
%   compute $ A / Z $ with $ A = 2 $ and $ Z = x + 1 $.
%   In \pkg{l3fp-basics}, we considered the case where
%   both $A$ and $Z$ are arbitrary, in the range $[0.1,1)$,
%   and we had to monitor the growth of the sequence of
%   remainders $A$, $B$, $C$, etc. to ensure that no overflow
%   occured during the computation of the next quotient.
%   The main source of risk was our choice to define the
%   quotient as roughly $10^9 \cdot A / 10^5 \cdot Z$: then
%   $A$ was bound to be below $2.147\cdots$, and this limit
%   was never far.
%
%   In our case, we can simply work with $10^8 \cdot A$ and
%   $10^4 \cdot Z$, because our reason to work with higher
%   powers has gone: we needed the integer $y \simeq 10^5 \cdot Z$
%   to be at least $10^4$, and now, the definition
%   $y \simeq 10^4 \cdot Z$ suffices.
%
%   Let us thus define $y = \left\lfloor 10^4 \cdot Z \right\rfloor + 1
%   \in ( 1.7 \cdot 10^4, 2.4 \cdot 10^4 ] $, and
%   \[
%   Q\sb{1}
%   =
%   \left\lfloor
%     \frac {\left\lfloor 10^8 \cdot A\right\rfloor} {y} - \frac{1}{2}
%   \right\rfloor.
%   \]
%   (The $1/2$ comes from how e\TeX{} rounds.) As for division, it is
%   easy to see that $Q\sb{1} \leq 10^4 A / Z$, \emph{i.e.}, $Q\sb{1}$
%   is an underestimate.
%
%   Exactly as we did for division, we set $B = 10^4 A - Q\sb{1}Z$. Then
%   \begin{align*}
%     10^4 B
%     \leq
%     A\sb{1}A\sb{2}.A\sb{3}A\sb{4}
%     - \left( \frac{A\sb{1}A\sb{2}}{y} - \frac{3}{2} \right) 10^4 Z
%     \leq
%     A\sb{1}A\sb{2} \left( 1 - \frac{10^4 Z}{y} \right) + 1 + \frac{3}{2} y
%     \leq
%     10^8 \frac{A}{y} + 1 + \frac{3}{2} y
%   \end{align*}
%   In the same way, and using $1.7\cdot 10^4\leq y\leq 2.4\cdot 10^4$,
%   and convexity, we get
%   \begin{align*}
%     10^4 A &= 2\cdot 10^4 \\
%     10^4 B &\leq 10^8 \frac{A}{y} + 1.6 y \leq 4.7\cdot 10^4\\
%     10^4 C &\leq 10^8 \frac{B}{y} + 1.6 y \leq 5.8\cdot 10^4\\
%     10^4 D &\leq 10^8 \frac{C}{y} + 1.6 y \leq 6.3\cdot 10^4\\
%     10^4 E &\leq 10^8 \frac{D}{y} + 1.6 y \leq 6.5\cdot 10^4\\
%     10^4 F &\leq 10^8 \frac{E}{y} + 1.6 y \leq 6.6\cdot 10^4\\
%   \end{align*}
%   Note that we compute more steps than for division: since $t$ is
%   not the end result, we need to know it with more accuracy
%   (on the other hand, the ending is much simpler, as we don't
%   need an exact rounding for transcendental functions, but just
%   a faithful rounding).\footnote{Bruno: to be completed.}
%
%   \begin{quote}
%     \cs{fp_ln_x_iv:NNNNNwnn}
%     \meta{1 or 2} \meta{8d} |;| \Arg{4d} \Arg{4d}
%   \end{quote}
%   The number is $x$. Compute $y$ by adding 1 to the five first digits.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_x_iv:NNNNNwnn #1 #2#3#4#5 #6; #7 #8
  {
    \exp_after:wN \fp_ln_div_i:w
    \int_use:N \int_eval:w #1#2#3#4#5 + \c_one ;
    2 0000 0000 ; {0000} {0000}
    {#1#2#3#4#5} {#6} {#7} {#8}
  }
\cs_new:Npn \fp_ln_div_i:w #1;
  {
    \exp_after:wN \fp_ln_div_ii:www
    \int_value:w #1 \exp_after:wN ;
    \int_value:w
      \exp_after:wN \fp_basics_div_mantissa_calc:Nwwnnnnnn
      \int_use:N \int_eval:w 999999 + 2 0000 0000 / #1 ; % Q1
  }
\cs_new:Npn \fp_ln_div_ii:www #1; #2; #3; % y; Q1; B1B2;
  {
    \exp_after:wN \fp_ln_div_after:w
    \int_use:N \int_eval:w #2
      \exp_after:wN \fp_ln_div_iii:www
      \int_value:w #1 \exp_after:wN ;
      \int_value:w
        \exp_after:wN \fp_basics_div_mantissa_calc:Nwwnnnnnn
        \int_use:N \int_eval:w 999999 + #3 / #1 ; % Q2
        #3 ;
  }
\cs_new:Npn \fp_ln_div_iii:www #1; #2; #3; % y; Q2; C1C2;
  {
    \exp_after:wN \fp_basics_div_mantissa_pack:NNNw
    \int_use:N \int_eval:w #2
      \exp_after:wN \fp_ln_div_iv:www
      \int_value:w #1 \exp_after:wN ;
      \int_value:w
        \exp_after:wN \fp_basics_div_mantissa_calc:Nwwnnnnnn
        \int_use:N \int_eval:w 999999 + #3 / #1 ; % Q3
        #3 ;
  }
\cs_new:Npn \fp_ln_div_iv:www #1; #2; #3; % y; Q3; D1D2;
  {
    \exp_after:wN \fp_basics_div_mantissa_pack:NNNw
    \int_use:N \int_eval:w #2
      \exp_after:wN \fp_ln_div_v:www
      \int_value:w #1 \exp_after:wN ;
      \int_value:w
        \exp_after:wN \fp_basics_div_mantissa_calc:Nwwnnnnnn
        \int_use:N \int_eval:w 999999 + #3 / #1 ; % Q4
        #3 ;
  }
\cs_new:Npn \fp_ln_div_v:www #1; #2; #3; % y; Q4; E1E2;
  {
    \exp_after:wN \fp_basics_div_mantissa_pack:NNNw
    \int_use:N \int_eval:w #2
      \exp_after:wN \fp_ln_div_vi:www
      \int_value:w #1 \exp_after:wN ;
      \int_value:w
        \exp_after:wN \fp_basics_div_mantissa_calc:Nwwnnnnnn
        \int_use:N \int_eval:w 999999 + #3 / #1 ; % Q5
        #3 ;
  }
\cs_new:Npn \fp_ln_div_vi:www #1; #2; #3;#4#5 #6#7#8#9 %y;Q5;F1F2;F3F4x1x2x3x4
  {
    \exp_after:wN \fp_basics_div_mantissa_pack:NNNw
    \int_use:N \int_eval:w #2
      \exp_after:wN \fp_basics_div_mantissa_pack:NNNw
      \int_use:N \int_eval:w 999999 + #3 / #1 ; % Q6
  }
%    \end{macrocode}
%   We now have essentially\footnote{Bruno: add a mention that
%     the error on $Q\sb{6}$ is bounded by $10$ (probably $6.7$),
%     and thus corresponds to an error of $10^{-23}$ on the final
%     result, small enough in all cases.}
%   \begin{quote}
%     \cs{fp_ln_div_after:w} $10^6 + Q\sb{1}$
%     \cs{fp_basics_div_mantissa_pack:NNNw} $10^6 + Q\sb{2}$
%     \cs{fp_basics_div_mantissa_pack:NNNw} $10^6 + Q\sb{3}$
%     \cs{fp_basics_div_mantissa_pack:NNNw} $10^6 + Q\sb{4}$
%     \cs{fp_basics_div_mantissa_pack:NNNw} $10^6 + Q\sb{5}$
%     \cs{fp_basics_div_mantissa_pack:NNNw} $10^6 + Q\sb{6}$ |;|
%     \meta{c} \meta{exponent} |;|
%   \end{quote}
%   where \meta{c} is a single digit, and \meta{exponent} is
%   the exponent. Also, the expansion is done backwards. Then
%   \cs{fp_basics_div_mantissa_pack:NNNw} puts things in the
%   correct order to add the $Q\sb{i}$ together and put semicolons
%   between each piece. Once those have been expanded, we get
%   \begin{quote}
%     \cs{fp_ln_div_after:w} |1| |0| \meta{5d} |;| \meta{4d} |;|
%     \meta{4d} |;| \meta{4d} |;| \meta{4d} |;| \meta{4d} |;|
%     \meta{c} \meta{exponent} |;|
%   \end{quote}
%   Just as with division, we know that the first two digits
%   are |1| and |0| because of bounds on the final result of
%   the division $2/(x+1)$, which is between roughly $0.8$ and $1.2$.
%   We then compute $1-2/(x+1)$, after testing whether $2/(x+1)$ is
%   greater than or smaller than $1$.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_div_after:w 1 0 #1
  {
    \if_meaning:w 0 #1
      \exp_after:wN \fp_ln_t_small:w
    \else:
      \exp_after:wN \fp_ln_t_large:Nw
      \exp_after:wN -
    \fi:
  }
\cs_new:Npn \fp_ln_t_small:w #1 ; #2; #3; #4; #5; #6;
  {
    \exp_after:wN \fp_ln_t_large:Nw
    \exp_after:wN + % <sign>
    \int_use:N \int_eval:w 9999 - #1 \exp_after:wN ;
    \int_use:N \int_eval:w 9999 - #2 \exp_after:wN ;
    \int_use:N \int_eval:w 9999 - #3 \exp_after:wN ;
    \int_use:N \int_eval:w 9999 - #4 \exp_after:wN ;
    \int_use:N \int_eval:w 9999 - #5 \exp_after:wN ;
    \int_use:N \int_eval:w 1 0000 - #6 ;
  }
%    \end{macrocode}
%
%   \begin{quote}
%     \cs{fp_ln_t_large:Nw} \meta{sign} \meta{t1}|;| \meta{t2} |;|
%     \meta{t3}|;| \meta{t4}|;| \meta{t5} |;| \meta{t6}|;|
%     \meta{c} \meta{exp} |;|
%   \end{quote}
%   Compute the square $|t|^2$, and keep $|t|$ at the end with its
%   sign. We know that $|t|<0.1765$, so every piece has at most $4$
%   digits. However, since we were not careful in \cs{fp_ln_t_small:w},
%   they can have less than $4$ digits.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_t_large:Nw #1 #2; #3; #4; #5; #6; #7;
  {
    \exp_after:wN \fp_ln_square_t_after:w
    \int_use:N \int_eval:w 9999 0000 + #2*#2
      \exp_after:wN \fp_ln_square_t_pack:NNNNNw
      \int_use:N \int_eval:w 9999 0000 + 2*#2*#3
        \exp_after:wN \fp_ln_square_t_pack:NNNNNw
        \int_use:N \int_eval:w 9999 0000 + 2*#2*#4 + #3*#3
          \exp_after:wN \fp_ln_square_t_pack:NNNNNw
          \int_use:N \int_eval:w 9999 0000 + 2*#2*#5 + 2*#3*#4
            \exp_after:wN \fp_ln_square_t_pack:NNNNNw
            \int_use:N \int_eval:w 1 0000 0000 + 2*#2*#6 + 2*#3*#5 + #4*#4
              + (2*#2*#7 + 2*#3*#6 + 2*#4*#5) / 1 0000
              % ; ; ;
    \exp_after:wN \fp_ln_twice_t_after:w
    \int_use:N \int_eval:w -1 + 2*#2
      \exp_after:wN \fp_ln_twice_t_pack:Nw
      \int_use:N \int_eval:w 9999 + 2*#3
        \exp_after:wN \fp_ln_twice_t_pack:Nw
        \int_use:N \int_eval:w 9999 + 2*#4
          \exp_after:wN \fp_ln_twice_t_pack:Nw
          \int_use:N \int_eval:w 9999 + 2*#5
            \exp_after:wN \fp_ln_twice_t_pack:Nw
            \int_use:N \int_eval:w 9999 + 2*#6
              \exp_after:wN \fp_ln_twice_t_pack:Nw
              \int_use:N \int_eval:w 10000 + 2*#7 ; ;
    { \fp_ln_c:NwNw #1 }
  }
\cs_new:Npn \fp_ln_twice_t_pack:Nw #1 #2; { + #1 ; {#2} }
\cs_new:Npn \fp_ln_twice_t_after:w #1; { ;;; {#1} }
\cs_new:Npn \fp_ln_square_t_pack:NNNNNw #1 #2#3#4#5 #6;
  { + #1#2#3#4#5 ; {#6} }
\cs_new:Npn \fp_ln_square_t_after:w 1 0 #1#2#3 #4;
  { \fp_ln_Taylor:wwNw {0#1#2#3} {#4} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fp_ln_Taylor:wwNw}
%   Denoting $T=t^2$, we get
%   \begin{quote}
%     \cs{fp_ln_Taylor:wwNn}
%     \Arg{T_1} \Arg{T_2} \Arg{T_3} \Arg{T_4} \Arg{T_5} \Arg{T_6} |;| |;|
%     \Arg{2t1} \Arg{2t2} \Arg{2t3} \Arg{2t4} \Arg{2t5} \Arg{2t6} |;|
%     |{| \cs{fp_ln_c:NwNn} \meta{sign} |}|
%     \meta{c} \meta{exponent} |;|
%   \end{quote}
%   And we want to compute
%   \[
%   \ln\left(\frac{1+t}{1-t}\right)
%   = 2t\left(1 + T \left(\frac{1}{3} + T \left(\frac{1}{5}
%         + T \left(\frac{1}{7} + T \left( \frac{1}{9} + \cdots
%           \right)\right)\right)\right)\right)
%   \]
%   The process looks as follows
%   \begin{verbatim}
%     \loop 5; A;
%     \div_int 5; 1.0; \add A; \mul T; {\loop \eval 5-2;}
%     \add 0.2; A; \mul T; {\loop \eval 5-2;}
%     \mul B; T; {\loop 3;}
%     \loop 3; C;
%   \end{verbatim}
%   \footnote{Bruno: add explanations.}
%
%   This uses the routine for dividing a number by a small integer
%   (${}<10^4$).
%    \begin{macrocode}
\cs_new:Npn \fp_ln_Taylor:wwNw
  { \fp_ln_Taylor_loop:www 21 ; {0000}{0000}{0000}{0000}{0000}{0000} ; }
\cs_new:Npn \fp_ln_Taylor_loop:www #1; #2; #3;
  {
    \if_num:w #1 = \c_one
      \fp_ln_Taylor_break:w
    \fi:
    \fp_fixed_div_int:wwN {10000}{0000}{0000}{0000}{0000}{0000} ; #1;
    \fp_fixed_add:wwN #2;
    \fp_fixed_mul:wwn #3;
    {
      \exp_after:wN \fp_ln_Taylor_loop:www
      \int_use:N \int_eval:w #1 - \c_two ;
    }
    #3;
  }
\cs_new:Npn \fp_ln_Taylor_break:w \fi: #1 \fp_fixed_add:wwN #2#3; #4 ;;
  {
    \fi:
    \exp_after:wN \fp_fixed_mul:wwn
    \exp_after:wN { \int_use:N \int_eval:w 10000 + #2 } #3;
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fp_ln_c:NwNw}
%   \begin{quote}
%     \cs{fp_ln_c:NwNw} \meta{sign}
%     \Arg{r_1} \Arg{r_2} \Arg{r_3} \Arg{r_4} \Arg{r_5} \Arg{r_6} |;|
%     \meta{c} \meta{exponent} |;|
%   \end{quote}
%   We are now reduced to finding $\ln c$ and $\meta{exponent}\ln 10$
%   in a table, and adding it to the mixture. The first step is to
%   get $\ln c - \ln x = - \ln a$, then we get $|b|\ln 10$ and add
%   or subtract.
%
%   For now, $\ln x$ is given as $\cdot 10^0$. Unless both the exponent
%   is $1$ and $c=1$, we shift to working in units of $\cdot 10^4$,
%   since the final result will be at least $\ln 10/7 \simeq
%   0.35$.\footnote{Bruno: that was wrong at some point, I must check.}
%    \begin{macrocode}
\cs_new:Npn \fp_ln_c:NwNw #1 #2; #3
  {
    \if_meaning:w + #1
      \exp_after:wN \exp_after:wN \exp_after:wN
      \fp_fixed_sub:wwN \cs:w
    \else:
      \exp_after:wN \exp_after:wN \exp_after:wN
      \fp_fixed_add:wwN \cs:w
    \fi:
    c_fp_ln_ #3 _fixed_tl \cs_end: ; #2 ;
    \fp_ln_exponent:ww
  }
%    \end{macrocode}
% \footnote{Bruno: this \emph{\textbf{must}} be updated with correct values!}
% \end{macro}
%
% \begin{macro}{\fp_ln_exponent:ww}
%   \begin{quote}
%     \cs{fp_ln_exponent:ww}
%     \Arg{s_1} \Arg{s_2} \Arg{s_3} \Arg{s_4} \Arg{s_5} \Arg{s_6} |;|
%     \meta{exponent} |;|
%   \end{quote}
%   Compute \meta{exponent} times $\ln 10$. Apart from the cases where
%   \meta{exponent} is $0$ or $1$, the result will necessarily be at
%   least $\ln 10 \simeq 2.3$ in magnitude. We can thus drop the least
%   significant $4$ digits. In the case of a very large (positive or
%   negative) exponent, we can (and we need to) drop $4$ additional
%   digits, since the result is of order $10^4$. Naively, one would
%   think that in both cases we can drop $4$ more digits than we do,
%   but that would be slightly too tight for rounding to happen correctly.
%   Besides, we already have addition and subtraction for $24$ digits
%   fixed point numbers.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_exponent:ww #1; #2;
  {
    \exp_after:wN \fp_ln_return:Nww
    \int_value:w % for the overall sign
      \if_num:w #2 < \c_one
        2
      \else:
        0
      \fi:
    \exp_after:wN \exp_stop_f:
    \int_use:N \int_eval:w
      \if_case:w #2 \exp_stop_f:
        \exp_after:wN \fp_ln_exponent_zero:ww \int_value:w
      \or:
        \exp_after:wN \fp_ln_exponent_one:ww  \int_value:w
      \else:
        \if_num:w #2 > \c_zero
          \if_num:w #2 < \c_ten_thousand
            \exp_after:wN \fp_ln_exponent_small:Nww
            \exp_after:wN \fp_fixed_sub:wwN \int_value:w
          \else:
            \exp_after:wN \fp_ln_exponent_large:Nww
            \exp_after:wN \fp_fixed_sub:wwN \int_value:w
          \fi:
        \else:
          \if_num:w - #2 < \c_ten_thousand
            \exp_after:wN \fp_ln_exponent_small:Nww
            \exp_after:wN \fp_fixed_add:wwN \int_value:w -
          \else:
            \exp_after:wN \fp_ln_exponent_large:Nww
            \exp_after:wN \fp_fixed_add:wwN \int_value:w -
          \fi:
        \fi:
      \fi:
      #2; #1;
  }
%    \end{macrocode}
%   Now we painfully write all the cases.\footnote{Bruno: do rounding.}
%   No overflow nor underflow can happen.
%    \begin{macrocode}
\cs_new:Npn \fp_ln_return:Nww #1 #2; { \s_fp \fp_use:w 1 #1 {#2} }
\cs_new:Npn \fp_ln_exponent_zero:ww 0;
  {
    \c_zero
    \fp_fixed_to_float:w
  }
\cs_new:Npx \fp_ln_exponent_one:ww 1; #1;
  {
    \c_zero
    \exp_not:N \fp_fixed_sub:wwN
      \use:c { c_fp_ln_10_fixed_tl } ;
      #1;
    \exp_not:N \fp_fixed_to_float:w
  }
%    \end{macrocode}
%   For small exponents, we just drop one block of digits, and set the
%   exponent of the log to $4$ (minus any shift coming from leading zeros
%   in the conversion from fixed point to floating point). Note that here
%   the exponent has been made positive.
%    \begin{macrocode}
\cs_new:Npx \fp_ln_exponent_small:Nww #1 #2; #3#4#5#6#7#8;
  {
    \c_four
    \exp_not:N \fp_fixed_mul:wwn
      \use:c { c_fp_ln_10_fixed_tl } ;
      {#2}{0000}{0000}{0000}{0000}{0000} ;
    #1
      {0000}{#3}{#4}{#5}{#6}{#7};
    \exp_not:N \fp_fixed_to_float:w
  }
%    \end{macrocode}
%   For large exponents, we drop two blocks of digits, and shift
%   the exponent by $8$.
%    \begin{macrocode}
\cs_new:Npx \fp_ln_exponent_large:Nww #1 #2; #3#4#5#6#7#8;
  {
    \c_eight
    \exp_not:N \exp_after:wN \exp_not:N \fp_ln_exponent_large_aux:NNNNNw
    \exp_not:N \int_use:N \int_eval:w 1 0000 0000 + #2;
      \use:c { c_fp_ln_10_fixed_tl } ;
    #1
      {0000}{0000}{#3}{#4}{#5}{#6};
    \exp_not:N \fp_fixed_to_float:w
  }
\cs_new:Npn \fp_ln_exponent_large_aux:NNNNNw 1 #1#2#3#4 #5;
  { \fp_fixed_mul:wwn {#1#2#3#4} {#5} {0000} {0000} {0000} {0000} ; }
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
%\PrintChanges
%
%\PrintIndex