% \iffalse meta-comment
%
%% File: l3fp-old.dtx Copyright (C) 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX3 Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental floating-points (old)}
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3fp-old} package\\ Floating-points (old)^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-old} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
% \subsection{Undefining}
%
%    \begin{macrocode}
\cs_undefine:N \fp_if_exist:NTF
\cs_undefine:N \fp_if_exist:NT
\cs_undefine:N \fp_if_exist:NF
\cs_undefine:N \fp_if_exist_p:N
\cs_undefine:N \fp_if_exist:cTF
\cs_undefine:N \fp_if_exist:cT
\cs_undefine:N \fp_if_exist:cF
\cs_undefine:N \fp_if_exist_p:c
\cs_undefine:N \c_fp_pi_by_four_decimal_int
\cs_undefine:N \c_fp_pi_by_four_extended_int
\cs_undefine:N \c_fp_pi_decimal_int
\cs_undefine:N \c_fp_pi_extended_int
\cs_undefine:N \c_fp_two_pi_decimal_int
\cs_undefine:N \c_fp_two_pi_extended_int
\cs_undefine:N \c_e_fp
\cs_undefine:N \c_one_fp
\cs_undefine:N \c_pi_fp
\cs_undefine:N \c_undefined_fp
\cs_undefine:N \c_zero_fp
\cs_undefine:N \l_fp_arg_tl
\cs_undefine:N \l_fp_count_int
\cs_undefine:N \l_fp_div_offset_int
\cs_undefine:N \l_fp_exp_integer_int
\cs_undefine:N \l_fp_exp_decimal_int
\cs_undefine:N \l_fp_exp_extended_int
\cs_undefine:N \l_fp_exp_exponent_int
\cs_undefine:N \l_fp_input_a_sign_int
\cs_undefine:N \l_fp_input_a_integer_int
\cs_undefine:N \l_fp_input_a_decimal_int
\cs_undefine:N \l_fp_input_a_exponent_int
\cs_undefine:N \l_fp_input_b_sign_int
\cs_undefine:N \l_fp_input_b_integer_int
\cs_undefine:N \l_fp_input_b_decimal_int
\cs_undefine:N \l_fp_input_b_exponent_int
\cs_undefine:N \l_fp_input_a_extended_int
\cs_undefine:N \l_fp_input_b_extended_int
\cs_undefine:N \l_fp_mul_a_i_int
\cs_undefine:N \l_fp_mul_a_ii_int
\cs_undefine:N \l_fp_mul_a_iii_int
\cs_undefine:N \l_fp_mul_a_iv_int
\cs_undefine:N \l_fp_mul_a_v_int
\cs_undefine:N \l_fp_mul_a_vi_int
\cs_undefine:N \l_fp_mul_b_i_int
\cs_undefine:N \l_fp_mul_b_ii_int
\cs_undefine:N \l_fp_mul_b_iii_int
\cs_undefine:N \l_fp_mul_b_iv_int
\cs_undefine:N \l_fp_mul_b_v_int
\cs_undefine:N \l_fp_mul_b_vi_int
\cs_undefine:N \l_fp_mul_output_int
\cs_undefine:N \l_fp_mul_output_tl
\cs_undefine:N \l_fp_output_sign_int
\cs_undefine:N \l_fp_output_integer_int
\cs_undefine:N \l_fp_output_decimal_int
\cs_undefine:N \l_fp_output_exponent_int
\cs_undefine:N \l_fp_output_extended_int
\cs_undefine:N \l_fp_round_carry_bool
\cs_undefine:N \l_fp_round_decimal_tl
\cs_undefine:N \l_fp_round_position_int
\cs_undefine:N \l_fp_round_target_int
\cs_undefine:N \l_fp_sign_tl
\cs_undefine:N \l_fp_split_sign_int
\cs_undefine:N \l_fp_internal_int
\cs_undefine:N \l_fp_internal_tl
\cs_undefine:N \l_fp_trig_octant_int
\cs_undefine:N \l_fp_trig_sign_int
\cs_undefine:N \l_fp_trig_decimal_int
\cs_undefine:N \l_fp_trig_extended_int
\cs_undefine:N \fp_read:N
\cs_undefine:N \fp_read_aux:w
\cs_undefine:N \fp_split:Nn
\cs_undefine:N \fp_split_sign:
\cs_undefine:N \fp_split_exponent:w
\cs_undefine:N \fp_split_aux_i:w
\cs_undefine:N \fp_split_aux_ii:w
\cs_undefine:N \fp_split_aux_iii:w
\cs_undefine:N \fp_split_decimal:w
\cs_undefine:N \fp_split_decimal_aux:w
\cs_undefine:N \fp_standardise:NNNN
\cs_undefine:N \fp_standardise_aux:NNNN
\cs_undefine:N \fp_standardise_aux:
\cs_undefine:N \fp_standardise_aux:w
\cs_undefine:N \fp_level_input_exponents:
\cs_undefine:N \fp_level_input_exponents_a:
\cs_undefine:N \fp_level_input_exponents_a:NNNNNNNNN
\cs_undefine:N \fp_level_input_exponents_b:
\cs_undefine:N \fp_level_input_exponents_b:NNNNNNNNN
\cs_undefine:N \fp_tmp:w
\cs_undefine:N \fp_new:N
\cs_undefine:N \fp_new:c
\cs_undefine:N \fp_const:Nn
\cs_undefine:N \fp_const:cn
\cs_undefine:N \fp_zero:N
\cs_undefine:N \fp_gzero:N
\cs_undefine:N \fp_zero:c
\cs_undefine:N \fp_gzero:c
\cs_undefine:N \fp_zero_new:N
\cs_undefine:N \fp_gzero_new:N
\cs_undefine:N \fp_zero_new:c
\cs_undefine:N \fp_gzero_new:c
\cs_undefine:N \fp_set:Nn
\cs_undefine:N \fp_gset:Nn
\cs_undefine:N \fp_set_aux:NNn
\cs_undefine:N \fp_set:cn
\cs_undefine:N \fp_gset:cn
\cs_undefine:N \fp_set_from_dim:Nn
\cs_undefine:N \fp_gset_from_dim:Nn
\cs_undefine:N \fp_set_from_dim_aux:NNn
\cs_undefine:N \fp_set_from_dim:cn
\cs_undefine:N \fp_gset_from_dim:cn
\cs_undefine:N \l_fp_internal_dim
\cs_undefine:N \l_fp_internal_skip
\cs_undefine:N \fp_set_eq:NN
\cs_undefine:N \fp_set_eq:cN
\cs_undefine:N \fp_set_eq:Nc
\cs_undefine:N \fp_set_eq:cc
\cs_undefine:N \fp_gset_eq:NN
\cs_undefine:N \fp_gset_eq:cN
\cs_undefine:N \fp_gset_eq:Nc
\cs_undefine:N \fp_gset_eq:cc
\cs_undefine:N \fp_show:N
\cs_undefine:N \fp_show:c
\cs_undefine:N \fp_use:N
\cs_undefine:N \fp_use:c
\cs_undefine:N \fp_use_aux:w
\cs_undefine:N \fp_use_none:w
\cs_undefine:N \fp_use_small:w
\cs_undefine:N \fp_use_large:w
\cs_undefine:N \fp_use_large_aux_i:w
\cs_undefine:c { fp_use_large_aux_1:w }
\cs_undefine:c { fp_use_large_aux_2:w }
\cs_undefine:c { fp_use_large_aux_3:w }
\cs_undefine:c { fp_use_large_aux_4:w }
\cs_undefine:c { fp_use_large_aux_5:w }
\cs_undefine:c { fp_use_large_aux_6:w }
\cs_undefine:c { fp_use_large_aux_7:w }
\cs_undefine:c { fp_use_large_aux_8:w }
\cs_undefine:c { fp_use_large_aux_9:w }
\cs_undefine:N \fp_use_large_aux_ii:w
\cs_undefine:N \fp_to_dim:N
\cs_undefine:N \fp_to_dim:c
\cs_undefine:N \fp_to_int:N
\cs_undefine:N \fp_to_int:c
\cs_undefine:N \fp_to_int_aux:w
\cs_undefine:N \fp_to_int_small:w
\cs_undefine:N \fp_to_int_large:w
\cs_undefine:N \fp_to_int_large_aux_i:w
\cs_undefine:c { fp_to_int_large_aux_1:w }
\cs_undefine:c { fp_to_int_large_aux_2:w }
\cs_undefine:c { fp_to_int_large_aux_3:w }
\cs_undefine:c { fp_to_int_large_aux_4:w }
\cs_undefine:c { fp_to_int_large_aux_5:w }
\cs_undefine:c { fp_to_int_large_aux_6:w }
\cs_undefine:c { fp_to_int_large_aux_7:w }
\cs_undefine:c { fp_to_int_large_aux_8:w }
\cs_undefine:c { fp_to_int_large_aux_9:w }
\cs_undefine:N \fp_to_int_large_aux:nnn
\cs_undefine:N \fp_to_int_large_aux_ii:w
\cs_undefine:N \fp_to_tl:N
\cs_undefine:N \fp_to_tl:c
\cs_undefine:N \fp_to_tl_aux:w
\cs_undefine:N \fp_to_tl_large:w
\cs_undefine:N \fp_to_tl_large_aux_i:w
\cs_undefine:N \fp_to_tl_large_aux_ii:w
\cs_undefine:c { fp_to_tl_large_0:w }
\cs_undefine:c { fp_to_tl_large_1:w }
\cs_undefine:c { fp_to_tl_large_2:w }
\cs_undefine:c { fp_to_tl_large_3:w }
\cs_undefine:c { fp_to_tl_large_4:w }
\cs_undefine:c { fp_to_tl_large_5:w }
\cs_undefine:c { fp_to_tl_large_6:w }
\cs_undefine:c { fp_to_tl_large_7:w }
\cs_undefine:c { fp_to_tl_large_8:w }
\cs_undefine:c { fp_to_tl_large_8_aux:w }
\cs_undefine:c { fp_to_tl_large_9:w }
\cs_undefine:N \fp_to_tl_small:w
\cs_undefine:N \fp_to_tl_small_one:w
\cs_undefine:N \fp_to_tl_small_two:w
\cs_undefine:N \fp_to_tl_small_aux:w
\cs_undefine:N \fp_to_tl_large_zeros:NNNNNNNNN
\cs_undefine:N \fp_to_tl_small_zeros:NNNNNNNNN
\cs_undefine:N \fp_use_iix_ix:NNNNNNNNN
\cs_undefine:N \fp_use_ix:NNNNNNNNN
\cs_undefine:N \fp_use_i_to_vii:NNNNNNNNN
\cs_undefine:N \fp_use_i_to_iix:NNNNNNNNN
\cs_undefine:N \fp_round_figures:Nn
\cs_undefine:N \fp_round_figures:cn
\cs_undefine:N \fp_ground_figures:Nn
\cs_undefine:N \fp_ground_figures:cn
\cs_undefine:N \fp_round_figures_aux:NNn
\cs_undefine:N \fp_round_places:Nn
\cs_undefine:N \fp_round_places:cn
\cs_undefine:N \fp_ground_places:Nn
\cs_undefine:N \fp_ground_places:cn
\cs_undefine:N \fp_round_places_aux:NNn
\cs_undefine:N \fp_round:
\cs_undefine:N \fp_round_aux:NNNNNNNNN
\cs_undefine:N \fp_round_loop:N
\cs_undefine:N \fp_abs:N
\cs_undefine:N \fp_gabs:N
\cs_undefine:N \fp_abs:c
\cs_undefine:N \fp_gabs:c
\cs_undefine:N \fp_abs_aux:NN
\cs_undefine:N \fp_neg:N
\cs_undefine:N \fp_gneg:N
\cs_undefine:N \fp_neg:c
\cs_undefine:N \fp_gneg:c
\cs_undefine:N \fp_neg_aux:NN
\cs_undefine:N \fp_add:Nn
\cs_undefine:N \fp_gadd:Nn
\cs_undefine:N \fp_add:cn
\cs_undefine:N \fp_gadd:cn
\cs_undefine:N \fp_add_aux:NNn
\cs_undefine:N \fp_add_core:
\cs_undefine:N \fp_add_sum:
\cs_undefine:N \fp_add_difference:
\cs_undefine:N \fp_sub:Nn
\cs_undefine:N \fp_gsub:Nn
\cs_undefine:N \fp_sub:cn
\cs_undefine:N \fp_gsub:cn
\cs_undefine:N \fp_sub_aux:NNn
\cs_undefine:N \fp_mul:Nn
\cs_undefine:N \fp_gmul:Nn
\cs_undefine:N \fp_mul:cn
\cs_undefine:N \fp_gmul:cn
\cs_undefine:N \fp_mul_aux:NNn
\cs_undefine:N \fp_mul_internal:
\cs_undefine:N \fp_mul_split:NNNN
\cs_undefine:N \fp_mul_product:NN
\cs_undefine:N \fp_mul_end_level:
\cs_undefine:N \fp_mul_end_level:NNNNNNNNN
\cs_undefine:N \fp_div:Nn
\cs_undefine:N \fp_gdiv:Nn
\cs_undefine:N \fp_div:cn
\cs_undefine:N \fp_gdiv:cn
\cs_undefine:N \fp_div_aux:NNn
\cs_undefine:N \fp_div_internal:
\cs_undefine:N \fp_div_loop:
\cs_undefine:N \fp_div_divide:
\cs_undefine:N \fp_div_divide_aux:
\cs_undefine:N \fp_div_store:
\cs_undefine:N \fp_div_store_integer:
\cs_undefine:N \fp_div_store_decimal:
\cs_undefine:N \fp_div_loop_step:w
\cs_undefine:N \fp_add:NNNNNNNNN
\cs_undefine:N \fp_sub:NNNNNNNNN
\cs_undefine:N \fp_mul:NNNNNN
\cs_undefine:N \fp_mul:NNNNNNNNN
\cs_undefine:N \fp_div_integer:NNNNN
\cs_undefine:N \fp_extended_normalise:
\cs_undefine:N \fp_extended_normalise_aux_i:
\cs_undefine:N \fp_extended_normalise_aux_i:w
\cs_undefine:N \fp_extended_normalise_aux_ii:w
\cs_undefine:N \fp_extended_normalise_aux_ii:
\cs_undefine:N \fp_extended_normalise_ii_aux:NNNNNNNNN
\cs_undefine:N \fp_extended_normalise_output:
\cs_undefine:N \fp_extended_normalise_output_aux_i:NNNNNNNNN
\cs_undefine:N \fp_extended_normalise_output_aux_ii:NNNNNNNNN
\cs_undefine:N \fp_extended_normalise_output_aux:N
\cs_undefine:N \fp_trig_normalise:
\cs_undefine:N \fp_trig_normalise_aux:
\cs_undefine:N \fp_trig_sub:NNN
\cs_undefine:N \fp_trig_octant:
\cs_undefine:N \fp_trig_octant_aux_i:
\cs_undefine:N \fp_trig_octant_aux_ii:
\cs_undefine:N \fp_sin:Nn
\cs_undefine:N \fp_gsin:Nn
\cs_undefine:N \fp_sin:cn
\cs_undefine:N \fp_gsin:cn
\cs_undefine:N \fp_sin_aux:NNn
\cs_undefine:N \fp_sin_aux_i:
\cs_undefine:N \fp_sin_aux_ii:
\cs_undefine:N \fp_cos:Nn
\cs_undefine:N \fp_gcos:Nn
\cs_undefine:N \fp_cos:cn
\cs_undefine:N \fp_gcos:cn
\cs_undefine:N \fp_cos_aux:NNn
\cs_undefine:N \fp_cos_aux_i:
\cs_undefine:N \fp_cos_aux_ii:
\cs_undefine:N \fp_trig_calc_cos:
\cs_undefine:N \fp_trig_calc_sin:
\cs_undefine:N \fp_trig_calc_Taylor:
\cs_undefine:N \fp_tan:Nn
\cs_undefine:N \fp_gtan:Nn
\cs_undefine:N \fp_tan:cn
\cs_undefine:N \fp_gtan:cn
\cs_undefine:N \fp_tan_aux:NNn
\cs_undefine:N \fp_tan_aux_i:
\cs_undefine:N \fp_tan_aux_ii:
\cs_undefine:N \fp_tan_aux_iii:
\cs_undefine:N \fp_tan_aux_iv:
\cs_undefine:c { c_fp_exp_1_tl }
\cs_undefine:c { c_fp_exp_2_tl }
\cs_undefine:c { c_fp_exp_3_tl }
\cs_undefine:c { c_fp_exp_4_tl }
\cs_undefine:c { c_fp_exp_5_tl }
\cs_undefine:c { c_fp_exp_6_tl }
\cs_undefine:c { c_fp_exp_7_tl }
\cs_undefine:c { c_fp_exp_8_tl }
\cs_undefine:c { c_fp_exp_9_tl }
\cs_undefine:c { c_fp_exp_10_tl }
\cs_undefine:c { c_fp_exp_20_tl }
\cs_undefine:c { c_fp_exp_30_tl }
\cs_undefine:c { c_fp_exp_40_tl }
\cs_undefine:c { c_fp_exp_50_tl }
\cs_undefine:c { c_fp_exp_60_tl }
\cs_undefine:c { c_fp_exp_70_tl }
\cs_undefine:c { c_fp_exp_80_tl }
\cs_undefine:c { c_fp_exp_90_tl }
\cs_undefine:c { c_fp_exp_100_tl }
\cs_undefine:c { c_fp_exp_200_tl }
\cs_undefine:c { c_fp_exp_-1_tl }
\cs_undefine:c { c_fp_exp_-2_tl }
\cs_undefine:c { c_fp_exp_-3_tl }
\cs_undefine:c { c_fp_exp_-4_tl }
\cs_undefine:c { c_fp_exp_-5_tl }
\cs_undefine:c { c_fp_exp_-6_tl }
\cs_undefine:c { c_fp_exp_-7_tl }
\cs_undefine:c { c_fp_exp_-8_tl }
\cs_undefine:c { c_fp_exp_-9_tl }
\cs_undefine:c { c_fp_exp_-10_tl }
\cs_undefine:c { c_fp_exp_-20_tl }
\cs_undefine:c { c_fp_exp_-30_tl }
\cs_undefine:c { c_fp_exp_-40_tl }
\cs_undefine:c { c_fp_exp_-50_tl }
\cs_undefine:c { c_fp_exp_-60_tl }
\cs_undefine:c { c_fp_exp_-70_tl }
\cs_undefine:c { c_fp_exp_-80_tl }
\cs_undefine:c { c_fp_exp_-90_tl }
\cs_undefine:c { c_fp_exp_-100_tl }
\cs_undefine:c { c_fp_exp_-200_tl }
\cs_undefine:N \fp_exp:Nn
\cs_undefine:N \fp_gexp:Nn
\cs_undefine:N \fp_exp:cn
\cs_undefine:N \fp_gexp:cn
\cs_undefine:N \fp_exp_aux:NNn
\cs_undefine:N \fp_exp_internal:
\cs_undefine:N \fp_exp_aux:
\cs_undefine:N \fp_exp_integer:
\cs_undefine:N \fp_exp_integer_tens:
\cs_undefine:N \fp_exp_integer_units:
\cs_undefine:N \fp_exp_integer_const:n
\cs_undefine:N \fp_exp_integer_const:nnnn
\cs_undefine:N \fp_exp_decimal:
\cs_undefine:N \fp_exp_Taylor:
\cs_undefine:N \fp_exp_const:Nx
\cs_undefine:N \fp_exp_const:cx
\cs_undefine:c { c_fp_ln_10_1_tl }
\cs_undefine:c { c_fp_ln_10_2_tl }
\cs_undefine:c { c_fp_ln_10_3_tl }
\cs_undefine:c { c_fp_ln_10_4_tl }
\cs_undefine:c { c_fp_ln_10_5_tl }
\cs_undefine:c { c_fp_ln_10_6_tl }
\cs_undefine:c { c_fp_ln_10_7_tl }
\cs_undefine:c { c_fp_ln_10_8_tl }
\cs_undefine:c { c_fp_ln_10_9_tl }
\cs_undefine:c { c_fp_ln_2_1_tl }
\cs_undefine:c { c_fp_ln_2_2_tl }
\cs_undefine:c { c_fp_ln_2_3_tl }
\cs_undefine:N \fp_ln:Nn
\cs_undefine:N \fp_gln:Nn
\cs_undefine:N \fp_ln:cn
\cs_undefine:N \fp_gln:cn
\cs_undefine:N \fp_ln_aux:NNn
\cs_undefine:N \fp_ln_aux:
\cs_undefine:N \fp_ln_exponent:
\cs_undefine:N \fp_ln_internal:
\cs_undefine:N \fp_ln_exponent_tens:NN
\cs_undefine:N \fp_ln_exponent_units:
\cs_undefine:N \fp_ln_normalise:
\cs_undefine:N \fp_ln_normalise_aux:NNNNNNNNN
\cs_undefine:N \fp_ln_mantissa:
\cs_undefine:N \fp_ln_mantissa_aux:
\cs_undefine:N \fp_ln_mantissa_divide_two:
\cs_undefine:N \fp_ln_const:nn
\cs_undefine:N \fp_ln_Taylor:
\cs_undefine:N \fp_ln_fixed:
\cs_undefine:N \fp_ln_fixed_aux:NNNNNNNNN
\cs_undefine:N \fp_ln_Taylor_aux:
\cs_undefine:N \fp_pow:Nn
\cs_undefine:N \fp_gpow:Nn
\cs_undefine:N \fp_pow:cn
\cs_undefine:N \fp_gpow:cn
\cs_undefine:N \fp_pow_aux:NNn
\cs_undefine:N \fp_pow_aux_i:
\cs_undefine:N \fp_pow_aux_ii:
\cs_undefine:N \fp_pow_aux_iii:
\cs_undefine:N \fp_pow_aux_iv:
\cs_undefine:N \fp_if_undefined_p:N
\cs_undefine:N \fp_if_undefined:NT
\cs_undefine:N \fp_if_undefined:NF
\cs_undefine:N \fp_if_undefined:NTF
\cs_undefine:N \fp_if_zero_p:N
\cs_undefine:N \fp_if_zero:NT
\cs_undefine:N \fp_if_zero:NF
\cs_undefine:N \fp_if_zero:NTF
\cs_undefine:N \fp_compare:nNnT
\cs_undefine:N \fp_compare:nNnF
\cs_undefine:N \fp_compare:nNnTF
\cs_undefine:N \fp_compare:NNNT
\cs_undefine:N \fp_compare:NNNF
\cs_undefine:N \fp_compare:NNNTF
\cs_undefine:N \fp_compare_aux:N
\cs_undefine:c { fp_compare_=: }
\cs_undefine:c { fp_compare_>: }
\cs_undefine:c { fp_compare_>_aux: }
\cs_undefine:c { fp_compare_absolute_a>b: }
\cs_undefine:c { fp_compare_absolute_a<b: }
\cs_undefine:c { fp_compare_<: }
\cs_undefine:N \fp_compare:nT
\cs_undefine:N \fp_compare:nF
\cs_undefine:N \fp_compare:nTF
\cs_undefine:N \fp_compare_aux_i:w
\cs_undefine:N \fp_compare_aux_ii:w
\cs_undefine:N \fp_compare_aux_iii:w
\cs_undefine:N \fp_compare_aux_iv:w
\cs_undefine:N \fp_compare_aux_v:w
\cs_undefine:N \fp_compare_aux_vi:w
\cs_undefine:N \fp_compare_aux_vii:w
\cs_undefine:N \fp_overflow_msg:
\cs_undefine:N \fp_exp_overflow_msg:
\cs_undefine:N \fp_ln_error_msg:
\cs_undefine:N \fp_trig_overflow_msg:
%    \end{macrocode}
%
% \subsection{Compatibility}
%
% \begin{macro}[pTF]{\fp_if_undefined:N}
%   An old floating point is undefined if it is \texttt{inf} or \texttt{nan}.
%    \begin{macrocode}
\prg_new_conditional:Npnn \fp_if_undefined:N #1 { p , T , F , TF }
  { \exp_after:wN \fp_if_undefined_aux:w #1 }
\cs_new:Npn \fp_if_undefined_aux:w \s_fp \fp_use:w #1#2;
  { \if_num:w #1 > \c_one \prg_return_true: \else: \prg_return_false: \fi: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[pTF]{\fp_if_zero:N}
%   An old floating point is zero if it is $\pm 0$.
%    \begin{macrocode}
\prg_new_conditional:Npnn \fp_if_zero:N #1 { p , T , F , TF }
  { \exp_after:wN \fp_if_zero_aux:w #1 }
\cs_new:Npn \fp_if_zero_aux:w \s_fp \fp_use:w #1#2;
  { \if_num:w #1 = \c_zero \prg_return_true: \else: \prg_return_false: \fi: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \fp_abs:N , \fp_abs:c , \fp_gabs:N , \fp_gabs:c ,
%     \fp_neg:N , \fp_neg:c , \fp_gneg:N , \fp_gneg:c ,
%   }
% \begin{macro}
%   {
%     \fp_add:Nn, \fp_add:cn, \fp_gadd:Nn, \fp_gadd:cn,
%     \fp_sub:Nn, \fp_sub:cn, \fp_gsub:Nn, \fp_gsub:cn,
%     \fp_mul:Nn, \fp_mul:cn, \fp_gmul:Nn, \fp_gmul:cn,
%     \fp_div:Nn, \fp_div:cn, \fp_gdiv:Nn, \fp_gdiv:cn,
%     \fp_pow:Nn, \fp_pow:cn, \fp_gpow:Nn, \fp_gpow:cn,
%   }
% \begin{macro}[aux]{\fp_assign_self:NNN, \fp_assign_with:NNNn}
%   We define here two families of functions: for each operation
%   (\texttt{abs}, \texttt{add}, \ldots{}), we define $4$ functions by
%   one call to \cs{fp_tmp:w}.  First define the unary functions: those
%   which act on a single floating point number, changing its value in
%   place.  Then define functions for the binary operations.
%    \begin{macrocode}
\cs_set_protected:Npn \fp_tmp:w #1#2#3#4
  {
    \cs_new_protected_nopar:Npn #2 { #4 \tl_set:Nx  #1 }
    \cs_new_protected_nopar:Npn #3 { #4 \tl_gset:Nx #1 }
    \cs_generate_variant:Nn #2 { c }
    \cs_generate_variant:Nn #3 { c }
  }
\cs_new_protected:Npn \fp_assign_self:NNN #1#2#3
  { #1 #3 { \exp_after:wN #2 #3 } }
\tl_map_inline:nn
  { {abs} {neg} }
  {
    \exp_args:Nccc \fp_tmp:w { fp_#1_fp:w }
      { fp_#1:N } { fp_g#1:N } \fp_assign_self:NNN
  }
\cs_new_protected:Npn \fp_assign_with:NNNn #1#2#3#4
  {
    #1 #3
      {
        \exp_after:wN \exp_after:wN \exp_after:wN #2
        \exp_after:wN #3
        \tex_romannumeral:D -`0 \fp_parse:n {#4}
      }
  }
\exp_args:Nc \fp_tmp:w { fp_fp_+:ww }
  \fp_add:Nn \fp_gadd:Nn \fp_assign_with:NNNn
\exp_args:Nc \fp_tmp:w { fp_fp_-:ww }
  \fp_sub:Nn \fp_gsub:Nn \fp_assign_with:NNNn
\exp_args:Nc \fp_tmp:w { fp_fp_*:ww }
  \fp_mul:Nn \fp_gmul:Nn \fp_assign_with:NNNn
\exp_args:Nc \fp_tmp:w { fp_fp_/:ww }
  \fp_div:Nn \fp_gdiv:Nn \fp_assign_with:NNNn
\exp_args:Nc \fp_tmp:w { fp_fp_ \iow_char:N \^ :ww }
  \fp_pow:Nn \fp_gpow:Nn \fp_assign_with:NNNn
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {
%     \fp_exp:Nn, \fp_exp:cn, \fp_gexp:Nn, \fp_gexp:cn,
%     \fp_ln:Nn , \fp_ln:cn , \fp_gln:Nn , \fp_gln:cn ,
%     \fp_sin:Nn, \fp_sin:cn, \fp_gsin:Nn, \fp_gsin:cn,
%     \fp_cos:Nn, \fp_cos:cn, \fp_gcos:Nn, \fp_gcos:cn,
%     \fp_tan:Nn, \fp_tan:cn, \fp_gtan:Nn, \fp_gtan:cn,
%   }
% \begin{macro}[aux]
%   {\fp_assign_to:nNNNn, \fp_assign_to_i:wNNNn, \fp_assign_to_ii:NnNNN}
%   The story is at first quite similar to what we did for unary in
%   place operations, and for binary operations.  Here, an added twist
%   is that each value computed by these expensive unary operations is
%   stored as a constant floating point number.
%    \begin{macrocode}
\cs_set_protected:Npn \fp_tmp:w #1#2#3#4#5
  {
    \cs_new_protected_nopar:Npn #1 { #5 {#4} \tl_set_eq:NN  #3 }
    \cs_new_protected_nopar:Npn #2 { #5 {#4} \tl_gset_eq:NN #3 }
    \cs_generate_variant:Nn #1 { c }
    \cs_generate_variant:Nn #2 { c }
  }
\fp_tmp:w \fp_exp:Nn \fp_gexp:Nn \fp_exp_fp:w {exp} \fp_assign_to:nNNNn
\fp_tmp:w \fp_ln:Nn  \fp_gln:Nn  \fp_ln_fp:w  {ln } \fp_assign_to:nNNNn
\fp_tmp:w \fp_sin:Nn \fp_gsin:Nn \fp_sin_fp:w {sin} \fp_assign_to:nNNNn
\fp_tmp:w \fp_cos:Nn \fp_gcos:Nn \fp_cos_fp:w {cos} \fp_assign_to:nNNNn
\fp_tmp:w \fp_tan:Nn \fp_gtan:Nn \fp_tan_fp:w {tan} \fp_assign_to:nNNNn
\cs_new_protected:Npn \fp_assign_to:nNNNn #1#2#3#4#5
  {
    \exp_after:wN \fp_assign_to_i:wNNNn
    \tex_romannumeral:D -`0 \fp_parse:n {#5} {#1} #2#3#4
  }
\cs_new_protected:Npn \fp_assign_to_i:wNNNn \s_fp \fp_use:w #1#2#3; #4
  {
    \exp_args:Nc \fp_assign_to_ii:NnNNN
      { c_fp_ #4 ( #2 \if_meaning:w 1 #1 #3 \fi: ) _fp }
      { #1#2#3 }
  }
\cs_new_protected:Npn \fp_assign_to_ii:NnNNN #1#2#3#4#5
  {
    \cs_if_exist:NF #1
      { \tl_const:Nx #1 { #4 \s_fp \fp_use:w #2; } }
    #3 #5 #1
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[pTF, EXP]{\fp_compare:NNN}
%   Comparisons used to be easier between floating points stored in
%   variables. No more.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_compare:NNNTF { \fp_compare:nNnTF }
\cs_new_protected_nopar:Npn \fp_compare:NNNT  { \fp_compare:nNnT  }
\cs_new_protected_nopar:Npn \fp_compare:NNNF  { \fp_compare:nNnF  }
\cs_new_protected_nopar:Npn \fp_compare_p:NNN { \fp_compare_p:nNn }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fp_round_places:Nn, \fp_ground_places:Nn}
% \begin{macro}[aux]{\fp_round_places_aux:NNn}
%   Rounding to a given number of places is easy, since it is provided
%   by the \pkg{l3fp-round} module.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_round_places:Nn
  { \fp_round_places_aux:NNn \tl_set:Nx }
\cs_new_protected_nopar:Npn \fp_ground_places:Nn
  { \fp_round_places_aux:NNn \tl_gset:Nx }
\cs_new_protected:Npn \fp_round_places_aux:NNn #1#2#3
  {
    #1 #2
      {
        \exp_after:wN \exp_after:wN
        \exp_after:wN \fp_round:Nwn
        \exp_after:wN \exp_after:wN
        \exp_after:wN \fp_aux_round_to_nearest:NNN
        \exp_after:wN #2
        \exp_after:wN { \int_use:N \int_eval:w #3 }
      }
  }
\cs_generate_variant:Nn \fp_round_places:Nn { c }
\cs_generate_variant:Nn \fp_ground_places:Nn { c }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fp_round_figures:Nn, \fp_ground_figures:Nn}
%   Rounding to a given number of figures is the same as rounding to a
%   number of places, after shifting by the exponent of the argument.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_round_figures:Nn #1#2
  {
    \fp_round_places_aux:NNn \tl_set:Nx #1
      { #2 - \exp_after:wN \fp_aux_exponent:w #1 }
  }
\cs_new_protected:Npn \fp_ground_figures:Nn #1#2
  {
    \fp_round_places_aux:NNn \tl_gset:Nx #1
      { #2 - \exp_after:wN \fp_aux_exponent:w #1 }
  }
\cs_generate_variant:Nn \fp_round_figures:Nn { c }
\cs_generate_variant:Nn \fp_ground_figures:Nn { c }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
