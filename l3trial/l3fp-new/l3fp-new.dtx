% \iffalse meta-comment
%
%% File: l3fp-new.dtx Copyright (C) 2011-2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX3 Project.
%%
%% -----------------------------------------------------------------------
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental floating points}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\usepackage{l3fp-new}
\ExplSyntaxOn
\clist_map_inline:nn
  {
    asin, acos, atan, acot,
    asinh, acosh, atanh, acoth, round, floor, ceil
  }
  { \exp_args:Nc \DeclareMathOperator{#1}{#1} }
\ExplSyntaxOff
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{^^A
%   The \textsf{l3fp-new} package: floating points^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% A floating point number is one which is stored as a mantissa and a
% separate exponent.  The module implements expandably a wide set of
% arithmetic, trigonometric, and other operations on floating point
% numbers, to be used within floating point expressions.  Floating point
% expressions support the following operations with their usual
% precedence.
% \begin{itemize}
%   \item Basic arithmetic: addition $x+y$, subtraction $x-y$,
%     multiplication $x*y$, and division $x/y$.
%   \item Trigonometry: $\sin x$, $\cos x$, $\tan x$, $\cot x$.
%   \item Exponentials: $\exp x$, $\ln x$, $x^y$.
%   \item Comparison operators: $x<y$, $x<=y$, $x>?y$, $x!=y$ \emph{etc.}
%   \item Boolean logic: negation $!x$, conjunction $\&$, disjunction
%     $\vert$, ternary operator $x?y:z$.
%   \item [\emph{not yet}] Inverse trigonometric functions: $\asin x$,
%     $\acos x$, $\atan x$, $\acot x$.
%   \item [\emph{not yet}] Hyperbolic functions and their inverse
%     functions: $\sinh x$, $\cosh x$, $\tanh x$, $\coth x$, and $\asinh
%     x$, $\acosh x$, $\atanh x$, $\acoth x$.
%   \item Extrema: $\max(x,y,\ldots)$, $\min(x,y,\ldots)$,
%     $\operatorname{abs}(x)$.
%   \item Rounding functions $\round(x,n)$ with ties rounded to even,
%     $\round0(x,n)$ rounded to zero, $\round\pm(x,n)$ rounded towards
%     $\pm\infty$.  And (\emph{not yet}) modulo, and \enquote{quantize}.
% \end{itemize}
% Floating point numbers can be given either explicitly (in a form such
% as |1.234e-34|, or |-.0001|), or as a stored floating point variable,
% which is automatically replaced by its current value.  See
% section~\ref{sec:fp-floats} for a description of what a floating point is,
% section~\ref{sec:fp-precedence} for details about how an expression is
% parsed, and section~\ref{sec:fp-operations} to know what the various
% operations do.
%
% ^^A todo: better example!!
% An example of use could be the following.
% \begin{verbatim}
%   \LaTeX{} can now compute: $ \frac{\sin (3.5)}{2} + 2\cdot 10^{-3}
%   = \ExplSyntaxOn \fp_to_decimal:n {sin 3.5 /2 + 2e-3} \ExplSyntaxOff $.
% \end{verbatim}
% But in all fairness, this module is mostly meant as an underlying tool
% for higher-level commands.  For example, one could provide a function
% to typeset nicely the result of floating point computations.
% \begin{verbatim}
%   \usepackage{siunitx}
%   \ExplSyntaxOn
%   \NewDocumentCommand { \calcnum } { m }
%     { \num { \fp_to_scientific:n {#1} } }
%   \ExplSyntaxOff
% \end{verbatim}
%
% ^^A todo: redoc
% ^^A \enquote{Exceptions} may occur when a floating point operation such as
% ^^A $1/0$ or $0/0$ is performed.
% ^^A When an invalid operation is performed, two outcomes are possible:
% ^^A in a case such as $1/+0$, the result is simply the floating point
% ^^A $+\infty$.  However, when there is no valid floating point number
% ^^A representing the result, for example with $0/0$, an
% ^^A \enquote{exception} will occur
%
% \section{Creating and initialising floating point variables}
%
% \begin{function}{\fp_new:N, \fp_new:c}
%   \begin{syntax}
%     \cs{fp_new:N} \meta{fp~var}
%   \end{syntax}
%   Creates a new \meta{fp~var} or raises an error if the name is
%   already taken. The declaration is global. The \meta{fp~var} will
%   initially be $+0$.
% \end{function}
%
% \begin{function}{\fp_const:Nn, \fp_const:cn}
%   \begin{syntax}
%     \cs{fp_const:Nn} \meta{fp~var} \Arg{floating point expression}
%   \end{syntax}
%   Creates a new constant \meta{fp~var} or raises an error if the name
%   is already taken. The \meta{fp~var} will be set globally equal to
%   the result of evaluating the \meta{floating point expression}.
% \end{function}
%
% \begin{function}
%   {
%     \fp_set_eq:NN , \fp_set_eq:cN , \fp_set_eq:Nc , \fp_set_eq:cc ,
%     \fp_gset_eq:NN, \fp_gset_eq:cN, \fp_gset_eq:Nc, \fp_gset_eq:cc
%   }
%   \begin{syntax}
%     \cs{fp_set_eq:NN} \meta{fp~var1} \meta{fp~var2}
%   \end{syntax}
%   Sets the floating point variable \meta{fp~var1} equal to the current
%   value of \meta{fp~var2}.
% \end{function}
%
% \begin{function}{\fp_set:Nn, \fp_set:cn, \fp_gset:Nn, \fp_gset:cn}
%   \begin{syntax}
%     \cs{fp_set:Nn} \meta{fp~var} \Arg{floating point expression}
%   \end{syntax}
%   Sets \meta{fp~var} equal to the result of computing the
%   \meta{floating point expression}.
% \end{function}
%
% \section{Using floating point numbers}
%
% \begin{function}[EXP]{\fp_to_decimal:N, \fp_to_decimal:c, \fp_to_decimal:n}
%   \begin{syntax}
%     \cs{fp_to_decimal:N} \meta{fp~var}
%     \cs{fp_to_decimal:n} \Arg{floating point expression}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and expresses the
%   result as a decimal number with $16$ significant figures and no
%   exponent.  Leading or trailing zeros may be inserted to compensate
%   for the exponent.  Integers are expressed without a decimal
%   separator.
% \end{function}
%
% \begin{function}[EXP]{\fp_to_dim:N, \fp_to_dim:c, \fp_to_dim:n}
%   \begin{syntax}
%     \cs{fp_to_dim:N} \meta{fp~var}
%     \cs{fp_to_dim:n} \Arg{floating point expression}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and expresses the
%   result as a dimension (in \texttt{pt}) suitable for use in dimension
%   expressions.  The precise output is identical to
%   \cs{fp_to_decimal:n}, with an additional trailing \texttt{pt}.
% \end{function}
%
% \begin{function}[EXP]{\fp_to_int:N, \fp_to_int:c, \fp_to_int:n}
%   \begin{syntax}
%     \cs{fp_to_int:N} \meta{fp~var}
%     \cs{fp_to_int:n} \Arg{floating point expression}
%   \end{syntax}
%   ^^A todo: redoc
%   Evaluates the \meta{floating point expression}, and rounds the
%   result to the closest integer, with ties rounded to an even integer.
%   Numbers larger than $2^{31}-1$ are rounded down to $2^{31}-1$, and
%    numbers less than $-2^{32}-1$ are rounded up to $-2^{32}-1$.
% \end{function}
%
% \begin{function}[EXP]
%   {\fp_to_scientific:N, \fp_to_scientific:c, \fp_to_scientific:n}
%   \begin{syntax}
%     \cs{fp_to_scientific:N} \meta{fp~var}
%     \cs{fp_to_scientific:n} \Arg{floating point expression}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and expresses the
%   result in scientific notation with $16$ significant figures:
%   \begin{quote}
%     \meta{optional \texttt{-}}\meta{digit}\texttt{.}\meta{15 digits}\texttt{e}\meta{optional sign}\meta{exponent}
%   \end{quote}
%   The leading \meta{digit} is non-zero except in the case of $\pm
%   0$. The special values $\pm \inf$ and \texttt{nan} are rendered as
%   \texttt{inf}, \texttt{-inf} and \texttt{nan} respectively.
% \end{function}
%
% \begin{function}[EXP]{\fp_to_tl:N, \fp_to_tl:c, \fp_to_tl:n}
%   \begin{syntax}
%     \cs{fp_to_tl:N} \meta{fp~var}
%     \cs{fp_to_tl:n} \Arg{floating point expression}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and expresses the
%   result in (almost) the shortest possible form.  Numbers greater or
%   equal to $10^{16}$, or less than $10^{-3}$ are expressed in
%   scientific notation with trailing zeros trimmed.  Numbers in the
%   range $[10^{-3},10^{16})$ are expressed in a decimal notation
%   without exponent, with trailing zeros trimmed, and no decimal
%   separator for integer values.  The special valus $\pm 0$, $\pm \inf$
%   and \texttt{nan} are rendered as |0|, |-0|, \texttt{inf},
%   \texttt{-inf}, and \texttt{nan} respectively.
% \end{function}
%
% \begin{function}{\fp_show:N, \fp_show:c, \fp_show:n}
%   \begin{syntax}
%     \cs{fp_show:N} \meta{fp~var}
%     \cs{fp_show:n} \Arg{floating point expression}
%   \end{syntax}
%   Evaluates the \meta{floating point expression} and displays the
%   result in the terminal.
% \end{function}
%
% \section{Floating point conditionals}
%
% \begin{function}[EXP, pTF]{\fp_if_exist:N, \fp_if_exist:c}
%   \begin{syntax}
%     \cs{fp_if_exist_p:N} \meta{fp~var}
%     \cs{fp_if_exist:NTF} \meta{fp~var} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Tests whether the \meta{fp~var} is currently defined.  This does not
%   check that the \meta{fp~var} really is a floating point variable.
% \end{function}
%
% \begin{function}[EXP, pTF]{\fp_compare:nNn, \fp_compare:n}
%   \begin{syntax}
%     \cs{fp_compare_p:nNn} \Arg{fpexpr_1} \meta{relation} \Arg{fpexpr_2}
%     \cs{fp_compare:nNnTF} \Arg{fpexpr_1} \meta{relation} \Arg{fpexpr_2} \Arg{true code} \Arg{false code}
%     \cs{fp_compare_p:n} \{ \meta{fpexpr_1} \meta{relation} \meta{fpexpr_2} \}
%     \cs{fp_compare:nTF} \{ \meta{fpexpr_1} \meta{relation} \meta{fpexpr_2} \} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Compares the \meta{fpexpr_1} and the \meta{fpexpr_2}, and returns
%   \texttt{true} if the \meta{relation} is obeyed.  Two floating point
%   numbers $x$ and $y$ may obey four mutually exclusive relations:
%   $x<y$, $x=y$, $x>y$, or $x$ and $y$ are not ordered.  The latter
%   case occurs exactly when one of the operands is \texttt{nan}, and
%   this relations is denoted by the symbol |?|.  The \texttt{nNn}
%   functions support the \meta{relations} |<|, |=|, |>|, and |?|.  The
%   \texttt{n} functions support as a \meta{relation} any combination of
%   those four symbols, plus an optional leading |!| (which negates the
%   \meta{relation}), with the restriction that the \meta{relation} may
%   not start with |?|.  Common choices of \meta{relation} include |>=|
%   (greater or equal), |!=| (not equal), |!?| (comparable).  Note that
%   a \texttt{nan} is distinct from any value, even a second
%   \texttt{nan}, hence $x=x$ is not true for a \texttt{nan}.
% \end{function}
%
% \section{Some useful constants}
%
% \begin{variable}{\c_zero_fp, \c_minus_zero_fp}
%   Zero, with either sign.
% \end{variable}
%
% \begin{variable}{\c_inf_fp, \c_minus_inf_fp}
%   Infinity, with either sign.
% \end{variable}
%
% \begin{variable}{\c_e_fp}
%   The value of the base of the natural logarithm, $\mathrm{e} = \exp(1)$.
% \end{variable}
%
% \begin{variable}{\c_pi_fp}
%   The value of $\pi$.  This can be input directly in a floating point
%   expression as \texttt{pi}.
% \end{variable}
%
% \begin{variable}{\c_one_degree_fp}
%   The value of $1^{\circ}$ in radians.  Multiply an angle given in
%   degrees by this value to obtain a result in radians, suitable to be
%   used for trigonometric functions.  Within floating point
%   expressions, this can be accessed by \texttt{deg}.
% \end{variable}
%
% ^^A todo
% ^^A \section{Rounding}
% ^^A
% ^^A This explains how to go from a floating point number to a
% ^^A rounded value for various applications. Perhaps worth coding
% ^^A functionalities up to what siunitx can do on this matter.
%
% ^^A todo
% ^^A \section{Floating points}
% ^^A
% ^^A Here, there may be a discussion of what floating point numbers
% ^^A are, and a list of relevant resources (\emph{e.g.}, some of
% ^^A Kahan's articles), and previous \TeX{} packages.
%
% \section{Input of floating point numbers} \label{sec:fp-floats}
%
%^^A todo: write a grammar
%^^A todo: fix the bug "0e9999999999 => TeX 'number too large'"
%^^A todo: clarify what has changed compared to the previous l3fp
%
% We support four types of floating point numbers:
% \begin{itemize}
%   \item $\pm 0.d_1d_2\ldots{}d_{16} \cdot 10^{n}$, a normal floating
%     point number, with $d_i\in [0,9]$, $d_1\neq 0$, and $\lvert n\rvert
%     \leq \ExplSyntaxOn \int_use:N \c_fp_max_exponent_int$;
%   \item $\pm 0$, zero, with a given sign;
%   \item $\pm \infty$, infinity, with a given sign;
%   \item \texttt{nan}, is \enquote{not a number}, and can be either quiet
%     or signalling (\emph{not yet}: this distinction is currently
%     unsupported);
%   \item [\emph{not yet}] subnormal numbers $\pm 0.d_1d_2\ldots{}d_{16}
%     \cdot 10^{-\ExplSyntaxOn\int_use:N \c_fp_max_exponent_int}$ with
%     $d_1=0$.
% \end{itemize}
% Normal floating point numbers are stored in base $10$, with $16$
% significant figures.
%
% On input, a normal floating point number consists of:
% \begin{itemize}
%   \item[\meta{sign}] a possibly empty string of |+| and |-| characters;
%   \item[\meta{mantissa}] a non-empty string of digits together with zero
%     or one dot;
%   \item[\meta{exponent}] optionally, the character |e|, followed by a
%     possibly empty string of |+|~and~|-| tokens, and a non-empty string
%     of digits.
% \end{itemize}
% The sign of the resulting number is |+| if \meta{sign} contains an
% even number of |-|, and |-| otherwise, hence, an empty \meta{sign}
% denotes a non-negative input.  The stored mantissa is obtained from
% \meta{mantissa} by omitting the decimal separator and leading zeros,
% and rounding to $16$ significant digits, filling with trailing zeros
% if necessary.  In particular, the value stored is exact if the input
% \meta{mantissa} has at most $16$ digits.  The stored \meta{exponent}
% is obtained by combining the input \meta{exponent} ($0$ if absent)
% with a shift depending on the position of the mantissa and the number
% of leading zeros.
%
% A special case arises if the resulting \meta{exponent} is either
% too large or too small to be represented. This results either in an
% overflow (the number is then replaced by $\pm\infty$), or an
% underflow (resulting in $\pm 0$).
%
% The result is thus $\pm 0$ if and only if \meta{mantissa} contains no
% non-zero digit (\emph{i.e.}, consists only in |0| characters, and an
% optional |.| character), or there is an underflow. Note that a single
% dot is\footnote{Bruno: but that may change.} a valid floating point
% number, equal to $+0$.
%
% Special numbers are input as follows:
% \begin{itemize}
%   \item \texttt{inf} or \texttt{infty} or \texttt{infinity} all represent
%     $+\infty$, and can be preceded by any \meta{sign}.
%   \item \texttt{nan} represents a (quiet) non-number. It can be preceded
%     by any sign, but that will be ignored.
%   \item Any unrecognisable string will yield a signalling \texttt{nan}.
% \end{itemize}
%
% Note that |e-1| is not a representation of $10^{-1}$, because it
% could be mistaken with the difference of \enquote{\texttt{e}} and
% $1$. This is consistent with several other programming languages.
% However, in order to avoid confusions, |e-1| is not considered to
% be this difference either. To input the base of natural logarithms,
% use \texttt{exp(1)} or \cs{c_e_fp}.
%
% \section{Precedence of operators} \label{sec:fp-precedence}
%
% ^^A List "juxtaposition" somewhere in the list.
%
% We list here all the operations supported in floating point
% expressions, in order of decreasing precedence: operations listed
% earlier bind more tightly than operations listed below them.
% \begin{itemize}
%   \item Function calls (\texttt{sin}, \texttt{ln}, \emph{etc}).
%   \item Binary |**| and |^| (right associative).
%   \item Unary |+|, |-|, |!|.
%   \item Binary |*|, |/| and |%|.
%   \item Binary |+| and |-|.
%   \item Comparisons |>=|, |!=|, |<?|, \emph{etc}.
%   \item Logical \texttt{and}, denoted by |&&|.
%   \item Logical \texttt{or}, denoted by \verb*+||+.
%   \item Ternary operator |?:| (right associative).
% \end{itemize}
% The precedence of operations can be overridden using parentheses.
%
% Functions are called on the value of their argument, contrarily to
% \TeX{} macros.
%
% \section{Operations} \label{sec:fp-operations}
%
% ^^A todo: figure out how to document stuff.
%
% \begin{function}{+,-}
%   These functions raise the \enquote{invalid operation} exception for
%   $\infty-\infty$.  They raise \enquote{inexact} whenever the result
%   must be rounded, and \enquote{underflow} or \enquote{overflow} in
%   the appropriate cases.
% \end{function}
%
% \begin{function}{*,/}
%   These functions raise the \enquote{invalid operation} exception for
%   $\infty/\infty$, $0/0$, or $0*\infty$.  Dividing a finite non-zero
%   number by $\pm 0$ raises \enquote{division by zero}.  Those
%   operations may also raise \enquote{inexact}, \enquote{underflow} or
%   \enquote{overflow}.
% \end{function}
%
% \begin{function}{sin,cos,tan,cot}
%   The trigonometric functions are undefined for an argument of
%   $\pm\infty$, leading to the \enquote{invalid operation} exception.
% \end{function}
%
% \begin{function}[EXP]{\dim_to_fp:n}
%   \begin{syntax}
%     \cs{dim_to_fp:n} \Arg{dimexpr}
%   \end{syntax}
%   Expands to an internal floating point number equal to the value of
%   the \meta{dimexpr} in \texttt{pt}.
% \end{function}
%
% \section{Deprecated functions}
% ^^A totalk: should we really deprecate all this?
%
% \begin{function}
%   {
%     \fp_set_from_dim:Nn,  \fp_set_from_dim:cn,
%     \fp_gset_from_dim:Nn, \fp_gset_from_dim:cn
%   }
%   \begin{syntax}
%     \cs{fp_set_from_dim:Nn} \meta{fp~var} \Arg{dimension expression}
%   \end{syntax}
%   Sets the \meta{fp~var} to the distance represented by the
%   \meta{dimension expression} in the units points. This means that
%   distances given in other units are first converted to points before
%   being assigned to the \meta{fp~var}.
% \end{function}
%
% \begin{variable}{\c_undefined_fp}
%   A \texttt{nan}.
% \end{variable}
%
% \section{Disclaimer and roadmap}
%
% The package may break down if:
% \begin{itemize}
%   \item the escape character is either a digit, or an underscore,
%   \item the \tn{uccodes} are changed: the test for whether a character
%     is a letter actually tests if the upper-case code of the character
%     is between A and Z.
% \end{itemize}
%
% The following need to be done. I'll try to time-order the items.
% \begin{itemize}
%   \item Modulo, and rounding functions |quantize|, |quantize0|,
%     |quantize+|, |quantize-|, |quantize=|, |round=|.
%   \item \cs{fp_format:nn} \Arg{fpexpr} \Arg{format}, but what should
%     \meta{format} be?  More general pretty printing?
%   \item Add |and|, |or|, |xor|?  Perhaps under the names \texttt{all},
%     \texttt{any}, and \texttt{xor}?
%   \item Add \texttt{csc} and \texttt{sec}.
%   \item Add $\log(x,b)$ for logarithm of $x$ in base $b$.
%   \item \texttt{hypot} (Euclidean length) and $\atan(x,y) = \atan(x/y)$,
%     also called \texttt{atan2} in other math packages.
%     Cartesian-to-polar transform.  Other inverse trigonometric functions
%     \texttt{acos}, \texttt{asin}, \texttt{atan} (one and two arguments).
%     Also \texttt{asec}, \texttt{acsc}?
%   \item Hyperbolic functions \texttt{cosh}, \texttt{sinh}, \texttt{tanh}.
%   \item Inverse hyperbolics.
%   \item Base conversion, input such as \texttt{0xAB.CDEF}.
%   \item Random numbers (pgfmath provides |rnd|, |rand|, |random|), with
%     seed reset at every \cs{fp_set:Nn}.
%   \item Factorial (not with |!|), gamma function.
%   \item Improve coefficients of \texttt{sin}, \texttt{cos} and
%     \texttt{tan}.
%   \item Treat upper and lower case letters identically in
%     identifiers, and ignore underscores.
%   \item Parse $-3<-2<-1$ as it should, not $(-3<-2)<-1$.
%   \item Add an |array(1,2,3)| and |i=complex(0,1)|.
%   \item Provide an experimental |map| function?  Perhaps easier to
%     implement if it is a single character, |@sin(1,2)|?
% \end{itemize}
% \pkg{Pgfmath} also provides box-measurements (depth, height, width), but
% boxes are not possible expandably.
%
% Bugs.
% \begin{itemize}
%   \item $1-10^{-16}$ should not give $1$.
%   \item When rounding towards $-\infty$, |\dim_to_fp:n {0pt}| should
%     return $-0$, not $+0$.
% \end{itemize}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-new} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% The implementation is provided in separate modules.  A single
% \texttt{sty} file is extracted from the various \texttt{dtx}
% documented \TeX{} sources with the appropriate loading order.  See
% \texttt{l3fp-new.ins} for details.
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
