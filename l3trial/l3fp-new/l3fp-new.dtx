% \iffalse meta-comment
%
%% File: l3fp-new.dtx Copyright (C) 2011 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX3 Project.
%%
%% -----------------------------------------------------------------------
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental floating points}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\usepackage{l3fp-new}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{^^A
%   The \textsf{l3fp-new} package: floating points^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% This module is a wrapper around the following submodules:
% \begin{itemize}
% \item \pkg{l3fp-old} undefines functions defined in the current
%   \pkg{l3fp} and renames them with \texttt{fp} replaced by
%   \texttt{ofp}.
% \item \pkg{l3fp-aux} for auxiliary functions needed by all
%   other submodules,
% \item \pkg{l3fp-convert} for conversions to various formats,
% \item \pkg{l3fp-parse} for parsing expressions,
% \item \pkg{l3fp-basics} for the implementation of elementary
%   arithmetic (addition, subtraction, multiplication, division),
% \item \pkg{l3fp-expo} for the implementation of logarithm,
%   and exponential,
% \item \pkg{l3fp-assign} for all assignments.
% \end{itemize}
% It ensures that the submodules are loaded in the correct order,
% and is meant to collect the documentation for all user commands
% of those submodules, which will therefore mostly consist of
% their commented source.
%
% To load all submodules just include the following line in the preamble.
% \begin{verbatim}
%   \RequirePackage{l3fp-new}
% \end{verbatim}
%
% \section{Floating points}
%
% Here, there may be a discussion of what floating point numbers
% are, and a list of relevant resources (\emph{e.g.}, some of
% Kahan's articles), and previous \TeX{} packages.
%
% \section{Input: floating point expressions}
%
% Floating point numbers are mainly\footnote{Bruno: only?} input
% as floating point expressions. The corresponding computations
% are then performed expandably, and the resulting floating point
% is used: either stored, or output in some form, depending on the
% function used. All \enquote{public} functions expecting floating
% point numbers also accept floating point expressions as their
% argument.\footnote{If one of them does not, it is an error,
%   please inform the \LaTeX3 project.}
%
% Expressions are written using infix notation for the usual
% arithmetic operations |+-*/^%|, and prefix notation for functions
% such as \texttt{sin}, \texttt{log}, etc. A typical example of use
% could be the following.
% \begin{verbatim}
% \fp_parse:n { 3.2 + .04e-2 * ( -2e3^2 - sin(pi/3) ) - 1234.567e1 }
% \end{verbatim}
% The \pkg{l3fp-parse} submodule reads this kind of
% \enquote{free-form} input and hands it to functions defined for
% instance in \pkg{l3fp-basics}, to do the actual computations.
% Before presenting the user functions, we describe what a floating
% point number is, and the syntax for operations.
%
% \subsection{Floating point numbers}
%
% A floating point number is one which is stored as a mantissa and
% a separate exponent. Floating point numbers are stored in base
% $10$, with $16$ significant digits, and their exponent should lie
% in the range $[\cs{c_fp_min_exponent_int}, \cs{c_fp_max_exponent_int}]$,
% currently $\ExplSyntaxOn [\int_use:N \c_fp_min_exponent_int,
% \int_use:N \c_fp_max_exponent_int]$ (but that may change).
%
% On input, a floating point number consists of the following
% parts:\footnote{Bruno: we should probably have a grammar?}
% \begin{itemize}
% \item[\meta{sign}] possibly empty string of |+| and |-| characters;
% \item[\meta{mantissa}] non-empty string of digits together with zero
%   or one dot;
% \item[\meta{exponent}] optionally, the character |e|, followed by
%   a possibly empty string of |+|~and~|-| tokens, and a non-empty
%   string of digits.
% \end{itemize}
%
% The sign of the resulting number is |+| if \meta{sign} contains
% an even number of |-|, and |-| otherwise, hence, an empty \meta{sign}
% denotes a non-negative input. The stored mantissa is obtained from
% \meta{mantissa} by omitting the decimal separator and leading zeros,
% and rounding to $16$ significant digits, filling with trailing zeros
% if necessary. Hence, the value stored is exact if the input
% \meta{mantissa} has at most $16$ digits. The stored \meta{exponent}
% is obtained by combining the input \meta{exponent} ($0$ if absent)
% with a shift depending on the position of the mantissa and the number
% of leading zeros.
%
% A special case arises if the resulting \meta{exponent} is either
% too large or too small to be represented. This results either in an
% overflow (the number is then replaced by $\pm\infty$), or an
% underflow (resulting in $\pm 0$).\footnote{Bruno: currently, exponents
%   which are too large for \TeX{}'s integers overflow \TeX{} itself. This
%   ought to be rectified, since \texttt{0e99999999999} should be a valid
%   representation of $0$.}
%
% The resulting number is thus $\pm 0$ if and only if \meta{mantissa}
% contains no non-zero digit (\emph{i.e.}, consists only in |0| characters,
% and an optional |.| character), or there is an underflow. Note that
% a single dot is\footnote{Bruno: but that may change.} a valid floating
% point number, equal to $+0$.
%
% Special numbers are input as follows:
% \begin{itemize}
% \item \texttt{inf} or \texttt{infty} or \texttt{infinity} all represent
%   $+\infty$, and can be preceeded by any \meta{sign}.
% \item \texttt{nan} represents a (quiet) non-number. It can be preceeded
%   by any sign, but that will be ignored.
% \item Any unrecognizable string will yield a signalling \texttt{nan}.
% \end{itemize}
%
% Note that |e-1| is not a representation of $10^{-1}$, because it
% could be mistaken with the difference of \enquote{\texttt{e}} and
% $1$. This is consistent with several other programming languages.
% However, in order to avoid confusions, |e-1| is not considered to
% be this difference either. To input the base of natural logarithms,
% $\exp(1)$, use \cs{c_e_fp}.\footnote{Bruno: clarify what has changed
%   or not compared to the previous \pkg{l3fp}.}
%
% See \pkg{l3fp-convert} for info on how floating point numbers are stored,
% and \pkg{l3fp-basics} for info on how operations are implemented.
%
% \subsection{Operations}
%
% The following operations are currently supported.
% \begin{itemize}
% \item[\texttt{+-}] Addition and subtraction have lowest precedence.
% \item[\texttt{*/}] Multiplication and division have higher precedence.
%^^A \item[\texttt{\char`^}]  The power function has even higher precedence.
% \item[\texttt{()}] The contents of parenthesized groups are evaluated
%   before being used in the computation.
% \item[\texttt{ln}] One function is coded so far. Eventually,
%   we will provide |sin|, |cos|, |tan|, |ln|, |exp|, etc.
%   The argument, within parentheses, is evaluated before the call
%   to the function.
% \end{itemize}
%
% \begin{function}[EXP]{\fp_from_dim:N, \fp_from_dim:n}
%   \begin{syntax}
%     \cs{fp_from_dim:N} \meta{dim~var}
%     \cs{fp_from_dim:n} \Arg{dimexpr}
%   \end{syntax}
%   Expands to the internal floating point number resulting from
%   evaluating the \meta{dimexpr} and expressing it in units of
%   \texttt{pt}.
% \end{function}
%
% \section{Output}
%
% \begin{function}[EXP]{\fp_use:N, \fp_eval:n}
%   \begin{syntax}
%     \cs{fp_use:N} \meta{fp~var}
%     \cs{fp_eval:n} \Arg{fpexpr}
%   \end{syntax}
%   Evaluates the \meta{fpexpr} and expresses the results in
%   scientific notation with $16$ significant figures:
%   \begin{quote}
%     \meta{optional sign}\meta{non-zero digit}\texttt{.}\meta{15 digits}%^^A
%     \texttt{e}\meta{optional sign}\meta{exponent}
%   \end{quote}
% \end{function}
% ^^A todo: currently wrong: needs to be shifted to make it correct.
%
% \begin{function}[EXP]{\fp_to_int:N, \fp_to_int:n}
%   \begin{syntax}
%     \cs{fp_to_int:N} \meta{fp~var}
%     \cs{fp_to_int:n} \Arg{fpexpr}
%   \end{syntax}
%   Evaluates the \meta{fpexpr}, and rounds the result to the closest
%   integer, with ties rounded to an even integer.  Numbers larger
%   than $2^{31}-1$ in absolute value trigger an overflow error, and
%   the closest representable is used.
% \end{function}
%
% \begin{function}[EXP]{\fp_to_dim:N, \fp_to_dim:n}
%   \begin{syntax}
%     \cs{fp_to_dim:N} \meta{fp~var}
%     \cs{fp_to_dim:n} \Arg{fpexpr}
%   \end{syntax}
%   Evaluates the \meta{fpexpr} and converts the result into a
%   dimension (in \texttt{pt}) suitable for use in dimension
%   expressions. The dimension is rounded to the nearest dimension
%   representible by \TeX{}, with ties rounded to even.
% \end{function}
%
% \begin{function}[EXP]{\fp_to_tl:N, \fp_to_tl:n}
%   \begin{syntax}
%     \cs{fp_to_tl:N} \meta{fp~var}
%     \cs{fp_to_tl:n} \Arg{fpexpr}
%   \end{syntax}
%   Evaluates the \met{fpexpr} and expresses the result as a calculator
%   would display it. In particular, trailing zeros are trimmed.
%   ^^A todo: describe format.
% \end{function}
%
% \subsection{Rounding}
%
% This explains how to go from a floating point number to a
% rounded value for various applications. Perhaps worth coding
% functionalities up to what siunitx can do on this matter.
%
% \section{Assignments}
%
% \begin{function}{\fp_new:N,\fp_new:c}
%   \begin{syntax}
%     \cs{fp_new:N} \meta{fp~var}
%   \end{syntax}
%   Creates a new \meta{fp~var} or raises an error if the
%   name is already taken. The declaration is global. The
%   \meta{tl~var} will initially be $+0$.
% \end{function}
%
% \begin{function}{\fp_const:Nn, \fp_const:cn}
%   \begin{syntax}
%     \cs{fp_const:Nn} \meta{fp~var} \Arg{floating point expression}
%   \end{syntax}
%   Creates a new constant \meta{fp~var} or raises an error
%   if the name is already taken. The value of the \meta{fp~var}
%   will be set globally to the result of evaluating the
%   \meta{floating point expression}.
% \end{function}
%
% \begin{function}
%   {
%     \fp_set_eq:NN, \fp_set_eq:cN, \fp_set_eq:Nc, \fp_set_eq:cc,
%     \fp_gset_eq:NN, \fp_gset_eq:cN, \fp_gset_eq:Nc, \fp_gset_eq:cc
%   }
%   \begin{syntax}
%     \cs{fp_set_eq:NN} \meta{fp~var1} \meta{fp~var2}
%   \end{syntax}
%   Sets the floating point variable \meta{fp~var1} equal to
%   the current value of \meta{tl~var2}.
% \end{function}
%
% \begin{function}{\fp_set:Nn,\fp_set:cn, \fp_gset:Nn, \fp_gset:cn}
%   \begin{syntax}
%     \cs{fp_set:Nn} \meta{fp~var} \Arg{floating point expression}
%   \end{syntax}
%   Sets \meta{fp~var} to the result of computing the
%   \meta{floating point expression}.
% \end{function}
%
% \section{Disclaimer}
%
% The package may break down if:
% \begin{itemize}
% \item the escape character is either a digit, or an underscore,
% \item the uccodes are changed: the test for whether a character is a letter
%   actually tests if the upper-case code of the character is between A and Z.
% \end{itemize}
%
% \section{Roadmap}
%
% The following need to be done. I'll try to time-order the items.
% \begin{itemize}
% \item Implicit multiplication in |2\c_two|.
% \item Constants: deg, rad, e, pi, true, false.
% \item Trigonometric functions (cos, cosec, cot, sec, sin, tan).
% \item Exponential and power functions, log-in-base.
% \item Hyperbolic functions (cosh, sinh, tanh).
% \item Inverse trigonometric functions (acos, asin, atan, atan2).
% \item Square root and Euclidean length.
% \item Comparison. |cmp(,)| returning $0$, $1$, $-1$, or \texttt{NaN}
%   for |=|, |<|, |>|, or unordered. Also, infix, any non-empty
%   combination of |=<>?|, optionally preceeded by |!| to negate.
% \item Absolute value, max, min and modulo functions.
% \item Rounding functions, (pgfmath provides |ceil()|, |floor()|,
%   |int()|, |round(,)|, |frac()|, |real()|).
% \item Pretty printing.
% \item Base conversion.
% \item Random numbers (pgfmath provides |rnd|, |rand|, |random|).
% \item Factorial (not with |!|), gamma function.
% \item Conditionals: |?|\ldots |:| ternary operator (\emph{this
%     is incompatible with \texttt{?} as a comparison operator}),
%   |not|, |and|, |or|, |xor|.
% \end{itemize}
% Pgfmath also provides ``array'', and box-measurements:
% depth, height, width (boxes are not possible expandably).
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-new} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% Load submodules in the right order.
%    \begin{macrocode}
\RequirePackage{
  l3fp-old,       % rename old fp functions
  l3fp-aux,       % various tools
  l3fp-convert,   % reading one number
  l3fp-parse,     % parsing expressions
  l3fp-assign,    % all the non-expandable commands
  l3fp-basics,    % exact arithmetic with 4-block numbers
  l3fp-extended,  % arithmetic with 6-block numbers
  l3fp-expo       % exp, ln, pow
  % l3fp-trig       % sin, cos, tan
  % l3fp-atrig      % asin, acos, atan
}
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
