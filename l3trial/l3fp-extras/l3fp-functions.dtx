% \iffalse
%
%% File l3fp-functions.dtx (C) Copyright 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id: l3fp-functions.dtx 4182 2012-08-31 18:03:34Z bruno $
  {L3 Experimental floating point functions}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3fp-functions} package\\ Floating point functions^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-functions} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=fp>
%    \end{macrocode}
%
% \subsection{Misc}
%
% \begin{macro}[EXP]{\exp_last_unbraced:Ncco}
%   To be moved to \pkg{l3kernel}?
%    \begin{macrocode}
\cs_new:Npn \exp_last_unbraced:Ncco #1#2#3#4
  {
    \exp_after:wN #1
    \cs:w #2 \exp_after:wN \cs_end:
    \cs:w #3 \exp_after:wN \cs_end:
    #4
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Declaring functions}
%
% \begin{macro}[aux]{\@@_function_parsing:Nn}
%   The appropriate incantation for \pkg{l3fp-parse}.  When the parser
%   will see |#2|, it looks for one or more arguments (using
%   \cs{c_sixteen} here rather than \cs{c_fifteen} means that the
%   function can receive more than one argument), then calls
%   \cs{@@_function_apply_unary:NNwN}.  The scope in which this
%   definition applies depends on the |:cpx| assignment function |#1|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_parsing:Nn #1#2
  {
    #1 { @@_parse_word_ \tl_to_str:n {#2} :N } ##1
      {
        \exp_not:N \exp_after:wN
        \exp_not:N \@@_function_apply_unary:NNwN
        \exp_not:N \exp_after:wN
        ##1
        \exp_not:N \exp_after:wN
        \exp_not:c { @@_prefix_ \tl_to_str:n {#2} _o:w }
        \exp_not:N \tex_romannumeral:D
        \exp_not:N \@@_parse_until:Nw
        \exp_not:N \c_sixteen
        \exp_not:N \@@_parse_expand:w
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux]{\@@_function_unknown:Nn}
%   Set the function |#2| to expand to itself.  The scope depends on the
%   |_protected:cpx| assignment |#1|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_unknown:Nn #1#2
  {
    #1 { @@_prefix_ \tl_to_str:n {#2} _o:w } ##1 \s_@@_stop
      {
        \exp_not:n
          {
            \@@_exp_after_symbolic_f:nw
              { \exp_after:wN \exp_stop_f: }
              \s_@@_symbolic \@@_symbolic_chk:w
          }
                \exp_not:c { @@_prefix_ \tl_to_str:n {#2} _o:w } {##1} ;
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, aux]{\@@_function_apply_unary:NNwN}
%   Apply function |#2| to its arguments |#3| (delimited by
%   \cs{s_@@_stop}).  This will trigger the \texttt{f}-expansion of the
%   |parse_infix| function |#4| which follows, which receives the
%   precedence |#1| as an argument.
%    \begin{macrocode}
\cs_new:Npn \@@_function_apply_unary:NNwN #1#2#3@#4
  {
    #2 #3 \s_@@_stop
    \tex_romannumeral:D -`0 #4 #1
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fp_new_function:n}
%   This is very similar to \cs{fp_new_variable:n}.
%    \begin{macrocode}
\cs_new_protected:Npn \fp_new_function:n #1
  {
    \fp_str_if_identifier:nTF {#1}
      {
        \cs_if_exist:cT { @@_parse_word_ \tl_to_str:n {#1} :N }
          {
            \__msg_kernel_error:nnn
              { fp } { identifier-already-defined } {#1}
            \cs_undefine:c { @@_parse_word_ \tl_to_str:n {#1} :N }
            \cs_undefine:c { @@_prefix_ \tl_to_str:n {#1} _o:w }
          }
        \@@_function_parsing:Nn \cs_new:cpx {#1}
        \@@_function_unknown:Nn \cs_new_protected:cpx {#1}
      }
      { \__msg_kernel_error:nnn { fp } { invalid-identifier } {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Defining functions by their expression}
%
% \begin{variable}{\l_@@_function_arg_int}
%   Labels the arguments of a function being defined.
%    \begin{macrocode}
\int_new:N \l_@@_function_arg_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\fp_set_function:nnn, \fp_gset_function:nnn}
% \begin{macro}[aux]{\@@_set_function:Nnnn}
%   \begin{syntax}
%     \cs{fp_set_function:nnn} \Arg{identifier}
%       \Arg{comma-list of variables} \Arg{expression}
%   \end{syntax}
%   Defines the \meta{identifier} to stand for a function which expects
%   some arguments defined by the \meta{comma-list of variables}, and
%   evaluates to the \meta{expression}.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fp_set_function:nnn
  { \@@_set_function:Nnnn \cs_set_protected:cpx }
\cs_new_protected_nopar:Npn \fp_gset_function:nnn
  { \@@_set_function:Nnnn \cs_gset_protected:cpx }
\cs_new_protected:Npn \@@_set_function:Nnnn #1#2#3#4
  {
    \fp_str_if_identifier:nTF {#2}
      {
        \cs_if_exist:cF { @@_parse_word_ \tl_to_str:n {#2} :N }
          {
            \@@_function_parsing:Nn \cs_new:cpx {#2}
            \@@_function_unknown:Nn \cs_new_protected:cpx {#2}
          }
        \group_begin:
          \clist_map_inline:nn {#3}
            {
              \@@_variable_parsing:Nn \cs_set_nopar:cpx {##1}
              \@@_variable_unknown:Nn \cs_set_protected:cpx {##1}
            }
          \fp_set:Nn \l_@@_internal_fp {#4}
          \int_zero:N \l_@@_function_arg_int
          \clist_map_inline:nn {#3}
            {
              \int_incr:N \l_@@_function_arg_int
              \@@_set_function_aux:ccoo
                { @@_variable_##1_o:w }
                { @@_variable_ \int_use:N \l_@@_function_arg_int _o:w }
                { \int_use:N \l_@@_function_arg_int }
                { \l_@@_internal_fp }
            }
          \cs_gset_protected:Npx \@@_tmp:w ##1 \s_@@_stop
            {
              \exp_not:n { \exp_args:Nf \@@_function_args_count:nnnnn }
                { \exp_not:N \@@_array_count:n {##1} }
                { \int_use:N \l_@@_function_arg_int }
                { \tl_to_str:n {#2} }
                {##1}
                { \exp_not:o { \l_@@_internal_fp } }
            }
        \group_end:
        \cs_set_eq:cN { @@_prefix_ \tl_to_str:n {#2} _o:w } \@@_tmp:w
      }
      { \__msg_kernel_error:nnn { fp } { invalid-identifier } {#2} }
  }
\cs_new_protected:Npn \@@_set_function_aux:NNnn #1#2#3#4
  {
    \@@_variable_unknown:Nn \cs_set_protected:cpx {#3}
    \tl_set:Nx \l_@@_internal_fp
      {
        \@@_function_arg_array_f:Nnw
          #1
          { \s_@@_symbolic \@@_symbolic_chk:w #2 { } ; }
          #4
          \s_@@_stop
          \exp_stop_f:
      }
  }
\cs_generate_variant:Nn \@@_set_function_aux:NNnn { ccoo }
\cs_new:Npn \@@_function_args_count:nnnnn #1#2#3#4#5
  {
    \int_compare:nNnTF {#1} = {#2}
      {
        \@@_function_args_insert:wnw 1 ; {#5}
          #4
          { ? \@@_function_args_insert_end:wn } ;
      }
      {
        \__msg_kernel_expandable_error:nnnnn
          { fp } { num-args } { #3() } { #1 } { #2 }
        \exp_after:wN \c_nan_fp
      }
  }
\cs_new:Npn \@@_function_args_insert_end:wn #1; #2
  {
    \exp_after:wN \@@_parse_exp_after_array_f:w
    \use_none:nnnn #2
  }
\cs_new:Npn \@@_function_args_insert:wnw #1; #2 #3#4;
  {
    \use_none:n #3
    \exp_after:wN \@@_function_args_insert:wnw
    \int_use:N \__int_eval:w #1 + \c_one \exp_args:Nf ;
      {
        \exp_args:Nc \@@_function_arg_array_f:Nnw
          { @@_variable_#1_o:w } { #3#4; } #2 \s_@@_stop
      }
  }
\cs_new:Npn \@@_function_arg_array_f:Nnw #1#2#3
  {
    \cs:w @@_function_arg \@@_type_from_scan:N #3 _f:Nnw \cs_end:
      #1 {#2} #3
  }
\cs_new:Npn \@@_function_arg_f:Nnw #1#2
  {
    \@@_exp_after_f:nw { \@@_function_arg_array_f:Nnw #1 {#2} }
  }
\cs_new_eq:NN \@@_function_arg_stop_f:Nnw \use_none:nnn
\cs_new:Npn \@@_function_arg_symbolic_f:Nnw
    #1 #2 \s_@@_symbolic \@@_symbolic_chk:w #3 #4 ;
  {
    \str_if_eq:nnTF {#3} {#1}
      {
        \@@_exp_after_array_f:w #2 \s_@@_stop
      }
      {
        \exp_after:wN \s_@@_symbolic
        \exp_after:wN \@@_symbolic_chk:w
        \exp_after:wN #3
        \exp_after:wN
          {
            \tex_romannumeral:D -`0
            \@@_function_arg_array_f:Nnw #1 {#2} #4 \s_@@_stop
            \exp_after:wN
          }
          \exp_after:wN ;
        \tex_romannumeral:D -`0
      }
    \@@_function_arg_array_f:Nnw #1 {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\__msg_kernel_new:nnn { fp } { num-args }
  { Function~#1~received~#2~arguments,~not~#3. }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
