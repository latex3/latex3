% \iffalse
%
%% File l3fp-types.dtx (C) Copyright 2012,2017 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "l3trial bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver|package>
\RequirePackage{expl3}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3fp-types} package\\ Floating point types^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2017/05/13}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-types} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=fp>
%    \end{macrocode}
%
% \subsection{Support for types}
%
% We redefine some \pkg{l3fp} internals to support types.  Each
% additional type must define
% \begin{itemize}
%   \item |\s__fp_|\meta{type} and |\__fp_|\meta{type}|_chk:w|;
%   \item |\__fp_|\meta{type}|_to_|\meta{out}|:w| for \meta{out} among
%     |decimal|, |int|, |scientific|, |tl|;
%   \item |\__fp_exp_after_|\meta{type}|_o:nw|;
%   \item |\__fp_|\meta{op}|_|\meta{type}|_o:w| for \meta{op} among
%     |acos|, |acsc|, |asec|, |asin|, |cos|, |cot|, |csc|, |exp|, |ln|,
%     |not|, |sec|, |set_sign|, |sin|, |tan|;
%   \item |\__fp_|\meta{type_1}|_|\meta{op}|_|\meta{type_2}|_o:ww| for
%     \meta{op} among |^*/-+&|\verb"|" and for every other type;
%   \item |\__fp_|\meta{type_1}|_bcmp_|\meta{type_2}|:ww| for every
%     other type;
% \end{itemize}
%
% \subsection{Redefining internals of \pkg{l3fp-parse}}
%
% \begin{macro}[aux, EXP]{\@@_parse_apply_binary:NwNwN}
%   Receives \meta{precedence} \meta{operand_1} |@| \meta{operation}
%   \meta{operand_2} |@| \meta{infix command}.  Builds the appropriate
%   call to the \meta{operation} |#4|, given the types of the two
%   \meta{operands}.
%    \begin{macrocode}
\cs_undefine:N \@@_parse_apply_binary:NwNwN
\cs_new:Npn \@@_parse_apply_binary:NwNwN #1 #2#3@ #4 #5#6@ #7
  {
    \exp_after:wN \@@_parse_continue:NwN
    \exp_after:wN #1
    \exp:w \exp_end_continue_f:w
      \cs:w
        @@
        \@@_type_from_scan:N #2
        _ #4
        \@@_type_from_scan:N #5
        _o:ww
      \cs_end:
      #2#3 #5#6
    \exp:w \exp_end_continue_f:w #7 #1
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_parse_unary_type:N}
%   Expects \cs{s_@@} or similar as~|#1|.
%    \begin{macrocode}
\cs_new:Npn \@@_parse_unary_type:N #1
  { \@@_type_from_scan:N #1 _o:w \cs_end: #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, aux]{\@@_parse_prefix_-:Nw, \@@_parse_prefix_!:Nw}
%   The unary~|-| and boolean not are harder than the unary~|+|: we
%   parse the operand using a precedence equal to the maximum of the
%   previous precedence~|##1| and the precedence \cs{c_@@_prec_not_int} of the
%   unary operator, then call the appropriate
%   |\__fp_|\meta{operation}\meta{type}|_o:w| function, where the
%   \meta{type} is extracted by \cs{@@_parse_unary_type:N} and the
%   \meta{operation} is |set_sign| or |not|.
%    \begin{macrocode}
\cs_set_protected:Npn \@@_tmp:w #1#2#3#4
  {
    \cs_undefine:c { @@_parse_prefix_ #1 :Nw }
    \cs_new:cpn { @@_parse_prefix_ #1 :Nw } ##1
      {
        \exp_after:wN \@@_parse_apply_unary:NNNwN
        \exp_after:wN ##1
        \exp_after:wN #4
        \cs:w @@_#3 \exp_after:wN \@@_parse_unary_type:N
        \exp:w
        \if_int_compare:w #2 < ##1
          \@@_parse_operand:Nw ##1
        \else:
          \@@_parse_operand:Nw #2
        \fi:
        \@@_parse_expand:w
      }
  }
\@@_tmp:w - \c_@@_prec_not_int { set_sign } 2
\@@_tmp:w ! \c_@@_prec_not_int { not } ?
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_parse_unary_function:NNN, \@@_parse_unary_aux:w}
%   This implements functions which expect one argument (|sin|, |ln|,
%   \ldots{}).  Call the appropriate
%   |\__fp_|\meta{function}\meta{type}|_o:w| depending on the
%   \meta{type} of the operand.
%    \begin{macrocode}
\cs_undefine:N \@@_parse_unary_function:NNN
\cs_new:Npn \@@_parse_unary_function:NNN #1#2#3
  {
    \exp_after:wN \@@_parse_apply_unary:NNNwN
    \exp_after:wN #3
    \exp_after:wN #2
    \cs:w @@_
      \exp_after:wN \@@_parse_unary_aux:w \token_to_str:N #1
      \exp_after:wN \@@_parse_unary_type:N
    \exp:w
    \@@_parse_operand:Nw \c_@@_prec_func_int \@@_parse_expand:w
  }
\use:x
  {
    \exp_not:n { \cs_new:Npn \@@_parse_unary_aux:w #1 }
    \tl_to_str:n { @@_ } \exp_not:n {#2} \tl_to_str:n { _o:w }
  }
  {#2}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux, EXP]{\@@_bcmp:ww, \@@_compare_back:ww}
%   We copy the \cs{@@_compare_back:ww} function of \pkg{l3fp-logic} to
%   \cs{@@_bcmp:ww} and make it dispatch according to the type of
%   operands being compared.
%    \begin{macrocode}
\cs_new_eq:NN \@@_bcmp:ww \@@_compare_back:ww
\cs_undefine:N \@@_compare_back:ww
\cs_new:Npn \@@_compare_back:ww #1#2; #3#4;
  {
    \cs:w
      @@
      \@@_type_from_scan:N #1
      _bcmp
      \@@_type_from_scan:N #3
      :ww
    \cs_end:
    #1#2; #3#4;
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Conversion functions}
%
% \begin{macro}[EXP, int]
%   {\@@_to_decimal:w, \@@_to_int:w, \@@_to_scientific:w, \@@_to_tl:w}
%   In \pkg{l3fp-convert}, the \texttt{_dispatch} functions do not
%   actually dispatch depending on the type of their argument: they only
%   accept floating points.  Thus, we start by saving the definitions in
%   functions meant only for floating points.
%    \begin{macrocode}
\cs_new_eq:NN \@@_to_decimal:w    \@@_to_decimal_dispatch:w
\cs_new_eq:NN \@@_to_int:w        \@@_to_int_dispatch:w
\cs_new_eq:NN \@@_to_scientific:w \@@_to_scientific_dispatch:w
\cs_new_eq:NN \@@_to_tl:w         \@@_to_tl_dispatch:w
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, int]
%   {
%     \@@_to_decimal_dispatch:w,
%     \@@_to_int_dispatch:w,
%     \@@_to_scientific_dispatch:w,
%     \@@_to_tl_dispatch:w,
%   }
%   Redefine those four functions to actually dispatch on type.
%    \begin{macrocode}
\cs_undefine:N \@@_to_decimal_dispatch:w
\cs_new:Npn \@@_to_decimal_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_decimal:w \cs_end: #1 }
\cs_undefine:N \@@_to_int_dispatch:w
\cs_new:Npn \@@_to_int_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_int:w \cs_end: #1 }
\cs_undefine:N \@@_to_scientific_dispatch:w
\cs_new:Npn \@@_to_scientific_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_scientific:w \cs_end: #1 }
\cs_undefine:N \@@_to_tl_dispatch:w
\cs_new:Npn \@@_to_tl_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_tl:w \cs_end: #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Dispatch according to the type}
%
% \begin{macro}[EXP, aux]
%   {\@@_types_cs_to_op:N, \@@_types_cs_to_op_auxi:wwwn}
%   From |\__fp_|\meta{op}|_o:w| produce \meta{op}, otherwise~|?|.
%    \begin{macrocode}
\cs_new:Npx \@@_types_cs_to_op:N #1
  {
    \exp_not:N \exp_after:wN \exp_not:N \@@_types_cs_to_op_auxi:wwwn
      \exp_not:N \token_to_str:N #1 \exp_not:N \q_mark
      \exp_not:N \use_i_delimit_by_q_stop:nw
      \tl_to_str:n { _ _ fp _ _ o : w } \exp_not:N \q_mark
        { \exp_not:N \use_i_delimit_by_q_stop:nw ? }
      \exp_not:N \q_stop
  }
\use:x
  {
    \cs_new:Npn \exp_not:N \@@_types_cs_to_op_auxi:wwwn
      ##1 \tl_to_str:n { _ _ fp _ } ##2
      \tl_to_str:n { _ o : w } ##3 \exp_not:N \q_mark ##4 { ##4 {##2} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, int]{\@@_types_unary:NNw}
% \begin{macro}[EXP, aux]
%   {\@@_types_unary_auxi:nNw, \@@_types_unary_auxii:NnNw}
%   \begin{syntax}
%     \cs{@@_types_unary:NNw} |\__fp_|\meta{function}|_o:w|
%     ~~\meta{token} \meta{operand} |@|
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Npn \@@_types_unary:NNw #1
  {
    \exp_args:Nf \@@_types_unary_auxi:nNw
      { \@@_types_cs_to_op:N #1 }
  }
\cs_new:Npn \@@_types_unary_auxi:nNw #1#2#3
  {
    \exp_after:wN \@@_types_unary_auxii:NnNw
    \cs:w @@_#1 \@@_type_from_scan:N #3 _o:w \cs_end:
    {#1}
    #2#3
  }
\cs_new:Npn \@@_types_unary_auxii:NnNw #1#2#3
  {
    \token_if_eq_meaning:NNTF \scan_stop: #1
      { \@@_invalid_operation_o:nw {#2} }
      { #1 #3 }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP, int]{\@@_types_binary:Nww}
% \begin{macro}[EXP, aux]
%   {\@@_types_binary_auxi:Nww, \@@_types_binary_auxii:NNww}
%   \begin{syntax}
%     \cs{@@_types_binary:Nww} |\__fp_|\meta{binop}|_o:ww|
%     ~~\meta{operand_1} \meta{operand_2} |@|
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Npn \@@_types_binary:Nww #1
  {
    \exp_last_unbraced:Nf \@@_types_binary_auxi:Nww
      { \@@_types_cs_to_op:N #1 }
  }
\cs_new:Npn \@@_types_binary_auxi:Nww #1#2#3; #4#5; @
  {
    \exp_after:wN \@@_types_binary_auxii:NNww
    \cs:w
      @@
      \@@_type_from_scan:N #2
      _#1
      \@@_type_from_scan:N #4
      _o:ww
    \cs_end:
    #1 #2#3; #4#5;
  }
\cs_new:Npn \@@_types_binary_auxii:NNww #1#2
  {
    \token_if_eq_meaning:NNTF \scan_stop: #1
      { \@@_invalid_operation_o:Nww #2 }
      {#1}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Comparisons}
%
% \begin{macro}[int, EXP]{\@@_parse_apply_compare:NwNNNNwN}
% \begin{macro}[int, EXP]{\@@_infix_compare_o:w}
% \begin{macro}[int, EXP]{\@@_compare_o:NNNNww}
%    \begin{macrocode}
 % \cs_undefine:N \@@_parse_apply_compare:NwNNNNwN
 % \cs_new:Npn \@@_parse_apply_compare:NwNNNNwN #1 #2@ #3#4#5#6 #7@ #8
 %   {
 %     \exp_after:wN \@@_parse_until_test:NwN
 %     \exp_after:wN #1
 %     \exp:w \exp_end_continue_f:w
 %       \@@_infix_compare_o:w
 %         \s_@@_tokens \@@_tokens_exp_not:n { #3#4#5#6 } ;
 %         #2
 %         #7
 %         \s_@@_stop
 %     \exp:w \exp_end_continue_f:w #8 #1
 %   }
 % \cs_new_protected:Npn \@@_infix_compare_o:w
 %     \s_@@_tokens \@@_tokens_exp_not:n #1; #2#3; #4#5; \s_@@_stop
 %   {
 %     \cs:w
 %       @@ \@@_type_from_scan:N #2
 %       _compare \@@_type_from_scan:N #4 _o:NNNNww
 %     \cs_end:
 %     #1 #2#3; #4#5;
 %   }
 % \cs_new:Npn \@@_compare_o:NNNNww #1#2#3#4 #5; #6;
 %   {
 %     \exp_after:wN \exp_after:wN
 %     \exp_after:wN \exp_after:wN
 %     \exp_after:wN \exp_after:wN
 %     \if_case:w \@@_compare_back:ww #6; #5; \exp_stop_f:
 %            #2
 %     \or:   #3
 %     \or:   #4
 %     \else: #1
 %     \fi:
 %   }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Storing simple tokens}
%
% \begin{itemize}
%   \item |\s__fp_|\meta{type} and |\__fp_|\meta{type}|_chk:w|;
%   \item |\__fp_|\meta{type}|_to_|\meta{out}|:w| for \meta{out} among
%     |decimal|, |int|, |scientific|, |tl|;
%   \item |\__fp_exp_after_|\meta{type}|_f:nw|;
%   \item |\__fp_|\meta{op}|_|\meta{type}|_o:w| for \meta{op} among
%     |set_sign|, |not|, |exp|, |ln|, |acos|, |acsc|, |asec|, |asin|,
%     |cos|, |cot|, |csc|, |sec|, |sin|, |tan|;
%   \item |\__fp_|\meta{type_1}|_|\meta{op}|_|\meta{type_2}|_o:ww| for
%     \meta{op} among |^*/-+&|\verb"|" and for every other type;
%   \item |\__fp_|\meta{type_1}|_bcmp_|\meta{type_2}|:ww| for every
%     other type;
% \end{itemize}
%
% It is sometimes necessary to store a list of \texttt{N}-type tokens in
% a floating point array.  The structure we use is
% \begin{quote}
%   \cs{s_@@_tokens} \cs{@@_tokens:n} \Arg{\texttt{N}-type tokens} |;|
% \end{quote}
% This is not really a floating point datatype, since it cannot appear
% directly within a floating point expression: there is thus no need to
% define how the various floating point operators and functions act.  We
% only need to be able to jump over the data with
% \cs{@@_exp_after_tokens_o:nw}.
%
% \begin{variable}[int]{\s_@@_tokens}
%   Marks the start of some \texttt{N}-type tokens stored as a
%   floating-point object.
%    \begin{macrocode}
\__scan_new:N \s_@@_tokens
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int, EXP]{\@@_tokens:n}
%   To be used in combination with \cs{s_@@_tokens}: this function
%   prevents the expansion of its argument.
%    \begin{macrocode}
\cs_new:Npn \@@_tokens:n #1 { \exp_not:n { \@@_tokens:n {#1} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, int]{\@@_exp_after_tokens_o:nw}
% \begin{macro}[EXP, aux]{\@@_exp_after_tokens_aux:N}
%   The loop through tokens ends when the auxiliary takes in the
%   multi-token trailing argument.  The \cs{exp_after:wN} chain hits
%   \cs{exp:w} coming from the argument, and
%   \cs{use_none:nn} removes the looping macro.
%    \begin{macrocode}
\cs_new:Npn \@@_exp_after_tokens_o:nw
    #1 \s_@@_tokens \@@_tokens:n #2 ;
  {
    \exp_after:wN \@@_exp_after_tokens_auxii:w
    \exp:w
    \@@_exp_after_tokens_aux:N #2
      { \s_@@_tokens \exp:w \use_none:nn }
    \exp_after:wN \exp_end: #1
  }
\cs_new:Npn \@@_exp_after_tokens_aux:N #1
  {
    \exp_after:wN \exp_end:
    \exp_after:wN #1
    \exp:w
    \@@_exp_after_tokens_aux:N
  }
\cs_new:Npn \@@_exp_after_tokens_auxii:w #1 \s_@@_tokens
  { \s_@@_tokens \@@_tokens:n {#1} ; }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Road-map}
%
% The following functions are not implemented: comparisons, |min|,
% |max|, |?:|, |round|, |atan|, |acot|.
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
