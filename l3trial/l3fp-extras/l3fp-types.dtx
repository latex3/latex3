% \iffalse
%
%% File l3fp-types.dtx (C) Copyright 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id: l3fp-types.dtx 4176 2012-08-31 15:01:04Z bruno $
  {L3 Experimental floating point types}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3fp-types} package\\ Floating point types^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3fp-types} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=fp>
%    \end{macrocode}
%
% \subsection{Support for types}
%
% This subsection redefines some \pkg{l3fp} internals to support types.
% Each additional type must define
% \begin{itemize}
%   \item |\s__fp_|\meta{type} and |\__fp_|\meta{type}|_chk:w|;
%   \item |\__fp_|\meta{type_1}|_|\meta{op}|_|\meta{type_2}|_o:ww| for
%     \meta{op} in |+-*/^&|\verb"|" and for every other type;
%   \item |\__fp_|\meta{type_1}|_compare_|\meta{type_2}|_o:NNNNww| for
%     every other type;
%   \item |\__fp_|\meta{op}|_|\meta{type}|_o:w| for \meta{op} amongst
%     abs, cos, cot, csc, exp, ln, sec, sin, tan, !, -;
%   \item |\__fp_|\meta{type}|_to_|\meta{type_2}|:w| for \meta{type_2}
%     amongst decimal, int, scientific, tl;
%   \item |\__fp_exp_after_|\meta{type}|_f:nw|;
%   \item |\__fp_parse_exp_after_|\meta{type}|_f:nw|.
% \end{itemize}
%
% \subsection{Storing simple tokens}
%
% It is sometimes necessary to store \texttt{N}-type tokens in a
% floating point array.  This is not really a floating point datatype,
% since it cannot appear directly within a floating point expression:
% there is thus no need to define how the various floating point
% operators and functions act.  We only need to be able to jump over
% the data with \cs{@@_exp_after_tokens_f:nw} and
% \cs{@@_parse_exp_after_tokens_f:nw}.
%
% \begin{variable}[int]{\s_@@_tokens}
%   Syntax: \cs{s_@@_tokens} \cs{@@_tokens_exp_not:n}
%   \Arg{\texttt{N}-type tokens} |;|
%    \begin{macrocode}
\__scan_new:N \s_@@_tokens
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int, EXP]{\@@_tokens_exp_not:n}
%   To be used in combination with \cs{s_@@_tokens}: this function
%   prevents the expansion of the \meta{tokens}.
%    \begin{macrocode}
\cs_new:Npn \@@_tokens_exp_not:n #1
  { \exp_not:n { \@@_tokens_exp_not:n {#1} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, int]
%   {\@@_exp_after_tokens_f:nw, \@@_parse_exp_after_tokens_f:nw}
% \begin{macro}[EXP, int]{\@@_exp_after_tokens_aux:N}
%   The loop through tokens ends when the auxiliary takes in the
%   multi-token trailing argument.  The \cs{exp_after:wN} chain hits
%   \cs{tex_romannumeral:D} coming from the argument, and
%   \cs{use_none:nn} removes the looping macro.
%    \begin{macrocode}
\cs_new:Npn \@@_exp_after_tokens_f:nw
    #1 \s_@@_tokens \@@_tokens_exp_not:n #2 ;
  {
    \exp_after:wN \@@_exp_after_tokens_auxii:w
    \tex_romannumeral:D
    \@@_exp_after_tokens_aux:N #2
      { \s_@@_tokens \tex_romannumeral:D \use_none:nn }
    -`0 #1
  }
\cs_new:Npn \@@_exp_after_tokens_aux:N #1
  {
    \exp_after:wN \c_zero
    \exp_after:wN #1
    \tex_romannumeral:D
    \@@_exp_after_tokens_aux:N
  }
\cs_new:Npn \@@_exp_after_tokens_auxii:w #1 \s_@@_tokens
  { \s_@@_tokens \@@_tokens_exp_not:n {#1} ; }
\cs_new_eq:NN \@@_parse_exp_after_tokens_f:nw \@@_exp_after_tokens_f:nw
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Conversion functions}
%
% \begin{macro}[EXP, int]
%   {\@@_to_decimal:w, \@@_to_int:w, \@@_to_scientific:w, \@@_to_tl:w}
%   In \pkg{l3fp-convert}, the \texttt{_dispatch} functions do not
%   actually dispatch depending on the type of their argument: they only
%   accept floating points.  Thus, we start by saving the definitions in
%   functions meant only for floating points.
%    \begin{macrocode}
\cs_new_eq:NN \@@_to_decimal:w    \@@_to_decimal_dispatch:w
\cs_new_eq:NN \@@_to_int:w        \@@_to_int_dispatch:w
\cs_new_eq:NN \@@_to_scientific:w \@@_to_scientific_dispatch:w
\cs_new_eq:NN \@@_to_tl:w         \@@_to_tl_dispatch:w
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP, int]
%   {
%     \@@_to_decimal_dispatch:w,
%     \@@_to_int_dispatch:w,
%     \@@_to_scientific_dispatch:w,
%     \@@_to_tl_dispatch:w,
%   }
%   Redefine those four functions to actually dispatch on type.
%    \begin{macrocode}
\cs_gset:Npn \@@_to_decimal_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_decimal:w \cs_end: #1 }
\cs_gset:Npn \@@_to_int_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_int:w \cs_end: #1 }
\cs_gset:Npn \@@_to_scientific_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_scientific:w \cs_end: #1 }
\cs_gset:Npn \@@_to_tl_dispatch:w #1
  { \cs:w @@ \@@_type_from_scan:N #1 _to_tl:w \cs_end: #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Unary prefix functions}
%
% \begin{macro}[EXP, aux]
%   {
%     \@@_prefix_abs_o:w ,
%     \@@_prefix_cos_o:w ,
%     \@@_prefix_cot_o:w ,
%     \@@_prefix_csc_o:w ,
%     \@@_prefix_exp_o:w ,
%     \@@_prefix_ln_o:w  ,
%     \@@_prefix_sec_o:w ,
%     \@@_prefix_sin_o:w ,
%     \@@_prefix_tan_o:w ,
%     \@@_prefix_!_o:w   ,
%     \@@_prefix_-_o:w   ,
%   }
%   These |prefix| functions expect to be followed by a single floating
%   point number and \cs{s_@@_stop}.  They dispatch to the appropriate
%   function for the computation.
%    \begin{macrocode}
\tl_map_inline:nn
  { {abs} {cos} {cot} {csc} {exp} {ln} {sec} {sin} {tan} {!} {-} }
  {
    \cs_new_protected:cpn { @@_prefix_#1_o:w } ##1 ##2; \s_@@_stop
      {
        \cs:w @@_#1 \@@_type_from_scan:N ##1 _o:w \cs_end:
        ##1 ##2;
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Binary infix operators}
%
% \begin{@makeother}{^} %^^A Hack!
% \begin{@makeother}{|} %^^A Hack!
% \begin{@makeother}{&} %^^A Hack!
% \begin{macro}[int, EXP]
%   {
%     \@@_infix_+_o:w,
%     \@@_infix_-_o:w,
%     \@@_infix_*_o:w,
%     \@@_infix_/_o:w,
%     \@@_infix_^_o:w,
%     \@@_infix_|_o:w,
%     \@@_infix_&_o:w,
%   }
%   These |infix| functions expect to be followed by a pair of floating
%   points objects, then \cs{s_@@_stop}.  They take care of dispatching
%   to the appropriate function for the computation.
%    \begin{macrocode}
\tl_map_inline:nn { + - * / ^ | & }
  {
    \cs_new_protected:cpn { @@_infix_#1_o:w }
        ##1 ##2; ##3 ##4; \s_@@_stop
      {
        \cs:w
          @@
          \@@_type_from_scan:N ##1
          _#1
          \@@_type_from_scan:N ##3
          _o:ww
        \cs_end:
        ##1 ##2; ##3 ##4;
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{@makeother}
% \end{@makeother}
% \end{@makeother}
%
% \subsection{Comparisons}
%
% \begin{macro}[int, EXP]{\@@_parse_apply_compare:NwNNNNwN}
% \begin{macro}[int, EXP]{\@@_infix_compare_o:w}
% \begin{macro}[int, EXP]{\@@_compare_o:NNNNww}
%    \begin{macrocode}
\cs_gset:Npn \@@_parse_apply_compare:NwNNNNwN #1 #2@ #3#4#5#6 #7@ #8
  {
    \exp_after:wN \@@_parse_until_test:NwN
    \exp_after:wN #1
    \tex_romannumeral:D -`0
      \@@_infix_compare_o:w
        \s_@@_tokens \@@_tokens_exp_not:n { #3#4#5#6 } ;
        #2
        #7
        \s_@@_stop
    \tex_romannumeral:D -`0 #8 #1
  }
\cs_new_protected:Npn \@@_infix_compare_o:w
    \s_@@_tokens \@@_tokens_exp_not:n #1; #2#3; #4#5; \s_@@_stop
  {
    \cs:w
      @@ \@@_type_from_scan:N #2
      _compare \@@_type_from_scan:N #4 _o:NNNNww
    \cs_end:
    #1 #2#3; #4#5;
  }
\cs_new:Npn \@@_compare_o:NNNNww #1#2#3#4 #5; #6;
  {
    \exp_after:wN \exp_after:wN
    \exp_after:wN \exp_after:wN
    \exp_after:wN \exp_after:wN
    \if_case:w \@@_compare_back:ww #6; #5; \exp_stop_f:
           #2
    \or:   #3
    \or:   #4
    \else: #1
    \fi:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Road-map}
%
% The following functions are not implemented: min, max, |?:|,
% |round|.
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
