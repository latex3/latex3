% \iffalse
%
%% File l3file-extras.dtx (C) Copyright 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental add ons to l3file}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amsmath}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3file-extras} package\\ Add ons to \pkg{l3file}^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \section{\pkg{l3file-extras} documentation}
%
% \begin{function}[TF]{\file_add_path:nN}
%   \begin{syntax}
%     \cs{file_add_path:nNTF} \Arg{file name} \meta{tl var} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Searches for \meta{file name} in the path as detailed for
%   \cs{file_if_exist:nTF}, and if found sets the \meta{tl var} the
%   fully-qualified name of the file, \emph{i.e}.~the path and file name.
%   If the file is not found then the \meta{tl var} will be unchanged, and
%   the \texttt{false code} will be inserted.
%   \begin{texnote}
%     The \meta{file name} may contain both literal items and expandable
%     content, which should on full expansion be the desired file name.
%     Any active characters (as declared in \cs{l_char_active_seq}) will
%     \emph{not} be expanded, allowing the direct use of these in
%     file names.
%   \end{texnote}
% \end{function}
%
% \begin{function}[TF]{\file_input:n}
%   \begin{syntax}
%     \cs{file_input:nTF} \Arg{file name} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Searches for \meta{file name} in the path as detailed for
%   \cs{file_if_exist:nTF}, and if found \emph{first} inserts the \meta{true
%   code} into the input stream and \emph{then} reads the file in the file as
%   additional \LaTeX{} source. All files read are recorded for information and
%   the file name stack is updated by this function. If the file is not found
%   then the \meta{false code} is inserted into the input stream.
%   \begin{texnote}
%     The \meta{file name} may contain both literal items and expandable
%     content, which should on full expansion be the desired file name.
%     Any active characters (as declared in \cs{l_char_active_seq}) will
%     \emph{not} be expanded, allowing the direct use of these in
%     file names.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\file_input_if_exist:n}
%   \begin{syntax}
%     \cs{file_input_if_exist:n} \Arg{file name}
%   \end{syntax}
%   Searches for \meta{file name} in the path as detailed for
%   \cs{file_if_exist:nTF}, and if found reads the file as additional
%   \LaTeX{} source. All files read are recorded for information and
%   the file name stack is updated by this function. If the file is not found
%   then no action is taken.
%   \begin{texnote}
%     The \meta{file name} may contain both literal items and expandable
%     content, which should on full expansion be the desired file name.
%     Any active characters (as declared in \cs{l_char_active_seq}) will
%     \emph{not} be expanded, allowing the direct use of these in
%     file names.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\file_split_path_name_ext:nNNN}
%   \begin{syntax}
%     \cs{file_split_path_name_ext:nNNN} \Arg{name} \meta{path} \meta{filename} \meta{ext}
%   \end{syntax}
%   Splits the file \meta{name} into any \meta{path} (up to the last |/|),
%   any \meta{ext} (from the last |.| to the end of the \meta{name}),
%   and the the \meta{filename} (the rest of the \meta{name}). Thus for
%   example
%   \begin{verbatim}
%     \file_split_path_name_ext:nNNN { figures / example.foo.eps }
%   \end{verbatim}
%   will result in \meta{path} \texttt{figures/}, \meta{filename}
%   \texttt{example.foo} and \meta{ext} \texttt{eps}.
%   The three parts of the \meta{name} will be stored in the
%   token list variables given as the \meta{name}, \meta{path} and
%   \meta{filename} arguments.
%   \begin{texnote}
%     The \meta{name} may contain both literal items and expandable
%     content, which should on full expansion be the desired file name.
%     Any active characters (as declared in \cs{l_char_active_seq}) will
%     \emph{not} be expanded, allowing the direct use of these in
%     file names.
%   \end{texnote}
% \end{function}
%
% \begin{function}[TF]{\ior_open:Nn, \ior_open:cn}
%   \begin{syntax}
%     \cs{ior_open:NnTF} \meta{stream} \Arg{file name} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Opens \meta{file name} for reading using \meta{stream} as the
%   control sequence for file access. If the \meta{stream} was already
%   open it is closed before the new operation begins. The
%   \meta{stream} is available for access immediately and will remain
%   allocated to \meta{file name} until a \cs{ior_close:N} instruction
%   is given or the file ends. The \meta{true code} or \meta{false code} is
%   then inserted into the input stream: note that if the file is found it is
%   opened \emph{before} inserting the \meta{true code}.
%   \begin{texnote}
%     The \meta{file name} may contain both literal items and expandable
%     content, which should on full expansion be the desired file name.
%     Any active characters (as declared in \cs{l_char_active_seq}) will
%     \emph{not} be expanded, allowing the direct use of these in
%     file names.
%   \end{texnote}
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3file-extras} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%    \end{macrocode}
%
% \begin{macro}[TF]{\file_add_path:nN}
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \file_add_path:nN #1#2 { T , F , TF }
  {
    \file_add_path:nN {#1} #2
    \quark_if_no_value:NTF #2
      { \prg_return_false: }
      { \prg_return_true: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\file_input_if_exist:n}
%    \begin{macrocode}
\cs_new_protected:Npn \file_input_if_exist:n #1
  {
    \file_add_path:nNT {#1} \l_file_internal_name_tl
      { \file_input_aux:V \l_file_internal_name_tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\file_input:n}
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \file_input:n #1 { T , F , TF }
  {
    \file_add_path:nNTF {#1} \l_file_internal_name_tl
      {
        \file_input_aux:n {#1}
        \prg_return_true:
      }
      { \prg_return_false: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\file_split_path_name_ext:nNNN}
% \begin{macro}[aux]{\file_split_path_name_ext_aux:nNNN}
% \begin{macro}[aux]{\file_split_path:wNNN, \file_split_name_ext:wNN}
%   Splits a file name into any path part, the file name and the extension,
%   which is considered as the part after the last |.|.
%    \begin{macrocode}
\cs_new_protected:Npn \file_split_path_name_ext:nNNN #1
  { \file_name_sanitize:nn {#1} { \file_split_path_name_ext_aux:nNNN } }
\cs_new_protected:Npn \file_split_path_name_ext_aux:nNNN #1#2#3#4
  {
    \tl_clear:N #2
    \tl_clear:N #3
    \file_split_path:wNNN #1 / \q_nil / \q_stop #2#3#4
  }
\cs_new_protected:Npn \file_split_path:wNNN #1 / #2 / #3 \q_stop #4
  {
    \quark_if_nil:nTF {#2}
      { \file_split_name_ext:wNN #1 . \q_nil . \q_stop }
      {
        \tl_put_right:Nn #4 { #1 / }
        \file_split_path:wNNN #2 / #3 \q_stop #4
      }
  }
\cs_new_protected:Npn \file_split_name_ext:wNN #1 . #2 . #3 \q_stop #4#5
  {
    \quark_if_nil:nTF {#2}
      {
        \tl_if_empty:NTF #4
          {
            \tl_set:Nn #4 {#1}
            \tl_clear:N #5
          }
          { \tl_set:Nn #5 {#1} }
      }
      {
        \tl_put_right:Nx #4
          {
            \tl_if_empty:NF #4 { . }
            #1
          }
        \file_split_name_ext:wNN #2 . #3 \q_stop #4#5
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex