% \iffalse
%
%% File: l3font.dtx Copyright (C) 2011,2012 LaTeX3 project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Experimental Font Loading}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\usepackage{amstext}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{^^A
%   The \pkg{l3font} package\\ Basic font support^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% This module covers basic font loading commands.
% Functions are provided to load font faces and extract various
% properties from them.
%
% Some features within are specific to \XeTeX{} and \LuaTeX{}; such functions
% will be explicitly noted.
%
% This module is currently a work in progress as we incorporate \LaTeXe{}'s
% font loading into \pkg{expl3}. The successor to the NFSS
% (tentatively denoted \texttt{xfss}) will provide
% (backwards compatible) user-level functions for font selection.
%
% \section{Naming and scope}
%
% The \texttt{l3font} module largely provides commands for selecting and working
% with typefaces selected at specific sizes.
% (Many fonts have different shapes intended for use at different physical
% sizes.)
% We call a font at some size a \texttt{fontface} which is the function prefix
% used for these commands and also should be the variable suffix for
% denoting variables of this type.
%
% We reserve for future use the module name and variable type \texttt{font} for
% higher-level font selection commands, such as for font families which have
% linked bold, italic, etc., shapes with automatically-chosen optical sizes.
% (I.e., what is currently provided in \LaTeXe{} by the NFSS.)
%
% \section{Creating and assigning fontface variables}
%
% \begin{function}{\fontface_new:Nn,\fontface_new:cn}
%   \begin{syntax}
%     \cs{fontface_new:Nn} <font cs> \Arg{font name}
%   \end{syntax}
%   Defines <font cs> as a command to select the font defined by <font name>
%   at its design size, which is usually specified by the font designer.
%   For fonts without a typical design size, this will usually be 10\,pt.
% \end{function}
%
% \begin{function}{\fontface_set:Nn,\fontface_gset:Nn,
%     \fontface_set:cn,\fontface_gset:cn}
%   \begin{syntax}
%     \cs{fontface_set:Nn} <font cs> \Arg{font name}
%     \cs{fontface_set:Nn} \cs{l_tenrm_fontface} |{cmr10}|
%   \end{syntax}
%   Defines <font cs> as a command to select the font defined by <font name>
%   at its design size, which is usually specified by the font designer.
%   For fonts without a typical design size, this will usually be 10\,pt.
% \end{function}
%
% \begin{function}{\fontface_set_at:Nnn,\fontface_gset_at:Nnn,
%     \fontface_set_at:cnn,\fontface_gset_at:cnn}
%   \begin{syntax}
%     \cs{fontface_set_at:Nnn} <font cs> \Arg{font name} \Arg{font size}
%     \cs{fontface_set_at:Nnn} \cs{l_tenrm_fontface} |{cmr10}| |{10pt}|
%   \end{syntax}
%   Defines <cs> as a command to select the font defined by <font name>
%   at the <font size>.
% \end{function}
%
% \begin{function}{\fontface_set_eq:NN,\fontface_gset_eq:NN}
%   \begin{syntax}
%     \cs{fontface_set_eq:NN} <font cs1> <font cs2>
%   \end{syntax}
%   Copies <font cs2> into <font cs1>.
% \end{function}
%
% \begin{function}{\fontface_set_to_current:N,\fontface_gset_to_current:N}
%   \begin{syntax}
%     \cs{fontface_set_to_current:N} <font cs>
%   \end{syntax}
%   Sets <font cs> to the font that is currently selected.
% \end{function}
%
% \begin{function}{\fontface_use:N,\fontface_use:c}
%   \begin{syntax}
%     \cs{fontface_use:N} <font cs>
%   \end{syntax}
%   Selects the current font with <font cs>.
% \end{function}
%
% \section{Extracting information from fontfaces}
%
% \begin{function}[EXP]{\fontface_info:N}
%   \begin{syntax}
%     \cs{fontface_info:N} <font cs>
%   \end{syntax}
%   This command expands to the name and size information of the <font cs>
%   specified.
%   This will usually be of the form `<font name> \texttt{at} <size>',
%   but if the font is loaded at its design size then the
%   `\texttt{at} <size>' suffix will be omitted.
%   The output of \cs{fontface_info:N} can be used directly
%   in the second argument of \cs{fontface_set:Nn}.
% \end{function}
%
% \begin{function}[EXP]{\fontface_current_info:}
%   \begin{syntax}
%     \cs{fontface_current_info:}
%   \end{syntax}
%   This command expands to the `fontname' of currently active font.
%   See the comments for \cs{fontface_info:N} for further information.
% \end{function}
%
% \begin{function}[pTF]{\fontface_if_null:N}
%   \begin{syntax}
%     \cs{fontface_if_null:NTF} <font cs> \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Conditional to switch whether the control sequence is the
%   \enquote{null font}.
% \end{function}
%
% \begin{variable}{
%     \fontface_current_slant:        ,
%     \fontface_current_spaceskip:    ,
%     \fontface_current_space_stretch:,
%     \fontface_current_space_shrink: ,
%     \fontface_current_xheight:      ,
%     \fontface_current_quad:         ,
%     \fontface_current_xspace:
%   }
%   Dimension parameters pertaining to the currently selected font.
% \end{variable}
%
% \section{Other functions for fontfaces}
%
% \begin{function}{\font_suppress_not_found_error:,
%     \font_enable_not_found_error:}
%   \begin{syntax}
%     \cs{font_suppress_not_found_error:}
%     \cs{font_enable_not_found_error:}
%   \end{syntax}
%   \emph{Not available in pdf\TeX{}.}
%   In \LuaTeX{} or \XeTeX{}, the error when a font is selected but does not
%   exist can be toggled with these two commands. The non-existence of a font
%   can then be tested with the \cs{fontface_if_null_p:N} conditional.
% \end{function}
%
% \section{Symbols}
%
% The functions described here define math symbols, accents, delimiters,
% and radicals in terms of their \meta{class}, one or more
% \meta{sym font name}, and a \meta{glyph slot}.
% The \meta{class} can be one of \cs{mathord}, \cs{mathop}, \cs{mathbin},
% \cs{mathrel}, \cs{mathopen}, \cs{mathclose}, \cs{mathpunct}, or variable
% ord.\footnote{Bruno: what's the corresponding primitive?}
% The \meta{sym font name} can be one of \cs{symoperators},
% \cs{symletters}, \cs{symsymbols} or \cs{symlargesymbols}.\footnote{Bruno:
%   change that to numbers. Am I missing any?}
% The \meta{glyph slot} indicates where in the font the glyph can be found.
%
% \begin{function}{\math_new_accent:NNnn,\math_gset_accent:NNnn}
%   \begin{syntax}
%     \cs{math_new_accent:Nnnn} <cs> \meta{class}
%     ~~\Arg{sym font name} \Arg{glyph slot}
%   \end{syntax}
%   Sets <cs> to be a math accent defined by the other inputs.
% \end{function}
%
% \begin{function}{\math_new_symbol:NNnn,\math_gset_symbol:NNnn}
%   \begin{syntax}
%     \cs{math_new_symbol:Nnnn} <cs> \meta{class}
%     ~~\Arg{sym font name} \Arg{glyph slot}
%   \end{syntax}
%   Sets <cs> to be a math symbol defined by the other inputs.
% \end{function}
%
% \begin{function}{\math_new_delimiter:NNnnnn,\math_gset_delimiter:NNnnnn}
%   \begin{syntax}
%     \cs{math_new_delimiter:NNnnnn} <cs> \Arg{class}
%     ~~\Arg{sym font name1} \Arg{glyph slot1}
%     ~~\Arg{sym font name2} \Arg{glyph slot2}
%   \end{syntax}
%   Sets <cs> to be a math delimiter defined by the other inputs.
% \end{function}
%
% \begin{function}{\math_new_radical:Nnnnn,\math_gset_radical:Nnnnn}
%   \begin{syntax}
%     \cs{math_new_radical:Nnnnn} <cs>
%     ~~\Arg{sym font name1} \Arg{glyph slot1}
%     ~~\Arg{sym font name2} \Arg{glyph slot2}
%   \end{syntax}
%   Sets <cs> to be a math radical defined by the other inputs.
% \end{function}
%
% \begin{function}{\math_gset_mathcode:NNnn}
%   \begin{syntax}
%     \cs{math_gset_mathcode:NNnn} \meta{character} \meta{class}
%     ~~\Arg{sym font name} \Arg{glyph slot}
%   \end{syntax}
%   Sets <character> to be a math symbol defined by the other inputs.
% \end{function}
%
% \begin{function}{\math_gset_delcode:Nnnnn}
%   \begin{syntax}
%     \cs{math_gset_delcode:NNnnn} \meta{character}
%     ~~\Arg{sym font name1} \Arg{glyph slot1}
%     ~~\Arg{sym font name2} \Arg{glyph slot2}
%   \end{syntax}
%   \footnote{Bruno: I am really not sure of the args!}
%   Sets <character> to be a delimiter symbol defined by the other inputs.
% \end{function}
%
% \section{Internal commands}
%
% \begin{function}[EXP]{\math_class_to_int:N}
%   \begin{syntax}
%     \cs{math_class_to_int:N} \meta{class}
%   \end{syntax}
%   Expands to a digit between $0$ and $7$ representing the \meta{class}.
%   See the implementation for a list of all classes.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3font} implementation}
%
%    \begin{macrocode}
%<*package>
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%</package>
%<*initex|package>
%    \end{macrocode}
%
% \subsection{Creating and assigning fontface variables}
%
% \begin{macro}{\fontface_new:Nn,\fontface_new:cn}
%   \begin{arguments}
%   \item csname \item fontname plus font info
%   \end{arguments}
%   Primitive interface.
%    \begin{macrocode}
\cs_new_protected:Npn \fontface_new:Nn #1#2
  {
    \__chk_if_free_cs:N #1
    \fontface_gset:Nn #1 {#2}
  }
\cs_generate_variant:Nn \fontface_new:Nn {c}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontface_set:Nn,\fontface_set:cn}
% \begin{macro}{\fontface_gset:Nn,\fontface_gset:cn}
%   \begin{arguments}
%   \item csname \item fontname
%   \end{arguments}
%   Note that the fontname needs to be escaped appropriately
%   in \texttt{xetex} or \texttt{luatex}.
%    \begin{macrocode}
\cs_new_protected:Npn \fontface_set:Nn #1#2
  { \tex_font:D #1 = #2 \scan_stop: }
\cs_new_protected_nopar:Npn \fontface_gset:Nn
  { \tex_global:D \fontface_set:Nn }
\cs_generate_variant:Nn \fontface_set:Nn  {c}
\cs_generate_variant:Nn \fontface_gset:Nn {c}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fontface_set_at:Nnn,\fontface_set_at:cnn}
% \begin{macro}{\fontface_gset_at:Nnn,\fontface_gset_at:cnn}
%   \begin{arguments}
%   \item csname \item fontname \item size (dimension)
%   \end{arguments}
%   Note that the fontname needs to be escaped appropriately
%   in \texttt{xetex} or \texttt{luatex}.
%    \begin{macrocode}
\cs_new_protected:Npn \fontface_set_at:Nnn #1#2#3
  { \tex_font:D #1 = #2 ~at~ #3 \scan_stop: }
\cs_new_protected_nopar:Npn \fontface_gset_at:Nnn
  { \tex_global:D \fontface_set_at:Nnn }
\cs_generate_variant:Nn \fontface_set_at:Nnn  {c}
\cs_generate_variant:Nn \fontface_gset_at:Nnn {c}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fontface_set_eq:NN,\fontface_gset_eq:NN}
%    \begin{macrocode}
\cs_set_eq:NN \fontface_set_eq:NN \cs_set_eq:NN
\cs_set_protected_nopar:Npn \fontface_gset_eq:NN
  { \tex_global:D \fontface_set_eq:NN }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontface_set_to_current:N,\fontface_gset_to_current:N}
%    \begin{macrocode}
\cs_set_protected:Npn \fontface_set_to_current:N #1
  {
    \exp_after:wN \fontface_set_eq:NN
    \exp_after:wN #1
    \tex_the:D \tex_font:D
  }
\cs_set_protected_nopar:Npn \fontface_gset_to_current:N
  { \tex_global:D \fontface_set_eq:NN }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontface_use:N,\fontface_use:c}
%   These functions are not really useful per se,
%   but they help to make some code clearer.
%   Maybe the \cs{scan_stop:} is not useful.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontface_use:N #1 { #1 \scan_stop: }
\cs_new_protected_nopar:Npn \fontface_use:c #1 { \use:c {#1} \scan_stop: }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Extracting information from fontfaces}
%
% \begin{macro}{\fontface_info:N,\fontface_current_info:}
%    \begin{macrocode}
\cs_set_eq:NN \fontface_info:N \tex_fontname:D
\cs_set_nopar:Npn \fontface_current_info: { \fontface_info:N \tex_font:D }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[pTF]{\fontface_if_null:N}
%    \begin{macrocode}
\prg_new_conditional:Npnn \fontface_if_null:N #1 { p , TF , T , F }
  {
    \if_meaning:w #1 \tex_nullfont:D
      \prg_return_true:
    \else:
      \prg_return_false:
    \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontface_current_slant:        ,
%               \fontface_current_spaceskip:    ,
%               \fontface_current_space_stretch:,
%               \fontface_current_space_shrink: ,
%               \fontface_current_xheight:      ,
%               \fontface_current_quad:         ,
%               \fontface_current_xspace:       }
% Accessing these registers is much more convenient by name than by number.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \fontface_current_slant:
  { \tex_fontdimen:D 1 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_spaceskip:
  { \tex_fontdimen:D 2 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_space_stretch:
  { \tex_fontdimen:D 3 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_space_shrink:
  { \tex_fontdimen:D 4 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_xheight:
  { \tex_fontdimen:D 5 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_quad:
  { \tex_fontdimen:D 6 \tex_font:D }
\cs_new_protected_nopar:Npn \fontface_current_xspace:
  { \tex_fontdimen:D 7 \tex_font:D }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Other fontface functions}
%
% \begin{macro}{\font_suppress_not_found_error:,\font_enable_not_found_error:}
%   The name of the integer parameter to control differs between \XeTeX{}
%   and \LuaTeX{}. In \pdfTeX{}, the functions produce an error message.
%    \begin{macrocode}
\luatex_if_engine:TF
  {
    \cs_new_protected:Npn \font_suppress_not_found_error:
      { \luatexsuppressfontnotfounderror = \c_one }
    \cs_new_protected:Npn \font_enable_not_found_error:
      { \luatexsuppressfontnotfounderror = \c_zero }
  }
  {
    \xetex_if_engine:TF
      {
        \cs_new_protected:Npn \font_suppress_not_found_error:
          { \suppressfontnotfounderror = \c_one }
        \cs_new_protected:Npn \font_enable_not_found_error:
          { \suppressfontnotfounderror = \c_zero }
      }
      {
        \cs_new_protected:Npn \font_suppress_not_found_error:
          {
            \__msg_kernel_warning:nnx {l3font} {cmd-pdftex-unavail}
              { \font_suppress_not_found_error: }
          }
      }
  }
\__msg_kernel_new:nnn {l3font} {cmd-pdftex-unavail}
  { The~command~`\exp_not:n{#1}'~is~not~available~for~the~pdfTeX~engine. }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Symbols}
%
% \begin{variable}{\c_math_max_glyph_int,\c_math_delcode_step_int}
%   \cs{c_math_max_glyph_int} is used to build mathcodes.
%   \cs{c_math_delcode_step_int} is used to stack two mathcodes
%   together to build a delcode. Better names welcome.
%    \begin{macrocode}
\int_const:Nn \c_math_max_glyph_int    { "100  }
\int_const:Nn \c_math_delcode_step_int { "1000 }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[EXP]{\math_class_to_int:N}
%   Converts a \meta{class} of math object to an integer
%   between $0$ and $7$ (inclusive) representing it.
%   ($0$) mathord,  ($1$) mathop,    ($2$) mathbin,   ($3$) mathrel,
%   ($4$) mathopen, ($5$) mathclose, ($6$) mathpunct, ($7$) variable ord.
%    \begin{macrocode}
\cs_new:Npn \math_class_to_int:N #1
  {
    \if_int_odd:w 2#11 #1\else: % is this non-negative number?
      \if_meaning:w #1 \tex_mathord:D   0  \else:
        \if_meaning:w #1 \tex_mathop:D    1  \else:
          \if_meaning:w #1 \tex_mathbin:D   2  \else:
            \if_meaning:w #1 \tex_mathrel:D   3  \else:
              \if_meaning:w #1 \tex_mathopen:D  4  \else:
                \if_meaning:w #1 \tex_mathclose:D 5  \else:
                  \if_meaning:w #1 \tex_mathpunct:D 6  \else:
                      7 % anything else is variable ord
                  \fi:
                \fi:
              \fi:
            \fi:
          \fi:
        \fi:
      \fi:
    \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_new_accent:NNnn,\math_gset_accent:NNnn}
%^^A perhaps we should do everything in base 10 with
%^^A \int_eval:n { 256*A+16*B+C }, rather than converting to hex?
%    \begin{macrocode}
\cs_new_protected:Npn \math_new_accent:NNnn #1
  {
    \__chk_if_free_cs:N #1
    \math_gset_accent:NNnn #1
  }
\cs_new_protected:Npn \math_gset_accent:NNnn #1#2#3#4
  {
    \cs_gset_protected_nopar:Npx #1
      {
        \tex_mathaccent:D "
          \math_class_to_int:N #2
          \int_to_hexadecimal:n { (#3) * \c_math_max_glyph_int + #4 }
        \scan_stop:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_new_symbol:NNnn,\math_gset_symbol:NNnn}
%    \begin{macrocode}
\cs_new_protected:Npn \math_new_symbol:NNnn #1
  {
    \__chk_if_free_cs:N #1
    \math_gset_symbol:NNnn #1
  }
\cs_new_protected:Npn \math_gset_symbol:NNnn #1#2#3#4
  {
    \tex_global:D
    \tex_mathchardef:D #1 "
      \math_class_to_int:N #2
      \int_to_hexadecimal:n { (#3) * \c_math_max_glyph_int + #4 }
    \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_gset_mathcode:NNnn}
%    \begin{macrocode}
\cs_new_protected:Npn \math_gset_mathcode:NNnn #1#2#3#4
  {
    \tex_global:D
    \tex_mathcode:D `#1 = "
      \math_class_to_int:N #2
      \int_to_hexadecimal:n { (#3) * \c_math_max_glyph_int + #4 }
    \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_new_delimiter:NNnnnn,\math_gset_delimiter:NNnnnn}
%    \begin{macrocode}
\cs_new_protected:Npn \math_new_delimiter:NNnn #1
  {
    \__chk_if_free_cs:N #1
    \math_gset_delimiter:NNnn #1
  }
\cs_new_protected:Npn \math_gset_delimiter:NNnnnn #1#2#3#4#5#6
  {
    \cs_gset_protected_nopar:Npx #1
      {
        \tex_delimiter:D "
          \math_class_to_int:N #2
          \int_to_hexadecimal:n
            {
              ( (#3) * \c_math_max_glyph_int + #4 ) * \c_math_delcode_step_int
              + (#5) * \c_math_max_glyph_int + #6
            }
        \scan_stop:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_gset_delcode:Nnnnn}
%    \begin{macrocode}
\cs_new_protected:Npn \math_gset_delcode:Nnnnn #1#2#3#4#5
  {
    \tex_global:D
      \tex_delcode:D `#1 = "
        \int_to_hexadecimal:n
          {
            ( (#2) * \c_math_max_glyph_int + #3 ) * \c_math_delcode_step_int
            + (#4) * \c_math_max_glyph_int + #5
          }
    \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\math_new_radical:Nnnnn,\math_gset_radical:Nnnnn}
%    \begin{macrocode}
\cs_new_protected:Npn \math_new_radical:NNnn #1
  {
    \__chk_if_free_cs:N #1
    \math_gset_radical:NNnn #1
  }
\cs_new_protected:Npn \math_gset_radical:Nnnnn #1#2#3#4#5
  {
    \cs_gset_protected_nopar:Npx #1
      {
        \tex_radical:D "
          \int_to_hexadecimal:n
            {
              ( (#2) * \c_math_max_glyph_int + #3 ) * \c_math_delcode_step_int
              + (#4) * \c_math_max_glyph_int + #5
            }
        \scan_stop:
      }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
%
% \end{implementation}
% \PrintIndex
%
% \endinput
