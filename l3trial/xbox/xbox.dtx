% \iffalse meta-comment
%
%% File: xbox.dtx Copyright(C) 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3,xparse}
\GetIdInfo$Id$
  {L3 Experimental document level boxes}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{xbox} package\\Document level boxes^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{variable}{\height, \depth, \width, \totalheight}
%   The natural dimensions of material being boxed are available within
%   dimension calculations as \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight}.
% \end{variable}
%
% \section{Directly typesetting material in boxes}
%
% \begin{function}{\mbox}
%   \begin{syntax}
%     \cs{mbox}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{mbox} is an abbreviated version of \cs{makebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\makebox}
%   \begin{syntax}
%     \cs{makebox}\oarg{width}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. If the \meta{width} argument is given,
%   the result will be treated as having this width rather than it's natural
%   width. Within this \meta{width}, the \meta{content} will be positioned
%   depending upon the second optional argument
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
% \end{function}
%
% \begin{function}{\raisebox}
%   \begin{syntax}
%     \cs{raisebox}\marg{distance}\oarg{height}\oarg{depth}\marg{content}
%   \end{syntax}
%   Inserts the \meta{content} in a box raised by the \meta{distance} (a
%   dimension expression). The material may optionally be treated as though
%   it has arbitrary \meta{height} and \meta{depth}, rather than the natural
%   values. The dimension expressions may use \cs{height}, \cs{depth},
%   \cs{width} and \cs{totalheight} to refer to the natural dimensions of
%   the typeset \meta{content}.
% \end{function}
%
% \section{Typesetting material in frames}
%
% \begin{variable}{\fboxrule}
%   The width of the rule used when constructing a frame around content.
%   This is a length and should be set using \cs{setlength}.
% \end{variable}
%
% \begin{variable}{\fboxsep}
%   The width of the border between a frame and the content it surrounds.
%   This is a length and should be set using \cs{setlength}.
% \end{variable}
%
% \begin{function}{\fbox}
%   \begin{syntax}
%     \cs{fbox}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. The typeset material is surrounded
%   by a \enquote{border} of width \cs{fboxsep} which is then enclosed by
%   a frame of rules of width \cs{fboxrule}. The final size of the typeset
%   material includes the border and frame.
%   \begin{texnote}
%     Conceptually, \cs{fbox} is an abbreviated version of \cs{framebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\framebox}
%   \begin{syntax}
%     \cs{framebox}\oarg{width}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. If the \meta{width} argument is given,
%   the result will be treated as having this width rather than it's natural
%   width. Within this \meta{width}, the \meta{content} will be positioned
%   depending upon the second optional argument
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
%   The typeset material is surrounded by a \enquote{border} of width
%   \cs{fboxsep} which is then enclosed by a frame of rules of width
%   \cs{fboxrule}. The final size of the typeset material includes the border
%   and frame, although calculations using \cs{height}, \emph{etc.}, use only
%   the natural size of the \meta{content}.
% \end{function}
%
% \section{Saving material in boxes}
%
% Material may be saved in named boxes, which have command-like names,
% for example |\mybox|.
%
% \begin{function}{\newsavebox}
%   \begin{syntax}
%     \cs{newsavebox}\marg{box}
%   \end{syntax}
%   If the \meta{box} is undefined, defines it to be a box for storing
%   typeset material. If the \meta{box} is defined then an error is
%   raised.
% \end{function}
%
% \begin{function}{\sbox}
%   \begin{syntax}
%     \cs{sbox}\Arg{box}\Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode and stores it in the
%   \meta{box}. Line breaks will not occur, and any \cs{par} tokens in the
%   \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{sbox} is an abbreviated version of \cs{savebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\savebox}
%   \begin{syntax}
%     \cs{savebox}\marg{box}\oarg{width}\oarg{position}\marg{content}
%   \end{syntax}
%   Works in a manner analogous to \cs{makebox} but saves the result in
%   a \meta{box} rather than inserting it into the current output.
% \end{function}
%
% \begin{function}{lrbox}
%   \begin{syntax}
%     \cs{begin}\{lrbox\}\Arg{box}
%       \meta{content}
%     \cs{end}\{lrbox\}
%   \end{syntax}
%   This is an environment equivalent to \cs{sbox} except that any spaces at
%   the beginning and end of the environment are ignored. This construct may
%   be used to contain material which cannot conveniently be grabbed as an
%   argument, for example containing verbatim items.
% \end{function}
%
% \begin{function}{\usebox}
%   \begin{syntax}
%     \cs{usebox}\marg{box}
%   \end{syntax}
%   Inserts the content of the \meta{box} such that the left-hand baseline
%   of the content is aligned with the current typesetting baseline.
% \end{function}
%
% \section{Plain \TeX{} commands inherited by \LaTeX{}}
%
% \begin{function}{\llap, \rlap}
%   \begin{syntax}
%     \cs{llap} \Arg{content}
%     \cs{rlap} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box of zero width such that
%   it protrudes to the left (\cs{llap}) or right (\cs{rlap}) of the current
%   insertion point. The \meta{content} will overlap any other material due
%   to the fact it is treated as having zero width.
%   \begin{texnote}
%     Unlike the plain \TeX{} versions, the implementations here leave vertical
%     mode before inserting the boxed material.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\leftline, \centerline, \rightline}
%   \begin{syntax}
%     \cs{leftline} \Arg{content}
%     \cs{centerline} \Arg{content}
%     \cs{rightline} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a box which is the width of the current
%   galley, and aligns the material either to the left, center or right of
%   this box as appropriate.
% \end{function}
%
% \section{Code-level interfaces}
%
% \begin{function}{\xbox_leave_vmode:}
%   \begin{syntax}
%     \cs{xbox_leave_vmode:}
%   \end{syntax}
%   Ensures that \TeX{} is not in vertical (inter-paragraph) mode. In
%   a horizontal mode this command has no effect, in vertical mode it inserts
%   the \tn{everypar} token list and switches to horizontal mode.
% \end{function}
%
% \begin{function}{\xbox_to_wd:nnn}
%   \begin{syntax}
%     \cs{xbox_to_wd:nnn} \Arg{width} \Arg{position} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width}. The \meta{content} is placed within this
%   \meta{width} according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible).
%   \end{itemize}
%   Within the \meta{width} (a dimension expression), the terms
%   \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used to
%   refer to the \enquote{natural} size of the typeset \meta{content}.
% \end{function}
%
% \begin{function}{\xbox_frame_to_wd:nnnnn}
%   \begin{syntax}
%     \cs{xbox_frame_to_wd:nnn} \Arg{width} \Arg{position} \Arg{content} \Arg{thickness} \Arg{border}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width}. The \meta{content} is placed within this
%   \meta{width} according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible).
%   \end{itemize}
%   Within the \meta{width} (a dimension expression), the terms
%   \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used to
%   refer to the \enquote{natural} size of the typeset \meta{content}.
%   The typeset material is surrounded by a \enquote{border} of width
%   \cs{fboxsep} which is then enclosed by a frame of rules of width
%   \cs{fboxrule}. The final size of the typeset material includes the border
%   and frame, although calculations using \cs{height}, \emph{etc.}, use only
%   the natural size of the \meta{content}.
% \end{function}
%
% \begin{function}
%   {
%     \xbox_raise:nn,
%     \xbox_raise_with_ht:nnn,
%     \xbox_raise_with_ht_and_dp:nnnn
%   }
%   \begin{syntax}
%     \cs{xbox_raise:nn} \Arg{distance} \Arg{content}
%     \cs{xbox_raise_with_ht:nnn} \Arg{distance} \Arg{height} \Arg{content}
%     \cs{xbox_raise_with_ht_and_dp:nnnn} \Arg{distance} \Arg{height} \Arg{depth} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box which is placed such that
%   its baseline is displaced by \meta{distance} vertically from that of the
%   surroundings. The inserted material is treated as having \meta{height} and
%   \meta{depth}. The \meta{distance}, \meta{height} and \meta{depth} are
%   dimension expressions in which \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight} may be used  to refer to the \enquote{natural} size of
%   the typeset \meta{content}.
% \end{function}
%
% \begin{function}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   \begin{syntax}
%     \cs{xbox_position_left:n} \Arg{content}
%   \end{syntax}
%   Aligns the \meta{content} within the containing box such that it is
%   placed horizontally to the left, center or right, respectively.
% \end{function}
%
% \subsection{Possible additions to \pkg{l3box}}
%
% \begin{function}{\hbox_frame:nnn}
%   \begin{syntax}
%     \cs{hbox_frame:nnn} \Arg{content} \Arg{thickness} \Arg{border}
%   \end{syntax}
%   Inserts the \meta{content} in a horizontal box which will bear a frame of
%   \meta{thickness}. A \meta{border} is left between the \meta{content} and
%   the frame. The frame will overprint any part of the \meta{content} which
%   lies outside of the bounding box at natural size (\emph{i.e.}~the frame is
%   printed \enquote{after} the \meta{content}). The apparent size of the
%   inserted box includes the frame and the border, \emph{i.e.}~the width
%   of the inserted material is $ \mathrm{width} ( \meta{content} ) +
%   2 ( \meta{thickness} + \meta{border} )$. See also \cs{hbox_surround:nn}.
% \end{function}
%
% \begin{function}{\hbox_surround:nn}
%   \begin{syntax}
%     \cs{hbox_surround:nn} \Arg{content} \Arg{thickness}
%   \end{syntax}
%   Inserts the \meta{content} in a horizontal box which will be surrounded by
%   a frame of \meta{thickness}. The frame will overprint any part of the
%   \meta{content} which lies outside of the bounding box at natural size
%   (\emph{i.e.}~the frame is  printed \enquote{after} the \meta{content}).
%   The apparent size of the inserted box excludes the frame, \emph{i.e.}~the
%   width  of the inserted material is simply $ \mathrm{width}
%   ( \meta{content} )$. See also \cs{hbox_frame:nnn}.
% \end{function}
%
% \begin{function}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   \begin{syntax}
%     \cs{hbox_line_left:n} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} to its natural width inside a horizontal box
%   which has the full width of the current line (galley width). The material
%   is aligned within the box to the left, center or right as appropriate.
% \end{function}
%
% \subsection{Possible additions somewhere}
%
% It's not entirely clear where these belong, but they seem general enough
% to have some form of documented existence.
% 
% \begin{function}{\kern_horizontal:n}
%   \begin{syntax}
%     \cs{kern_horizontal:n} \Arg{dimexpr}
%   \end{syntax}
%   Inserts a horizontal \meta{kern} into the current list.
% \end{function}
%
% \begin{function}{\kern_vertical:n}
%   \begin{syntax}
%     \cs{kern_vertical:n} \Arg{dimexpr}
%   \end{syntax}
%   Inserts a vertical \meta{kern} into the current list.
% \end{function}
%
% \begin{function}{\rule:nnn}
%   \begin{syntax}
%     \cs{rule:nnn} \Arg{height} \Arg{depth} \Arg{width}
%   \end{syntax}
%   Inserts a rule of \meta{height}, \meta{depth} and \meta{width}
%   (all dimension expressions) in horizontal mode. The vertical dimensions
%   are relative to the current baseline, meaning that it is possible to insert
%   a vertically-displaced rule.
% \end{function}
%
% \begin{function}{\rule_horizontal:nn}
%   \begin{syntax}
%     \cs{rule_horizontal:nn} \Arg{height} \Arg{depth}
%   \end{syntax}
%   Inserts a horizontal rule of \meta{height} and \meta{depth} in vertical
%   mode. The rule will expand to the available width of the containing
%   vertical box.
% \end{function}
%
% \begin{function}{\rule_vertical:n}
%   \begin{syntax}
%     \cs{rule_vertical:n} \Arg{width}
%   \end{syntax}
%   Inserts a vertical rule of \meta{width} in horizontal mode. The rule will
%   expand to the available height and depth
%    of the containing
%   vertical box.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbox} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=xbox>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% \subsection{Leaving vertical mode}
%
% \begin{macro}{\xbox_leave_vmode:}
%   At present, there is no \pkg{expl3} command to leave vertical mode, and
%   indeed the best way to handle this is not agreed. As such, a
%   \enquote{local} function is set up to do this.
%   
%   The approach here is different to that used by \LaTeXe{} or plain \TeX{},
%   which unbox a void box to force horizontal mode. That inserts the
%   \tn{everypar} tokens \emph{before} the re-inserted unboxing tokens. The
%   approach here uses the \tn{indent} primitive, which will switch to
%   horizontal mode and insert \tn{everypar} tokens and nothing else. The
%   main difference is that this approach requires that the function is not
%   expanded for example at the start of \tn{halign} cells. \eTeX{}'s protected
%   functionality allows that: not the case for the \LaTeXe{} kernel.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \xbox_leave_vmode:
  {
    \if_mode_vertical:
      \exp_after:wN \tex_indent:D
    \fi: 
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting up to measure natural width}
%
% \begin{variable}[int]{\l_@@_tmp_box}
%   Internal box used to typeset material for measuring up.
%    \begin{macrocode}
\box_new:N \l_@@_tmp_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\@@_via_tmp_box:nn}
%   Boxes up |#1| to its natural width in a color-safe \cs{l_@@_tmp_box}.
%   The document-level names for dimensions (\cs{height}, \emph{etc}.) are
%   then set up, before carrying out whatever \enquote{payload} operation is
%   supplied as |#2|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_via_tmp_box:nn #1#2
  {
    \group_begin:
       \hbox_set:Nn \l_@@_tmp_box
         {
           \color_group_begin:
             #1
           \color_group_end:
         }
       \@@_document_names:
       #2
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux]{\@@_document_names:}
% \begin{variable}{\height, \depth, \width, \totalheight}
% \begin{variable}
%   {\l_@@_height_dim, \l_@@_depth_dim, \l_@@_width_dim, \l_@@_totalheight_dim}
%   The same idea as \cs{__coffin_design_names:N} in \pkg{xcoffins}: create
%   document-level names for dimensions. The two sets of dimensions could be
%   merged at a register level, but that needs both modules to be loaded
%   so perhaps has to wait.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_document_names:
  {
    \dim_set:Nn \l_@@_height_dim { \box_ht:N \l_@@_tmp_box }
    \dim_set:Nn \l_@@_depth_dim  { \box_dp:N \l_@@_tmp_box }
    \dim_set:Nn \l_@@_width_dim  { \box_wd:N \l_@@_tmp_box }
    \dim_set:Nn \l_@@_totalheight_dim
      { \l_@@_height_dim + \l_@@_depth_dim }
    \cs_set_eq:NN \height \l_@@_height_dim
    \cs_set_eq:NN \depth \l_@@_depth_dim
    \cs_set_eq:NN \width \l_@@_width_dim
    \cs_set_eq:NN \totalheight \l_@@_totalheight_dim
  }
\dim_new:N \l_@@_height_dim
\dim_new:N \l_@@_depth_dim
\dim_new:N \l_@@_width_dim
\dim_new:N \l_@@_totalheight_dim
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{macro}
%
% \subsection{Parsing position arguments}
%
% The document-level commands use single letters to specify the position of
% material inside a box of non-natural width. These conversions are tied to
% the document syntax and as such are linked to this implementation.
%
% \begin{macro}[int]{\@@_hposition:nn}
% \begin{macro}[aux]{\@@_hposition:Nn}
% \begin{macro}[aux]{\@@_hposition:n}
%   Converts |#1| into a horizontal position within a box. This is set up as
%   a mapping so that it can be used when both horizontal and vertical
%   positioning is needed.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_hposition:nn #1#2
  {
    \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n
    \tl_map_function:nN {#1} \@@_hposition:Nn
    \@@_hposition:n {#2}
  }
\cs_new_protected:Npn \@@_hposition:Nn #1
  {
    \str_case:nnn {#1}
      {
        { l } { \cs_set_eq:NN \@@_hposition:n \xbox_position_left:n }
        { c } { \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n }
        { r } { \cs_set_eq:NN \@@_hposition:n \xbox_position_right:n }
        { s } { \cs_set_eq:NN \@@_hposition:n \use:n }
      }
      { }
  }
\cs_new_protected:Npn \@@_hposition:n #1 {#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   Typeset material with positioning within a line. These should probably
%   be used by \cs{hbox_overlap_ldots:n} and \cs{hbox_line_\ldots:n}, but
%   would they fit into the \pkg{l3box} module and if some with what names?
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_position_left:n    #1 { #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_hcenter:n #1 { \tex_hss:D #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_right:n   #1 { \tex_hss:D #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Functions for making boxes}
%
% These functions all involve boxing up material, then allowing adjustment
% of size based on \cs{height}, \cs{width}, \emph{etc.}
%
% \begin{macro}{\xbox_to_wd:nnn}
%   Typeset the material to measure it up, then re-box to the requested
%   width and position.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_to_wd:nnn #1#2#3
  {
    \@@_via_tmp_box:nn {#3}
      {
        \hbox_to_wd:nn {#1}
          { \@@_hposition:nn {#2} { \hbox_unpack:N \l_@@_tmp_box } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xbox_frame_to_wd:nnnnn}
%   Wrappers to place a frame around material adjusted to the requested box
%   dimensions.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_frame_to_wd:nnnnn #1#2#3#4#5
  {
    \hbox_frame:nnn
      { \xbox_to_wd:nnn { #1 - ( #4 + #5 ) * 2 } {#2} {#3} }
      {#4} {#5}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xbox_raise:nn}
% \begin{macro}{\xbox_raise_with_ht:nnn}
% \begin{macro}{\xbox_raise_with_ht_and_dp:nnnn}
%   Raising a box.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_raise:nn #1#2
  {
    \xbox_raise_with_ht_and_dp:nnnn {#1} { \box_ht:N \l_@@_tmp_box }
      { \box_dp:N \l_@@_tmp_box } {#2}
  }
\cs_new_protected:Npn \xbox_raise_with_ht:nnn #1#2#3
  {
    \xbox_raise_with_ht_and_dp:nnnn {#1} {#2} { \box_dp:N \l_@@_tmp_box } {#3}
  }
\cs_new_protected:Npn \xbox_raise_with_ht_and_dp:nnnn #1#2#3#4
  {
    \@@_via_tmp_box:nn {#4}
      {
        \hbox_set:Nn \l_@@_tmp_box
          { \box_move_up:nn {#1} { \box_use:N \l_@@_tmp_box } }
        \box_set_ht:Nn \l_@@_tmp_box {#2}
        \box_set_dp:Nn \l_@@_tmp_box {#3}
        \box_use:N \l_@@_tmp_box
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Additions to \pkg{l3box}}
%
% \begin{macro}{\hbox_frame:nnn}
% \begin{macro}[aux]{\__hbox_frame:nnn, \__hbox_frame:ffn}
%   Framing a box requires the depth is known, so there has to be an
%   assignment step first to allow this measurement. The evaluation step is
%   \enquote{front loaded} as the expressions are used a few times, so it
%   is easier to do them only once then have a clearer logic internally.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_frame:nnn #1#2#3
  { \__hbox_frame:ffn { \dim_eval:n {#2} } { \dim_eval:n {#3} } {#1} }
\cs_new_protected:Npn \__hbox_frame:nnn #1#2#3
  {
    \group_begin:
      \hbox_set:Nn \l__box_internal_box {#3}
%    \end{macrocode}
%   The actual insertion is done such that the content goes in \enquote{behind}
%   the rules. That requires a bit of shuffling so that the final box is the
%   correct size, including the necessary border, while keeping the reference
%   point in the right place.
%    \begin{macrocode}
      \hbox:n
        {
          \kern_horizontal:n { #1 + #2 }
          \box_use:N \l__box_internal_box
          \kern_horizontal:n { -\box_wd:N \l__box_internal_box - #2 - #1 }
          \box_move_down:nn { \box_dp:N \l__box_internal_box + #2 + #1 }
            {
              \vbox:n
                {
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \hbox:n
                    {
                      \rule_vertical:n {#1}
                      \kern_horizontal:n
                        { #2 * 2 + \box_wd:N \l__box_internal_box }
                      \vbox:n
                        {
                          \kern_vertical:n
                            {
                                  #2 * 2
                              + \box_dp:N \l__box_internal_box
                              + \box_ht:N \l__box_internal_box
                            }
                        }
                       \rule_vertical:n {#1}
                    }
                   \rule_horizontal:nn {#1} { \c_zero_dim }
                }
            }
        }
    \group_end:
  }
\cs_generate_variant:Nn \__hbox_frame:nnn { ff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hbox_surround:nn}
% \begin{macro}[aux]{\__hbox_surround:nn, \__hbox_surround:fn}
%    Similar to framing a box, but here the rules are around the outside of
%    the bounding box. As such, there is a need to add skips to remove the
%    width of the rules. As with the framing case, the rules here are inserted
%    on top of the content.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_surround:nn #1#2
  { \__hbox_surround:fn { \dim_eval:n {#2} } {#1} }
\cs_new_protected:Npn \__hbox_surround:nn #1#2
  {
    \group_begin:
      \hbox_set:Nn \l__box_internal_box {#2}
      \hbox:n
        {
          \box_use:N \l__box_internal_box
          \kern_horizontal:n { -\box_wd:N \l__box_internal_box - #1 }
          \box_move_down:nn { \box_dp:N \l__box_internal_box }
            {
              \vbox:n
                {
                  \kern_vertical:n { -#1 }
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \hbox:n
                    {
                      \rule_vertical:n {#1}
                      \kern_horizontal:n { \box_wd:N \l__box_internal_box }
                      \vbox:n
                        {
                          \kern_vertical:n
                            {
                                \box_dp:N \l__box_internal_box
                              + \box_ht:N \l__box_internal_box
                            }
                        }
                      \rule_vertical:n {#1}
                    }
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \kern_vertical:n { -#1 }
                }
            }
          \kern_horizontal:n { -#1 }
        }
    \group_end:
  }
\cs_generate_variant:Nn \__hbox_surround:nn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   Necessary to implement the \cs{\ldots line} commands.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_line_left:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_center:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_right:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 } }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Additions which may need a new module}
%
% Somewhere is needed for rules, kerns, leaders: where to put these?
% 
% \begin{macro}{\kern_horizontal:n, \kern_vertical:n}
%   \TeX{} does not treat kerns differently in horizontal and vertical mode.
%   As we want skips and kerns to have similar behaviour, we try to get similar
%   results. 
%    \begin{macrocode}
\cs_new_protected:Npn \kern_horizontal:n #1
  {
    \mode_if_vertical:T
      { \xbox_leave_vmode: }
    \tex_kern:D \__dim_eval:w #1 \__dim_eval_end:
  }
\cs_new_protected:Npn \kern_vertical:n #1
  {
    \mode_if_vertical:F
      { \par }
    \tex_kern:D \__dim_eval:w #1 \__dim_eval_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rule:nnn}
% \begin{macro}{\rule_horizontal:nn}
% \begin{macro}{\rule_vertical:n}
%   Wrappers around the \TeX{} primitives for creating rules, with the usual
%   dimension expression support. The non-expanding rule is set up in
%   horizontal mode as that is usually the best plan.
%    \begin{macrocode}
\cs_new_protected:Npn \rule:nnn #1#2#3
  {
    \hbox:n
      {
        \tex_vrule:D
          height \__dim_eval:w #1 \__dim_eval_end:
          depth  \__dim_eval:w #2 \__dim_eval_end:
          width  \__dim_eval:w #3 \__dim_eval_end:
      }
  }
\cs_new_protected:Npn \rule_horizontal:nn #1#2
  {
    \tex_hrule:D
      height \__dim_eval:w #1 \__dim_eval_end:
      depth  \__dim_eval:w #2 \__dim_eval_end:
  }
\cs_new_protected:Npn \rule_vertical:n #1
  { \tex_vrule:D width \__dim_eval:w #1 \__dim_eval_end: }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Removing \LaTeXe{} commands}
%
% Remove the \LaTeXe{} definitions of various box commands, meaning that
% \cs{NewDocumentCommand} can then be used. This means that the document-level
% declarations are usable in both format and package mode.
%
%    \begin{macrocode}
%<*package>
\tl_map_inline:nn
  {
    \mbox
    \makebox
    \fbox
    \framebox
    \raisebox
    \newsavebox
    \sbox
    \savebox
    \lrbox \endlrbox
    \usebox
    \rule
    \llap \rlap
    \leftline \centerline \rightline
  }
  { \cs_undefine:N #1 }
%</package>
%    \end{macrocode}
%
% \subsection{Directly typesetting material in boxes}
%
% \begin{macro}{\mbox}
%   The basic horizontal box command for \LaTeX{}: simply box things up
%   as there is nothing complicated to do.
%    \begin{macrocode}
\NewDocumentCommand { \mbox } { +m }
  {
    \xbox_leave_vmode:
    \hbox:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\makebox}
%   Here there are two distinct syntaxes, which have to be handled separately.
%   The \LaTeXe{} version checks first for picture-style syntax, so if~|#2|
%   is present~|#1| is simply dropped entirely. Picture syntax is converted
%   into dimensions here before handing off to the internal code.
%    \begin{macrocode}
\NewDocumentCommand { \makebox }
  { o > { \SplitArgument { 1 } { , } } d ( ) O { c } +m }
  {
    \xbox_leave_vmode:
    \IfNoValueTF {#2}
      {
        \IfNoValueTF {#1}
          { \hbox:n {#4} }
          { \xbox_to_wd:nnn {#1} {#3} {#4} }
      }
      {
        \msg_error:nnx { xbox } { picture-mode-unavailable }
          { \token_to_str:N \makebox }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\fboxsep, \fboxrule}
%
%    \begin{macrocode}
%<*initex>
\dim_new:N \fboxsep
\dim_new:N \fboxrule
%</initex>
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\fbox}
%   Simply frame up material: no need to do anything complex.
%    \begin{macrocode}
\NewDocumentCommand { \fbox } { +m }
  {
    \xbox_leave_vmode:
    \hbox_frame:nnn {#1} { \fboxrule } { \fboxsep }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\framebox}
%   Framing is more complex. The argument specification here is very similar
%   to \cs{makebox}, but the need to allow for the size of the frame,
%   \emph{etc.}~in the natural width means it's much easier to do a simple
%   test for \texttt{-NoValue-} here. Thus with no optional arguments this
%   command does exactly the same as \cs{fbox}.
%    \begin{macrocode}
\NewDocumentCommand { \framebox }
  { o > { \SplitArgument { 1 } { , } } d ( ) O { c } +m }
  {
    \xbox_leave_vmode:
    \IfNoValueTF {#2}
      {
        \IfNoValueTF {#1}
          { \hbox_frame:nnn {#4} { \fboxrule } { \fboxsep } }
          { \xbox_frame_to_wd:nnnnn {#1} {#3} {#4} { \fboxrule } { \fboxsep } }
      }
      {
        \msg_error:nnx { xbox } { picture-mode-unavailable }
          { \token_to_str:N \framebox }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\raisebox}
%   Here, handling the standard values for the two optional arguments  is done
%   one by one. This avoids needing to have detail of the implementation in
%   the user interface.
%    \begin{macrocode}
\NewDocumentCommand { \raisebox } { m o o +m }
  {
    \IfNoValueTF {#2}
      { \xbox_raise:nn {#1} {#4} }
      {
        \IfNoValueTF {#3}
          { \xbox_raise_with_ht:nnn {#1} {#2} {#4} }
          { \xbox_raise_with_ht_and_dp:nnnn {#1} {#2} {#3} {#4} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Storing boxed material}
%
% \begin{macro}{\newsavebox}
%   Allocate a new \enquote{savebox}.
%    \begin{macrocode}
\NewDocumentCommand { \newsavebox } { m } { \coffin_new:N #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sbox}
%   Save |#2| in a coffin: like \cs{mbox}, no messing about.
%    \begin{macrocode}
\NewDocumentCommand { \sbox } { m +m } { \hcoffin_set:Nn #1 {#2} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\savebox}
%   This is the same idea as for \cs{makebox} but saved in a coffin.
%   Does that mean we should have some more \enquote{complete} code-level
%   functionality here? Alternatively, one could consider using the
%   \verb*|makebox code| function defined by \pkg{xparse} inside the coffin
%   setting. Question: should the syntax processing (\cs{IFNoValueTF} test)
%   take place inside or outside of the coffin setting stage?
%    \begin{macrocode}
\NewDocumentCommand { \savebox }
  { m o > { \SplitArgument { 1 } { , } } d ( ) O { c } +m }
  {
    \IfNoValueTF {#3}
      {
        \IfNoValueTF {#2}
          { \hcoffin_set:Nn #1 {#5} }
          { \hcoffin_set:Nn #1 { \xbox_to_wd:nnn {#2} {#4} {#5} }
      }
      }
      {
        \msg_error:nnx { xbox } { picture-mode-unavailable }
          { \token_to_str:N \savebox }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{lrbox}
%   There are at least two potential approaches to dealing with the \env{lrbox}
%   environment. The \LaTeXe{} method is to use \tn{aftergroup} to insert
%   the closing |}| for the box \emph{after} the \tn{endgroup} inside
%   \cs{end}. That works well when using a \TeX{} box for the storage as there
%   is nothing to do after the |}|, but is not as convenient with a coffin as
%   the structures need to be set up. That means that to work that way the
%   code here would need to use internal details of the end-of-coffin
%   methods.
%
%   The alternative method, used here, is to utilise some detail of the
%   environment system but to use only standard interfaces to the coffin
%   system. The code therefore escapes from the group set up by \cs{end} after
%   saving the name and start line of the environment using an \texttt{x}-type
%   expansion. The environment detail has to be set twice: once inside the
%   box doing the collection, and once for the \cs{end} function, as the
%   check for a matching environment takes place after the \TeX{} box is
%   closed. That means that the end-of-environment function has to be
%   redefined: doing it this way avoids needing any detail of the \pkg{xparse}
%   internals for an environment.
%
%   This all looks a bit \enquote{programmatic} for use directly inside
%   an \pkg{xparse} argument, but it's very much tied to how \LaTeXe{}
%   environment syntax works and so this seems reasonable.
%    \begin{macrocode}
\NewDocumentEnvironment { lrbox } { m }
  {
    \use:x
      {
        \group_end:
        \hcoffin_set:Nw #1
          \cs_set_protected_nopar:cpn { environment~lrbox~end }
            {
              \tex_unskip:D
              \hcoffin_set_end:
              \group_begin:
%<*package>
                \tl_set:Nn \exp_not:N \@currenvir { \@currenvir }
                \tl_set:Nn \exp_not:N \@currenvline { \on@line }
%</package>
            }
%<*package>
          \tl_set:Nn \exp_not:N \@currenvir { \@currenvir }
          \tl_set:Nn \exp_not:N \@currenvline { \on@line }
          \cs_set_eq:Nc \endlrbox { environment~lrbox~end }
          \exp_not:N \@endpefalse
%</package>
      }
    \tex_ignorespaces:D
  }
  { }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\usebox}
%   Simply output the underlying coffin at the \TeX{} reference point:
%   done using the box syntax for speed (should this be done using
%   \cs{coffin_typeset:Nnnnn}?).
%    \begin{macrocode}
\NewDocumentCommand { \usebox } { m }
  {
    \xbox_leave_vmode:
    \box_use:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Functions not directly related to boxes}
%
% \begin{macro}{\rule}
%   Simple conversion.
%    \begin{macrocode}
\NewDocumentCommand { \rule } { O { 0 pt } m m }
  {
    \xbox_leave_vmode:
    \rule:nnn  { #1 + ( #3 ) } { 0 pt - ( #1 ) } {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Plain \TeX{} commands}
%
% These are inherited from plain \TeX{}, and are therefore potentially
% to be removed.
%
% \begin{macro}{\llap, \rlap}
%   These macros place text to the left or right of the current reference point
%   without taking up space. Unlike the plain \TeX{} versions, these correctly
%   leave vertical mode.
%    \begin{macrocode}
\NewDocumentCommand { \llap } { m }
  {
    \xbox_leave_vmode:
    \hbox_overlap_left:n  {#1}
  }
\NewDocumentCommand { \rlap } { m }
  {
    \xbox_leave_vmode:
    \hbox_overlap_right:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftline, \centerline, \rightline}
%   These macros place text on a full line either centered or left or right
%   adjusted.
%    \begin{macrocode}
\NewDocumentCommand { \leftline }   { m } { \hbox_line_left:n   {#1} }
\NewDocumentCommand { \centerline } { m } { \hbox_line_center:n {#1} }
\NewDocumentCommand { \rightline }  { m } { \hbox_line_right:n  {#1} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_new:nnnn { xbox } { picture-mode-unavailable }
  { Picture~mode~syntax~not~available~for~#1~command. }
  {
    The~xbox~implementation~of~LaTeX~box~commands~does~not~support~LaTeX2e's~
    picture~mode~syntax.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex