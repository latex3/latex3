% \iffalse meta-comment
%
%% File: xbox.dtx Copyright(C) 2012 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3trial bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver|package>
\RequirePackage{expl3,xparse}
\GetIdInfo$Id$
  {L3 Experimental document level boxes}
%</driver|package>
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{xbox} package\\ Document level boxes^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{variable}{\height, \depth, \width, \totalheight}
%   The natural dimensions of material being boxed are available within
%   dimension calculations as \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight}.
% \end{variable}
%
% \section{Directly typesetting material in boxes}
%
% \begin{function}{\mbox}
%   \begin{syntax}
%     \cs{mbox}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{mbox} is an abbreviated version of \cs{makebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\makebox}
%   \begin{syntax}
%     \cs{makebox}\oarg{width}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. If the \meta{width} argument is given,
%   the result will be treated as having this width rather than it's natural
%   width. Within this \meta{width}, the \meta{content} will be positioned
%   depending upon the second optional argument
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
% \end{function}
%
% \begin{function}{\raisebox}
%   \begin{syntax}
%     \cs{raisebox}\marg{distance}\oarg{height}\oarg{depth}\marg{content}
%   \end{syntax}
%   Inserts the \meta{content} in a box raised by the \meta{distance} (a
%   dimension expression). The material may optionally be treated as though
%   it has arbitrary \meta{height} and \meta{depth}, rather than the natural
%   values. The dimension expressions may use \cs{height}, \cs{depth},
%   \cs{width} and \cs{totalheight} to refer to the natural dimensions of
%   the typeset \meta{content}.
% \end{function}
%
% \section{Saving material in boxes}
%
% Material may be saved in named boxes, which have command-like names,
% for example |\mybox|.
%
% \begin{function}{\newsavebox}
%   \begin{syntax}
%     \cs{newsavebox}\marg{box}
%   \end{syntax}
%   If the \meta{box} is undefined, defines it to be a box for storing
%   typeset material. If the \meta{box} is defined then an error is
%   raised.
% \end{function}
%
% \begin{function}{\sbox}
%   \begin{syntax}
%     \cs{sbox}\Arg{box}\Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode and stores it in the
%   \meta{box}. Line breaks will not occur, and any \cs{par} tokens in the
%   \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{sbox} is an abbreviated version of \cs{savebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\savebox}
%   \begin{syntax}
%     \cs{savebox}\marg{box}\oarg{width}\oarg{position}\marg{content}
%   \end{syntax}
%   Works in a manner analogous to \cs{makebox} but saves the result in
%   a \meta{box} rather than inserting it into the current output.
% \end{function}
%
% \begin{function}{lrbox}
%   \begin{syntax}
%     \cs{begin}\{lrbox\}\Arg{box}
%       \meta{content}
%     \cs{end}\{lrbox\}
%   \end{syntax}
%   This is an environment equivalent to \cs{sbox} except that any spaces at
%   the beginning and end of the environment are ignored. This construct may
%   be used to contain material which cannot conveniently be grabbed as an
%   argument, for example containing verbatim items.
% \end{function}
%
% \begin{function}{\usebox}
%   \begin{syntax}
%     \cs{usebox}\marg{box}
%   \end{syntax}
%   Inserts the content of the \meta{box} such that the left-hand baseline
%   of the content is aligned with the current typesetting baseline.
% \end{function}
%
% \section{Picture mode syntax}
%
% Several box commands recognise an optional picture mode syntax, in which
% the first optional argument is a co-ordinate pair: \parg{x,y}. The
% commands do not have to be used inside a picture environment but their
% behaviour is altered.
%
% \begin{function}{\makebox}
%   \begin{syntax}
%     \cs{makebox}\parg{x,y}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. The \meta{content} is contained in a
%   box of width $\meta{x} \times \cs{unitlength}$, height $\meta{y} \times
%   \cs{unitlength}$ and zero depth. The \meta{position}
%   argument is extended to recognise settings for horizontal positioning
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
%   and for vertical positioning
%   \begin{itemize}
%     \item[t] placed such that the top of the material touches the current
%       baseline
%     \item[b] placed such that the bottom of the material touches the current
%       baseline
%   \end{itemize}
%   with the standard vertical position being that the center of the material
%   is aligned with the current baseline.
% \end{function}
%
% \begin{function}{\savebox}
%   \begin{syntax}
%     \cs{savebox}\marg{box}\parg{x,y}\oarg{position}\marg{content}
%   \end{syntax}
%   Works in an entirely analogous way to the picture mode \cs{makebox}
%   command but saves the output in the \meta{box} rather than placing it
%   in the current output.
% \end{function}
%
% \section{Document functions not directly related to boxes}
%
% \begin{function}{\rule}
%   \begin{syntax}
%     \cs{rule}\oarg{raised}\marg{width}\marg{height}
%   \end{syntax}
%   Inserts a rule of \meta{width} and \meta{height} in horizontal mode. The
%   rule may be displaced \meta{raised} vertically.
% \end{function}
%
% \section{Plain \TeX{} commands inherited by \LaTeX{}}
%
% \begin{function}{\llap, \rlap}
%   \begin{syntax}
%     \cs{llap} \Arg{content}
%     \cs{rlap} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box of zero width such that
%   it protrudes to the left (\cs{llap}) or right (\cs{rlap}) of the current
%   insertion point. The \meta{content} will overlap any other material due
%   to the fact it is treated as having zero width.
% \end{function}
%
% \begin{function}{\leftline, \centerline, \rightline}
%   \begin{syntax}
%     \cs{leftline} \Arg{content}
%     \cs{centerline} \Arg{content}
%     \cs{rightline} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a box which is the width of the current
%   galley, and aligns the material either to the left, center or right of
%   this box as appropriate.
% \end{function}
%
% \section{Additions to \pkg{l3box}}
%
% \begin{function}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   \begin{syntax}
%     \cs{hbox_line_left:n} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} to its natural width inside a horizontal box
%   which has the full width of the current line (galley width). The material
%   is aligned within the box to the left, center or right as appropriate.
% \end{function}
%
% \section{Code-level interfaces}
%
% \subsection{Possible additions to \pkg{l3box}}
%
% \begin{function}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   \begin{syntax}
%     \cs{hbox_line_left:n} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} to its natural width inside a horizontal box
%   which has the full width of the current line (galley width). The material
%   is aligned within the box to the left, center or right as appropriate.
% \end{function}
%
% \subsection{Possible additions somewhere}
%
% It's not entirely clear where these belong, but they seem general enough
% to have some form of documented existence.
%
% \begin{function}{\kern:n}
%   \begin{syntax}
%     \cs{kern:n} \Arg{width}
%   \end{syntax}
%   Inserts a kern of \meta{width} (a dimension expression).
% \end{function}
%
% \begin{function}{\rule:nnn}
%   \begin{syntax}
%     \cs{rule:nnn} \Arg{height} \Arg{depth} \Arg{width}
%   \end{syntax}
%   Inserts a rule of \meta{height}, \meta{depth} and \meta{width}
%   (all dimension expressions) in horizontal mode. The vertical dimensions
%   are relative to the current baseline, meaning that it is possible to insert
%   a vertically-displaced rule.
% \end{function}
%
% \begin{function}{\rule_horizontal:nn}
%   \begin{syntax}
%     \cs{rule_horizontal:nn} \Arg{height} \Arg{depth}
%   \end{syntax}
%   Inserts a horizontal rule of \meta{height} and \meta{depth} in vertical
%   mode. The rule will expand to the available width of the containing
%   vertical box.
% \end{function}
%
% \begin{function}{\rule_vertical:n}
%   \begin{syntax}
%     \cs{rule_vertical:n} \Arg{width}
%   \end{syntax}
%   Inserts a vertical rule of \meta{width} in horizontal mode. The rule will
%   expand to the available height and depth
%    of the containing
%   vertical box.
% \end{function}
%
% \begin{function}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   \begin{syntax}
%     \cs{xbox_position_left:n} \Arg{content}
%   \end{syntax}
%   Aligns the \meta{content} within the containing box such that it is
%   placed horizontally to the left, center or right, respectively.
% \end{function}
%
% \begin{function}
%   {\xbox_position_bottom:n, \xbox_position_vcenter:n, \xbox_position_top:n}
%   \begin{syntax}
%     \cs{xbox_position_bottom:n} \Arg{content}
%   \end{syntax}
%   Aligns the \meta{content} within the containing box such that it is
%   placed vertically to the top, center or bottom, respectively.
% \end{function}
%
% \subsection{Variables}
%
% \begin{variable}{\l_xbox_picture_unit_dim}
%   The unit length used when typesetting material using picture mode
%   syntax. For example, with \cs{l_xbox_picture_unit_dim} set as |0.5 cm|,
%   a co-ordinate pair |(1,2)| will be converted into an $x$-value of
%   0.5\,cm and a $y$-value of 1.0\,cm.
% \end{variable}
%
% \subsection{Internal functions}
%
% \begin{function}[EXP]{\__xbox_coord_to_x_dim:nn, \__xbox_coord_to_y_dim:nn}
%   \begin{syntax}
%     \cs{__xbox_coord_to_x_dim:nn} \Arg{x} \Arg{y}
%   \end{syntax}
%   Converts either the \meta{x} or \meta{y} co-ordinate, as appropriate,
%   into an absolute dimension. The \meta{x} or \meta{y} value should be given
%   as an fp expression in terms of \cs{unitlength}. The result of the
%   conversion is left in the input stream in \texttt{pt}.
% \end{function}
%
% \begin{function}{\__xbox_to_wd:nnn}
%   \begin{syntax}
%     \cs{__xbox_to_wd:nnn} \Arg{width} \Arg{position} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width}. The \meta{content} is placed within this
%   \meta{width} according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible).
%   \end{itemize}
%   Within the \meta{width} (a dimension expression), the terms
%   \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used to
%   refer to the \enquote{natural} size of the typeset \meta{content}.
% \end{function}
%
% \begin{function}{\__xbox_to_ht_and_wd:nnnn}
%   \begin{syntax}
%     \cs{__xbox_to_ht_and_wd:nnnn} \Arg{height} \Arg{width} \Arg{position} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width} and \meta{height}. The \meta{content} is placed
%   within this area according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%     \item[t] top of material aligned with current baseline,
%     \item[b] bottom of material aligned with current baseline,
%   \end{itemize}
%   with the material vertically centered if no other position is given.
%   Within the \meta{height} and \meta{width} (dimension expressions), the
%   terms \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used
%   to refer to the \enquote{natural} size of the typeset \meta{content}.
% \end{function}
%
% \begin{function}
%   {
%     \__xbox_raise:nn,
%     \__xbox_raise_with_ht:nnn,
%     \__xbox_raise_with_ht_and_dp:nnnn
%   }
%   \begin{syntax}
%     \cs{__xbox_raise:nn} \Arg{distance} \Arg{content}
%     \cs{__xbox_raise_with_ht:nnn} \Arg{distance} \Arg{height} \Arg{content}
%     \cs{__xbox_raise_with_ht_and_dp:nnnn} \Arg{distance} \Arg{height} \Arg{depth} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box which is placed such that
%   its baseline is displaced by \meta{distance} vertically from that of the
%   surroundings. The inserted material is treated as having \meta{height} and
%   \meta{depth}. The \meta{distance}, \meta{height} and \meta{depth} are
%   dimension expressions in which \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight} may be used  to refer to the \enquote{natural} size of
%   the typeset \meta{content}.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbox} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=xbox>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
%    \end{macrocode}
%
% \subsection{Setting up to measure natural width}
%
% \begin{variable}[int]{\l_@@_tmp_box}
%   Internal box used to typeset material for measuring up.
%    \begin{macrocode}
\box_new:N \l_@@_tmp_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\@@_via_tmp_box:nn}
%   Boxes up |#1| to its natural width in a color-safe \cs{l_@@_tmp_box}.
%   The document-level names for dimensions (\cs{height}, \emph{etc}.) are
%   then set up, before carrying out whatever \enquote{payload} operation is
%   supplied as |#2|. The front-loaded | \hbox_unpack:N \c_empty_box| is needed
%   to deal correctly with \tn{everypar}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_via_tmp_box:nn #1#2
  {
    \hbox_unpack:N \c_empty_box
    \group_begin:
       \hbox_set:Nn \l_@@_tmp_box
         {
           \color_group_begin:
             #1
           \color_group_end:
         }
       \@@_document_names:N \l_@@_tmp_box
       #2
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux]{\@@_document_names:N}
% \begin{variable}{\height, \depth, \width, \totalheight}
% \begin{variable}
%   {\l_@@_height_dim, \l_@@_depth_dim, \l_@@_width_dim, \l_@@_totalheight_dim}
%   The same idea as \cs{__coffin_design_names:N} in \pkg{xcoffins}: create
%   document-level names for dimensions. The two sets of dimensions could be
%   merged at a register level, but that needs both modules to be loaded
%   so perhaps has to wait.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_document_names:N #1
  {
    \dim_set:Nn \l_@@_height_dim { \box_ht:N #1 }
    \dim_set:Nn \l_@@_depth_dim  { \box_dp:N #1 }
    \dim_set:Nn \l_@@_width_dim  { \box_wd:N #1 }
    \dim_set:Nn \l_@@_totalheight_dim
      { \l_@@_height_dim + \l_@@_depth_dim }
    \cs_set_eq:NN \height \l_@@_height_dim
    \cs_set_eq:NN \depth \l_@@_depth_dim
    \cs_set_eq:NN \width \l_@@_width_dim
    \cs_set_eq:NN \totalheight \l_@@_totalheight_dim
  }
\dim_new:N \l_@@_height_dim
\dim_new:N \l_@@_depth_dim
\dim_new:N \l_@@_width_dim
\dim_new:N \l_@@_totalheight_dim
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{macro}
%
% \subsection{Parsing position arguments}
%
% The document-level commands use single letters to specify the position of
% material inside a box of non-natural width. These conversions are tied to
% the document syntax and as such are linked to this implementation.
%
% \begin{macro}[int]{\@@_hposition:nn}
% \begin{macro}[aux]{\@@_hposition:Nn}
% \begin{macro}[aux]{\@@_hposition:n}
%   Converts |#1| into a horizontal position within a box. This is set up as
%   a mapping so that it can be used when both horizontal and vertical
%   positioning is needed.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_hposition:nn #1#2
  {
    \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n
    \tl_map_function:nN {#1} \@@_hposition:Nn
    \@@_hposition:n {#2}
  }
\cs_new_protected:Npn \@@_hposition:Nn #1
  {
    \str_case:nnn {#1}
      {
        { l } { \cs_set_eq:NN \@@_hposition:n \xbox_position_left:n }
        { c } { \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n }
        { r } { \cs_set_eq:NN \@@_hposition:n \xbox_position_right:n }
        { s } { \cs_set_eq:NN \@@_hposition:n \use:n }
      }
      { }
  }
\cs_new_protected:Npn \@@_hposition:n #1 {#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int]{\@@_vposition:nn}
% \begin{macro}[aux]{\@@_vposition:Nn}
% \begin{macro}[aux]{\@@_vposition:n}
%   The same idea for vertical position, but things are a bit different as
%   things are in reverse at the interface level.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_vposition:nn #1#2
  {
    \cs_set_eq:NN \@@_vposition:n \xbox_position_vcenter:n
    \tl_map_function:nN {#1} \@@_vposition:Nn
    \@@_vposition:n {#2}
  }
\cs_new_protected:Npn \@@_vposition:Nn #1
  {
    \str_case:nnn {#1}
      {
        { b } { \cs_set_eq:NN \@@_vposition:n \xbox_position_top:n }
        { t } { \cs_set_eq:NN \@@_vposition:n \xbox_position_bottom:n }
      }
      { }
  }
\cs_new_protected:Npn \@@_vposition:n #1 {#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   Typeset material with positioning within a line. These should probably
%   be used by \cs{hbox_overlap_ldots:n} and \cs{hbox_line_\ldots:n}, but
%   would they fit into the \pkg{l3box} module and if some with what names?
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_position_left:n    #1 { #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_hcenter:n #1 { \tex_hss:D #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_right:n   #1 { \tex_hss:D #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {\xbox_position_bottom:n, \xbox_position_vcenter:n, \xbox_position_top:n}
%   Same idea for vertical positioning.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_position_bottom:n  #1 { #1 \tex_vss:D }
\cs_new_protected:Npn \xbox_position_vcenter:n #1 { \tex_vss:D #1 \tex_vss:D }
\cs_new_protected:Npn \xbox_position_top:n     #1 { \tex_vss:D #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Support for picture-mode co-ordinates}
%
% \begin{variable}{\l_xbox_picture_unit_dim}
%   A place to set up the \enquote{unit length} used in picture mode. For the
%   package, simply copy \LaTeXe{}'s register.
%    \begin{macrocode}
%<*initex>
\dim_new:N \l_xbox_picture_unit_dim
%</initex>
%<*package>
\cs_new_eq:NN \l_xbox_picture_unit_dim \unitlength
%</package>
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int, EXP]{\@@_coord_to_x_dim:nn, \@@_coord_to_x_dim:nn}
%   For evaluating the picture syntax information.
%    \begin{macrocode}
\cs_new:Npn \@@_coord_to_x_dim:nn #1#2
  { \dim_eval:n { \fp_eval:n {#1} \l_xbox_picture_unit_dim } }
\cs_new:Npn \@@_coord_to_y_dim:nn #1#2
  { \dim_eval:n { \fp_eval:n {#2} \l_xbox_picture_unit_dim } }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Internal functions for making boxes}
%
% \begin{macro}{\@@_to_wd:nnn}
%   Typeset the material to measure it up, then re-box to the requested
%   width and position.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_to_wd:nnn #1#2#3
  {
    \@@_via_tmp_box:nn {#3}
      {
        \hbox_to_wd:nn {#1}
          { \@@_hposition:nn {#2} { \hbox_unpack:N \l_@@_tmp_box } }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_to_ht_and_wd:nnnn}
%   When both a height and width are requested, a kern is needed at the base
%   of the box so alignment happens to the bottom rather than the baseline of
%   the content.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_to_ht_and_wd:nnnn #1#2#3#4
  {
    \@@_via_tmp_box:nn {#4}
      {
        \vbox_to_ht:nn {#1}
          {
            \@@_vposition:nn {#3}
              {
                \hbox_to_wd:nn {#2}
                  { \@@_hposition:nn {#3} { \hbox_unpack:N \l_@@_tmp_box } }
              }
            \kern:n { \c_zero_dim }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_raise:nn}
% \begin{macro}[int]{\@@_raise_with_ht:nnn}
% \begin{macro}[int]{\@@_raise_with_ht_and_dp:nnnn}
%   Raising a box
%    \begin{macrocode}
\cs_new_protected:Npn \@@_raise:nn #1#2
  {
    \@@_raise_with_ht_and_dp:nnnn {#1} { \box_ht:N \l_@@_tmp_box }
      { \box_dp:N \l_@@_tmp_box } {#2}
  }
\cs_new_protected:Npn \@@_raise_with_ht:nnn #1#2#3
  { \@@_raise_with_ht_and_dp:nnnn {#1} {#2} { \box_dp:N \l_@@_tmp_box } {#3} }
\cs_new_protected:Npn \@@_raise_with_ht_and_dp:nnnn #1#2#3#4
  {
    \@@_via_tmp_box:nn {#4}
      {
        \hbox_set:Nn \l_@@_tmp_box
          { \box_move_up:nn {#1} { \box_use:N \l_@@_tmp_box } }
        \box_set_ht:Nn \l_@@_tmp_box {#2}
        \box_set_dp:Nn \l_@@_tmp_box {#3}
        \box_use:N \l_@@_tmp_box
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Additions to \pkg{l3box}}
%
% \begin{macro}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   Necessary to implement the \cs{\ldots line} commands.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_line_left:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_center:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_right:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 } }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Additions which may need a new module}
%
% Somewhere is needed for rules, kerns, leaders: where to put these?
%
% \begin{macro}{\kern:n}
%   A simple wrapper around the \TeX{} primitive: this allows for expressions
%   and is properly terminated.
%    \begin{macrocode}
\cs_new_protected:Npn \kern:n #1
  { \tex_kern:D \__dim_eval:w #1 \__dim_eval_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rule:nnn}
% \begin{macro}{\rule_horizontal:nn}
% \begin{macro}{\rule_vertical:n}
%   Wrappers around the \TeX{} primitives for creating rules, with the usual
%   dimension expression support. The non-expanding rule is set up in
%   horizontal mode as that is usually the best plan.
%    \begin{macrocode}
\cs_new_protected:Npn \rule:nnn #1#2#3
  {
    \hbox_unpack:N \c_empty_box
    \hbox:n
      {
        \tex_vrule:D
          height \__dim_eval:w #1 \__dim_eval_end:
          depth  \__dim_eval:w #2 \__dim_eval_end:
          width  \__dim_eval:w #3 \__dim_eval_end:
      }
  }
\cs_new_protected:Npn \rule_horizontal:nn #1#2
  {
    \tex_hrule:D
      height \__dim_eval:w #1 \__dim_eval_end:
      depth  \__dim_eval:w #2 \__dim_eval_end:
  }
\cs_new_protected:Npn \rule_vertical:n #1
  { \tex_vrule:D width \__dim_eval:w #1 \__dim_eval_end: }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Removing \LaTeXe{} commands}
%
% Remove the \LaTeXe{} definitions of various box commands, meaning that
% \cs{NewDocumentCommand} can then be used. This means that the document-level
% declarations are usable in both format and package mode.
%
%    \begin{macrocode}
%<*package>
\tl_map_inline:nn
  {
    \mbox
    \makebox
    \raisebox
    \newsavebox
    \sbox
    \savebox
    \lrbox \endlrbox
    \usebox
    \rule
    \llap \rlap
    \leftline \centerline \rightline
  }
  { \cs_undefine:N #1 }
%</package>
%    \end{macrocode}
%
% \subsection{Directly typesetting material in boxes}
%
% \begin{macro}{\mbox}
%   The basic horizontal box command for \LaTeX{}: simply box things up
%   as there is nothing complicated to do.
%    \begin{macrocode}
\NewDocumentCommand { \mbox } { +m }
  {
    \hbox_unpack:N \c_empty_box
    \hbox:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\makebox}
%   Here there are two distinct syntaxes, which have to be handled separately.
%   The \LaTeXe{} version checks first for picture-style syntax, so if~|#2|
%   is present~|#1| is simply dropped entirely. Picture syntax is converted
%   into dimensions here before handing off to the internal code.
%    \begin{macrocode}
\NewDocumentCommand { \makebox }
  { O { \width } > { \SplitArgument { 1 } { , } } d ( ) O { c } +m }
  {
    \IfNoValueTF {#2}
      { \@@_to_wd:nnn {#1} {#3} {#4} }
      {
        \use:x
          {
            \@@_to_ht_and_wd:nnnn
              { \@@_coord_to_y_dim:nn #2 }
              { \@@_coord_to_x_dim:nn #2 }
          }
          {#3} {#4}
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\raisebox}
%   Here, handling the standard values for the two optional arguments  is done
%   one by one. This avoids needing to have detail of the implementation in
%   the user interface.
%    \begin{macrocode}
\NewDocumentCommand { \raisebox } { m o o +m }
  {
    \IfNoValueTF {#2}
      { \@@_raise:nn {#1} {#4} }
      {
        \IfNoValueTF {#3}
          { \@@_raise_with_ht:nnn {#1} {#2} {#4} }
          { \@@_raise_with_ht_and_dp:nnnn {#1} {#2} {#3} {#4} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Storing boxed material}
%
% \begin{macro}{\newsavebox}
%   Allocate a new \enquote{savebox}.
%    \begin{macrocode}
\NewDocumentCommand { \newsavebox } { m } { \coffin_new:N #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sbox}
%   Save |#2| in a coffin: like \cs{mbox}, no messing about.
%    \begin{macrocode}
\NewDocumentCommand { \sbox } { m +m } { \hcoffin_set:Nn #1 {#2} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\savebox}
%   This is the same idea as for \cs{makebox} but saved in a coffin.
%   Does that mean we should have some more \enquote{complete} code-level
%   functionality here? Alternatively, one could consider using the
%   \verb*|makebox code| function defined by \pkg{xparse} inside the coffin
%   setting. Question: should the syntax processing (\cs{IFNoValueTF} test)
%   take place inside or outside of the coffin setting stage?
%    \begin{macrocode}
\NewDocumentCommand { \savebox }
  { m O { \width } > { \SplitArgument { 1 } { , } } d ( ) O { c } +m }
  {
    \IfNoValueTF {#3}
      { \hcoffin_set:Nn #1 { \@@_to_wd:nnn {#2} {#4} {#5} } }
      {
        \hcoffin_set:Nn #1
          {
            \use:x
              {
                \@@_to_ht_and_wd:nnnn
                  { \@@_coord_to_y_dim:nn #3 }
                  { \@@_coord_to_x_dim:nn #3 }
              }
               {#4} {#5}
          }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{lrbox}
%   There are at least two potential approaches to dealing with the \env{lrbox}
%   environment. The \LaTeXe{} method is to use \tn{aftergroup} to insert
%   the closing |}| for the box \emph{after} the \tn{endgroup} inside
%   \cs{end}. That works well when using a \TeX{} box for the storage as there
%   is nothing to do after the |}|, but is not as convenient with a coffin as
%   the structures need to be set up. That means that to work that way the
%   code here would need to use internal details of the end-of-coffin
%   methods.
%
%   The alternative method, used here, is to utilise some detail of the
%   environment system but to use only standard interfaces to the coffin
%   system. The code therefore escapes from the group set up by \cs{end} after
%   saving the name and start line of the environment using an \texttt{x}-type
%   expansion. The environment detail has to be set twice: once inside the
%   box doing the collection, and once for the \cs{end} function, as the
%   check for a matching environment takes place after the \TeX{} box is
%   closed. That means that the end-of-environment function has to be
%   redefined: doing it this way avoids needing any detail of the \pkg{xparse}
%   internals for an environment.
%
%   This all looks a bit \enquote{programmatic} for use directly inside
%   an \pkg{xparse} argument, but it's very much tied to how \LaTeXe{}
%   environment syntax works and so this seems reasonable.
%    \begin{macrocode}
\NewDocumentEnvironment { lrbox } { m }
  {
    \use:x
      {
        \group_end:
        \hcoffin_set:Nw #1
          \cs_set_protected_nopar:cpn { environment~lrbox~end }
            {
              \tex_unskip:D
              \hcoffin_set_end:
              \group_begin:
%<*package>
                \tl_set:Nn \exp_not:N \@currenvir { \@currenvir }
                \tl_set:Nn \exp_not:N \@currenvline { \on@line }
%</package>
            }
%<*package>
          \tl_set:Nn \exp_not:N \@currenvir { \@currenvir }
          \tl_set:Nn \exp_not:N \@currenvline { \on@line }
          \cs_set_eq:Nc \endlrbox { environment~lrbox~end }
          \exp_not:N \@endpefalse
%</package>
      }
    \tex_ignorespaces:D
  }
  { }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\usebox}
%   Simply output the underlying coffin at the \TeX{} reference point:
%   done using the box syntax for speed (should this be done using
%   \cs{coffin_typeset:Nnnnn}?).
%    \begin{macrocode}
\NewDocumentCommand { \usebox } { m } { \box_use:N #1 }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Functions not directly related to boxes}
%
% \begin{macro}{\rule}
%   Simple conversion.
%    \begin{macrocode}
\NewDocumentCommand { \rule } { O { 0 pt } m m }
  { \rule:nnn  { #1 + (#3) } { 0 pt - (#1) } {#2} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Plain \TeX{} commands}
%
% These are inherited from plain \TeX{}, and are therefore potentially
% to be removed.
%
% \begin{macro}{\llap, \rlap}
%   These macros place text to the left or right of the current reference point
%   without taking up space.
%    \begin{macrocode}
\NewDocumentCommand { \llap } { m } { \hbox_overlap_left:n  {#1} }
\NewDocumentCommand { \rlap } { m } { \hbox_overlap_right:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftline, \centerline, \rightline}
%   These macros place text on a full line either centered or left or right
%   adjusted.
%    \begin{macrocode}
\NewDocumentCommand { \leftline }   { m } { \hbox_line_left:n   {#1} }
\NewDocumentCommand { \centerline } { m } { \hbox_line_center:n {#1} }
\NewDocumentCommand { \rightline }  { m } { \hbox_line_right:n  {#1} }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex