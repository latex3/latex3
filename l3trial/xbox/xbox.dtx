% \iffalse meta-comment
%
%% File: xbox.dtx
%
% Copyright (C) 2012-2018,2020,2021 The LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "l3trial bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{xbox} package\\Document level boxes^^A
% }
%
% \author{^^A
%  The \LaTeX{} Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2018-04-30}
%
% \maketitle
%
% \begin{documentation}
%
% This experimental module explores how to re-implement core \LaTeXe{}
% box constructs using \pkg{ltcmd} and \pkg{expl3} coding. As such, it provides
% as far as possible the \LaTeXe{} \textsc{api} (except where explicitly
% noted). Other than separation of layers, there is no significant new
% functionality here
%
% \begin{variable}{\height, \depth, \width, \totalheight}
%   The natural dimensions of material being boxed are available within
%   dimension calculations as \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight}.
% \end{variable}
%
% \section{Directly typesetting material in boxes}
%
% \begin{function}{\mbox}
%   \begin{syntax}
%     \cs{mbox}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{mbox} is an abbreviated version of \cs{makebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\makebox}
%   \begin{syntax}
%     \cs{makebox}\oarg{width}\oarg{position}\marg{content}
%     \cs{makebox}\parg{coords}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. If the \meta{width} argument is given,
%   the result will be treated as having this width rather than it's natural
%   width. Within this \meta{width}, the \meta{content} will be positioned
%   depending upon the second optional argument
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
%
%   When the \meta{coords} are given as a picture-mode command, the
%   \meta{contents} are inserted with width and height \cs{unitlength}
%   times the (integer) \meta{x} and \meta{y} values, respectively. If \meta{x}
%   or \meta{y} are given with units, they are used as-is. In this case, the
%   \meta{position} may also take
%   \begin{itemize}
%     \item[t] aligned with the top of the content
%     \item[b] aligned with the bottom of the content
%   \end{itemize}
%   and if neither are given is vertically centered.
% \end{function}
%
% \begin{function}{minipage}
%   \begin{syntax}
%     \cs{minipage}\{lrbox\}\oarg{position}\oarg{height}\oarg{inner position}\marg{width}
%       \meta{content}
%     \cs{end}\{minipage\}
%   \end{syntax}
%   The environment form of \cs{parbox} taking the same arguments. In addition
%   to the setup carried out by \cs{parbox}, the \env{minipage} environment
%   also
%   \begin{itemize}
%     \item Sets \cs{textwidth} and \cs{columnwidth} the the \meta{width}
%     \item Redefines footnotes as described in the \LaTeXe{} documentation
%       (command names are unchanged)
%     \item Resets list depth to zero
%     \item Sets the \LaTeXe{} \cs{@minipage} flag
%   \end{itemize}
% \end{function}
%
% \begin{function}{\parbox}
%   \begin{syntax}
%     \cs{parbox}\oarg{position}\oarg{height}\oarg{inner position}\marg{width}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a vertical mode inserted at the current
%   reference point. Line breaks will occur, and any \cs{par} tokens in
%   the \meta{content} act in the normal way. The \meta{position} aligns the
%   box in the following way
%   \begin{itemize}
%     \item[b] the baseline of the bottom line of the box lines up with the
%       current reference point (\TeX{} \tn{vbox})
%     \item[c] the middle of the box lines up with the math axis of the
%       current line (\TeX{} \tn{vcenter}-like) (the standard setting)
%     \item[t] the baseline of the top line of the box lines up with the
%       current reference point (\TeX{} \tn{vtop})
%   \end{itemize}
%   In contrast to the \LaTeXe{} implementation, math mode is not used to
%   insert vertically-centered material.
%
%   The \meta{height} sets the height of the box, within which the \meta{inner
%   position} may be used to control text placement within the box
%   \begin{itemize}
%     \item[c] vertically centered (the standard setting),
%     \item[b] flush to the bottom of the box,
%     \item[t] flush to the top of the box,
%     \item[s] interline space stretched or shrunk to fill the \meta{height}
%       (if possible),
%   \end{itemize}
%
%   At the start of the box, the \LaTeXe{} command \tn{@parboxrestore}
%   is called. This resets  number of line-breaking commands, as described in
%   the \LaTeXe{} documentation. The \tn{hsize} is also set to \meta{width}.
% \end{function}
%
% \begin{function}{\raisebox}
%   \begin{syntax}
%     \cs{raisebox}\marg{distance}\oarg{height}\oarg{depth}\marg{content}
%   \end{syntax}
%   Inserts the \meta{content} in a box raised by the \meta{distance} (a
%   dimension expression). The material may optionally be treated as though
%   it has arbitrary \meta{height} and \meta{depth}, rather than the natural
%   values. The dimension expressions may use \cs{height}, \cs{depth},
%   \cs{width} and \cs{totalheight} to refer to the natural dimensions of
%   the typeset \meta{content}.
% \end{function}
%
% \begin{function}{\underline}
%   \begin{syntax}
%     \cs{underline}\marg{content}
%   \end{syntax}
%   In text mode, inserts the \meta{content} in a horizontal box and underlines
%   it. In math mode, uses the \TeX{} math mode primitive to directly underline
%   content. Both cases use font dimension $8$ of the extension font
%   (|\textfont3|) to determine the line thickness and separation from the
%   content.
% \end{function}
%
% \section{Typesetting material in frames}
%
% \begin{variable}{\fboxrule}
%   The width of the rule used when constructing a frame around content.
%   This is a length and should be set using \cs{setlength}.
% \end{variable}
%
% \begin{variable}{\fboxsep}
%   The width of the border between a frame and the content it surrounds.
%   This is a length and should be set using \cs{setlength}.
% \end{variable}
%
% \begin{function}{\fbox}
%   \begin{syntax}
%     \cs{fbox}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. The typeset material is surrounded
%   by a \enquote{border} of width \cs{fboxsep} which is then enclosed by
%   a frame of rules of width \cs{fboxrule}. The final size of the typeset
%   material includes the border and frame.
%   \begin{texnote}
%     Conceptually, \cs{fbox} is an abbreviated version of \cs{framebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\framebox}
%   \begin{syntax}
%     \cs{framebox}\oarg{width}\oarg{position}\marg{content}
%     \cs{framebox}\parg{coords}\oarg{position}\marg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode inserted at the current
%   reference point. Line breaks will not occur, and any \cs{par} tokens in
%   the \meta{content} will be ignored. If the \meta{width} argument is given,
%   the result will be treated as having this width rather than it's natural
%   width. Within this \meta{width}, the \meta{content} will be positioned
%   depending upon the second optional argument
%   \begin{itemize}
%     \item[c] centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible),
%   \end{itemize}
%   The typeset material is surrounded by a \enquote{border} of width
%   \cs{fboxsep} which is then enclosed by a frame of rules of width
%   \cs{fboxrule}. The final size of the typeset material includes the border
%   and frame, although calculations using \cs{height}, \emph{etc.}, use only
%   the natural size of the \meta{content}.
%
%   When the \meta{coords} are given as a picture-mode command, the
%   \meta{contents} are inserted with width and height \cs{unitlength}
%   times the (integer) \meta{x} and \meta{y} values, respectively. If \meta{x}
%   or \meta{y} are given with units, they are used as-is. In this case, the
%   \meta{position} may also take
%   \begin{itemize}
%     \item[t] aligned with the top of the content
%     \item[b] aligned with the bottom of the content
%   \end{itemize}
%   and if neither are given is vertically centered. The picture-mode version
%   uses no \meta{border} and uses the picture-mode linewidth rather than
%   \cs{fboxrule}.
%   \begin{texnote}
%     In the current implementation, the version of \cs{framebox} here
%     handles horizontal placement differently from the \LaTeXe{} one.
%     In the latter, the \meta{content} is placed allowing horizontal space for
%     the separation but \emph{not} the rules. That can lead to overlap when
%     there is no separation distance. Vertically, both implementations use
%     the same approach, and there is no chance of overlap. This aspect is
%     for \emph{discussion}.
%   \end{texnote}
% \end{function}
%
% \section{Saving material in boxes}
%
% Material may be saved in named boxes, which have command-like names,
% for example |\mybox|. These are implemented as coffins, which means
% they automatically contain \cs{color_ensure_current:}. However, we do
% not make use of the pole structures: would a simple box structure be
% better?
%
% \begin{function}{\newsavebox}
%   \begin{syntax}
%     \cs{newsavebox}\marg{box}
%   \end{syntax}
%   If the \meta{box} is undefined, defines it to be a box for storing
%   typeset material. If the \meta{box} is defined then an error is
%   raised.
% \end{function}
%
% \begin{function}{\sbox}
%   \begin{syntax}
%     \cs{sbox}\Arg{box}\Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal mode and stores it in the
%   \meta{box}. Line breaks will not occur, and any \cs{par} tokens in the
%   \meta{content} will be ignored.
%   \begin{texnote}
%     Conceptually, \cs{sbox} is an abbreviated version of \cs{savebox}
%     without the optional arguments. However, it is more efficient to
%     implement the two commands separately at a code level.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\savebox}
%   \begin{syntax}
%     \cs{savebox}\marg{box}\oarg{width}\oarg{position}\marg{content}
%     \cs{savebox}\marg{box}\parg{coords}\oarg{position}\marg{content}
%   \end{syntax}
%   Works in a manner analogous to \cs{makebox} but saves the result in
%   a \meta{box} rather than inserting it into the current output.
% \end{function}
%
% \begin{function}{lrbox}
%   \begin{syntax}
%     \cs{begin}\{lrbox\}\Arg{box}
%       \meta{content}
%     \cs{end}\{lrbox\}
%   \end{syntax}
%   This is an environment equivalent to \cs{sbox} except that any spaces at
%   the beginning and end of the environment are ignored. This construct may
%   be used to contain material which cannot conveniently be grabbed as an
%   argument, for example containing verbatim items.
% \end{function}
%
% \begin{function}{\usebox}
%   \begin{syntax}
%     \cs{usebox}\marg{box}
%   \end{syntax}
%   Inserts the content of the \meta{box} such that the left-hand baseline
%   of the content is aligned with the current typesetting baseline.
% \end{function}
%
% \section{Other box-like commands}
%
% \begin{function}{\rule}
%   \begin{syntax}
%     \cs{rule}\oarg{raised}\marg{width}\marg{height}
%   \end{syntax}
%   Inserts a rule of \meta{width} and \meta{height}, \meta{raised}
%   if specified.
% \end{function}
%
% \section{Plain \TeX{} commands inherited by \LaTeX{}}
%
% \begin{function}{\clap, \llap, \rlap}
%   \begin{syntax}
%     \cs{clap} \Arg{content}
%     \cs{llap} \Arg{content}
%     \cs{rlap} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box of zero width such that
%   it protrudes to the center (\cs{clap}), left (\cs{llap})
%   or right (\cs{rlap}) of the current
%   insertion point. The \meta{content} will overlap any other material due
%   to the fact it is treated as having zero width.
%   \begin{texnote}
%     Unlike the plain \TeX{} versions, the implementations here leave vertical
%     mode before inserting the boxed material.
%   \end{texnote}
% \end{function}
%
% \begin{function}{\leftline, \centerline, \rightline}
%   \begin{syntax}
%     \cs{leftline} \Arg{content}
%     \cs{centerline} \Arg{content}
%     \cs{rightline} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a box which is the width of the current
%   galley, and aligns the material either to the left, center or right of
%   this box as appropriate.
% \end{function}
%
% \section{Code-level interfaces}
%
% \begin{function}{\xbox_to_wd:nnn, \xbox_to_wd_and_ht:nnnn}
%   \begin{syntax}
%     \cs{xbox_to_wd:nnn} \Arg{width} \Arg{position} \Arg{content}
%     \cs{xbox_to_wd_and_ht:nnnn} \Arg{width} \Arg{height} \Arg{position} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width} and \meta{height}. The \meta{content} is placed within this
%   \meta{width} according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible).
%   \end{itemize}
%   and when given within the \meta{height} with alignment
%   \begin{itemize}
%     \item[t] top of the content
%     \item[b] bottom of the content
%   \end{itemize}
%   and otherwise vertically centered.
%
%   Within the \meta{width} and \meta{height} (dimension expressions), the terms
%   \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used to
%   refer to the \enquote{natural} size of the typeset \meta{content}.
% \end{function}
%
% \begin{function}
%   {
%     \xbox_frame_to_wd:nnnnn, \xbox_frame_to_wd:nnnVV,
%     \xbox_frame_to_wd_and_ht:nnnnnn, \xbox_frame_to_wd_and_ht:nnnnVV
%   }
%   \begin{syntax}
%     \cs{xbox_frame_to_wd:nnnnn} \Arg{width} \Arg{position} \Arg{content} \Arg{thickness} \Arg{border}
%     \cs{xbox_frame_to_wd_and_ht:nnnnnn} \Arg{width} \Arg{height} \Arg{position} \Arg{content} \Arg{thickness} \Arg{border}
%   \end{syntax}
%   Typesets the \meta{content} in horizontal mode such that it is treated as
%   having nominal \meta{width}. The \meta{content} is placed within this
%   \meta{width} according to the \meta{position}, interpreted
%   \begin{itemize}
%     \item[c] horizontal centered (the standard setting),
%     \item[l] flush left,
%     \item[r] flush right,
%     \item[s] interword space stretched or shrunk to fill the \meta{width}
%       (if possible).
%   \end{itemize}
%   and when given within the \meta{height} with alignment
%   \begin{itemize}
%     \item[t] top of the content
%     \item[b] bottom of the content
%   \end{itemize}
%   and otherwise vertically centered.
%
%   Within the \meta{width} (a dimension expression), the terms
%   \cs{height}, \cs{depth}, \cs{width} and \cs{totalheight} may be used to
%   refer to the \enquote{natural} size of the typeset \meta{content}.
%   The typeset material is surrounded by a whitespace of width
%   \meta{border} which is then enclosed by a frame of rules of
%   \meta{thickness}. The final size of the typeset material includes the border
%   and frame, although calculations using \cs{height}, \emph{etc.}, use only
%   the natural size of the \meta{content}.
% \end{function}
%
% \begin{function}
%   {\xbox_parbox_to_wd:nnn, \xbox_parbox_to_wd_and_ht:nnnnn}
%   \begin{syntax}
%     \cs{xbox_parbox_to_wd:nnn} \Arg{width} \Arg{position} \Arg{content}
%     \cs{xbox_parbox_to_wd_and_ht:nnnnn} \Arg{width} \Arg{height} \Arg{position} \Arg{inner position} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a vertical mode inserted at the current
%   reference point. Line breaks will occur, and any \cs{par} tokens in
%   the \meta{content} act in the normal way. The \meta{position} aligns the
%   box in the following way
%   \begin{itemize}
%     \item[b] the baseline of the bottom line of the box lines up with the
%       current reference point (\TeX{} \tn{vbox})
%     \item[c] the middle of the box lines up with the math axis of the
%       current line (\TeX{} \tn{vcenter}-like) (the standard setting)
%     \item[t] the baseline of the top line of the box lines up with the
%       current reference point (\TeX{} \tn{vtop})
%   \end{itemize}
%   In contrast to the \LaTeXe{} implementation, math mode is not used to
%   insert vertically-centered material.
%
%   The \meta{height} sets the height of the box, within which the \meta{inner
%   position} may be used to control text placement within the box
%   \begin{itemize}
%     \item[c] vertically centered (the standard setting),
%     \item[b] flush to the bottom of the box,
%     \item[t] flush to the top of the box,
%     \item[s] interline space stretched or shrunk to fill the \meta{height}
%       (if possible),
%   \end{itemize}
%
%   At the start of the box, the \LaTeXe{} command \tn{@parboxrestore}
%   is called. This resets  number of line-breaking commands, as described in
%   the \LaTeXe{} documentation. The \tn{hsize} is also set to \meta{width}.
% \end{function}
%
% \begin{function}
%   {
%     \xbox_raise:nn,
%     \xbox_raise_with_ht:nnn,
%     \xbox_raise_with_ht_and_dp:nnnn
%   }
%   \begin{syntax}
%     \cs{xbox_raise:nn} \Arg{distance} \Arg{content}
%     \cs{xbox_raise_with_ht:nnn} \Arg{distance} \Arg{height} \Arg{content}
%     \cs{xbox_raise_with_ht_and_dp:nnnn} \Arg{distance} \Arg{height} \Arg{depth} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} in a horizontal box which is placed such that
%   its baseline is displaced by \meta{distance} vertically from that of the
%   surroundings. The inserted material is treated as having \meta{height} and
%   \meta{depth}. The \meta{distance}, \meta{height} and \meta{depth} are
%   dimension expressions in which \cs{height}, \cs{depth}, \cs{width} and
%   \cs{totalheight} may be used  to refer to the \enquote{natural} size of
%   the typeset \meta{content}.
% \end{function}
%
% \begin{function}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   \begin{syntax}
%     \cs{xbox_position_left:n} \Arg{content}
%   \end{syntax}
%   Aligns the \meta{content} within the containing box such that it is
%   placed horizontally to the left, center or right, respectively.
% \end{function}
%
% \begin{function}
%   {\xbox_position_bottom:n, \xbox_position_Vcenter:n, \xbox_position_top:n}
%   \begin{syntax}
%     \cs{xbox_position_top:n} \Arg{content}
%   \end{syntax}
%   Aligns the \meta{content} within the containing box such that it is
%   placed vertically to the bottom, center or top, respectively.
% \end{function}
%
% \subsection{Possible additions to \pkg{l3box}}
%
% \begin{function}{\hbox_frame:nnn, \hbox_frame:nVV}
%   \begin{syntax}
%     \cs{hbox_frame:nnn} \Arg{content} \Arg{thickness} \Arg{border}
%   \end{syntax}
%   Inserts the \meta{content} in a horizontal box which will bear a frame of
%   \meta{thickness}. A \meta{border} is left between the \meta{content} and
%   the frame. The frame will overprint any part of the \meta{content} which
%   lies outside of the bounding box at natural size (\emph{i.e.}~the frame is
%   printed \enquote{after} the \meta{content}). The apparent size of the
%   inserted box includes the frame and the border, \emph{i.e.}~the width
%   of the inserted material is $ \mathrm{width} ( \meta{content} ) +
%   2 ( \meta{thickness} + \meta{border} )$. See also \cs{hbox_surround:nn}.
% \end{function}
%
% \begin{function}{\hbox_surround:nn}
%   \begin{syntax}
%     \cs{hbox_surround:nn} \Arg{content} \Arg{thickness}
%   \end{syntax}
%   Inserts the \meta{content} in a horizontal box which will be surrounded by
%   a frame of \meta{thickness}. The frame will overprint any part of the
%   \meta{content} which lies outside of the bounding box at natural size
%   (\emph{i.e.}~the frame is  printed \enquote{after} the \meta{content}).
%   The apparent size of the inserted box excludes the frame, \emph{i.e.}~the
%   width  of the inserted material is simply $ \mathrm{width}
%   ( \meta{content} )$. See also \cs{hbox_frame:nnn}.
% \end{function}
%
% \begin{function}{\hbox_underline:nnn}
%   \begin{syntax}
%     \cs{hbox_underline:nnn} \Arg{content} \Arg{thickness} \Arg{border}
%   \end{syntax}
%   Inserts the \meta{content} in a horizontal box and underlines
%   with a rule of \meta{thickness}. A \meta{border} is left between the
%   \meta{content} and the underline. The underline will overprint any part
%   of the \meta{content} which lies outside of the bounding box at natural
%   size (\emph{i.e.}~the frame is printed \enquote{after} the \meta{content}).
%   The apparent size of the inserted box includes the underline and the
%   border, this affects only the depth (contrast with \cs{hbox_frame:nnn}).
%   The underline is placed relative to the \emph{baseline} of the content,
%   not the \emph{bottom}.
% \end{function}
%
% \begin{function}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   \begin{syntax}
%     \cs{hbox_line_left:n} \Arg{content}
%   \end{syntax}
%   Typesets the \meta{content} to its natural width inside a horizontal box
%   which has the full width of the current line (galley width). The material
%   is aligned within the box to the left, center or right as appropriate.
% \end{function}
%
% \subsection{Possible additions to \pkg{ltcmd}}
%
% \begin{function}{\CoordsToLengths}
%   \begin{syntax}
%     \cs{CoordsToLengths} \Arg{coords}
%   \end{syntax}
%   Converts a co-ordinate pair (given as \meta{x}\texttt{,}\meta{y}) into
%   two lengths. Where the co-ordinates are real numbers with no units,
%   \cs{unitlength} is assumed, otherwise they are treated as dimension 
%   expressions. The result is returned as two \meta{balanced text} as
%   in \cs{ProcessedArgument}
% \end{function}
%
% \subsection{Possible additions somewhere}
%
% It's not entirely clear where these belong, but they seem general enough
% to have some form of documented existence.
%
% \begin{function}{\kern_horizontal:n}
%   \begin{syntax}
%     \cs{kern_horizontal:n} \Arg{dimexpr}
%   \end{syntax}
%   Inserts a horizontal \meta{kern} into the current list.
% \end{function}
%
% \begin{function}{\kern_vertical:n}
%   \begin{syntax}
%     \cs{kern_vertical:n} \Arg{dimexpr}
%   \end{syntax}
%   Inserts a vertical \meta{kern} into the current list.
% \end{function}
%
% \begin{function}{\rule:nnn}
%   \begin{syntax}
%     \cs{rule:nnn} \Arg{width} \Arg{height} \Arg{depth}
%   \end{syntax}
%   Inserts a rule of \meta{height}, \meta{depth} and \meta{width}
%   (all dimension expressions) in horizontal mode. The vertical dimensions
%   are relative to the current baseline, meaning that it is possible to insert
%   a vertically-displaced rule.
% \end{function}
%
% \begin{function}{\rule_horizontal:nn}
%   \begin{syntax}
%     \cs{rule_horizontal:nn} \Arg{height} \Arg{depth}
%   \end{syntax}
%   Inserts a horizontal rule of \meta{height} and \meta{depth} in vertical
%   mode. The rule will expand to the available width of the containing
%   vertical box.
% \end{function}
%
% \begin{function}{\rule_vertical:n}
%   \begin{syntax}
%     \cs{rule_vertical:n} \Arg{width}
%   \end{syntax}
%   Inserts a vertical rule of \meta{width} in horizontal mode. The rule will
%   expand to the available height and depth
%    of the containing
%   vertical box.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbox} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=xbox>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage{xbox}{2018-04-30}{}
  {L3 Experimental document level boxes}
%    \end{macrocode}
%
% \subsection{Setting up to measure natural width}
%
% \begin{variable}{\l_@@_internal_box}
%   Internal box used to typeset material for measuring up.
%    \begin{macrocode}
\box_new:N \l_@@_internal_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_via_internal_box:Nnn}
%   Boxes up |#1| to its natural width in \cs{l_@@_internal_box}.
%   The document-level names for dimensions (\cs{height}, \emph{etc}.) are
%   then set up, before carrying out whatever \enquote{payload} operation is
%   supplied as |#2|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_via_internal_box:Nnn #1#2#3
  {
    \group_begin:
       #1 \l_@@_internal_box {#2}
       \@@_document_names:
       #3
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_document_names:}
% \begin{variable}{\height, \depth, \width, \totalheight}
% \begin{variable}
%   {\l_@@_height_dim, \l_@@_depth_dim, \l_@@_width_dim, \l_@@_totalheight_dim}
%   The same idea as \cs{__coffin_design_names:N} in \pkg{xcoffins}: create
%   document-level names for dimensions. The two sets of dimensions could be
%   merged at a register level, but that needs both modules to be loaded
%   so perhaps has to wait.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_document_names:
  {
    \dim_set:Nn \l_@@_height_dim { \box_ht:N \l_@@_internal_box }
    \dim_set:Nn \l_@@_depth_dim  { \box_dp:N \l_@@_internal_box }
    \dim_set:Nn \l_@@_width_dim  { \box_wd:N \l_@@_internal_box }
    \dim_set:Nn \l_@@_totalheight_dim
      { \l_@@_height_dim + \l_@@_depth_dim }
    \cs_set_eq:NN \height \l_@@_height_dim
    \cs_set_eq:NN \depth \l_@@_depth_dim
    \cs_set_eq:NN \width \l_@@_width_dim
    \cs_set_eq:NN \totalheight \l_@@_totalheight_dim
  }
\dim_new:N \l_@@_height_dim
\dim_new:N \l_@@_depth_dim
\dim_new:N \l_@@_width_dim
\dim_new:N \l_@@_totalheight_dim
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{macro}
%
% \subsection{Parsing position arguments}
%
% The document-level commands use single letters to specify the position of
% material inside a box of non-natural width. These conversions are tied to
% the document syntax and as such are linked to this implementation.
%
% \begin{macro}{\@@_set_position:n}
% \begin{macro}{\@@_position:n}
% \begin{macro}{\@@_hposition:n, \@@_vposition:n}
%   Converts |#1| into a horizontal position within a box. This is set up as
%   a mapping so that it can be used when both horizontal and vertical
%   positioning is needed.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_set_position:n #1
  {
    \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n
    \cs_set_eq:NN \@@_vposition:n \xbox_position_vcenter:n
    \tl_map_function:nN {#1} \@@_position:n
  }
\cs_new_protected:Npn \@@_position:n #1
  {
    \str_case:nn {#1}
      {
        { l } { \cs_set_eq:NN \@@_hposition:n \xbox_position_left:n }
        { c } { \cs_set_eq:NN \@@_hposition:n \xbox_position_hcenter:n }
        { r } { \cs_set_eq:NN \@@_hposition:n \xbox_position_right:n }
        { s } { \cs_set_eq:NN \@@_hposition:n \use:n }
        { t } { \cs_set_eq:NN \@@_vposition:n \xbox_position_top:n }
        { b } { \cs_set_eq:NN \@@_vposition:n \xbox_position_bottom:n }
      }
  }
\cs_new_protected:Npn \@@_hposition:n #1 {#1}
\cs_new_protected:Npn \@@_vposition:n #1 {#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\xbox_position_left:n, \xbox_position_hcenter:n, \xbox_position_right:n}
%   Typeset material with positioning within a line. These should probably
%   be used by \cs{hbox_overlap_ldots:n} and \cs{hbox_line_\ldots:n}, but
%   would they fit into the \pkg{l3box} module and if some with what names?
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_position_left:n    #1 { #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_hcenter:n #1 { \tex_hss:D #1 \tex_hss:D }
\cs_new_protected:Npn \xbox_position_right:n   #1 { \tex_hss:D #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {\xbox_position_bottom:n, \xbox_position_top:n, \xbox_position_vcenter:n}
%  We have a lot less setup for vertical alignment, so these likely have no
%  better names at present.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_position_bottom:n  #1 { \tex_vss:D #1 }
\cs_new_protected:Npn \xbox_position_top:n     #1 { #1 \tex_vss:D }
\cs_new_protected:Npn \xbox_position_vcenter:n #1 { \tex_vss:D #1 \tex_vss:D }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Converting \texttt{picture} mode co-ordinates}
%
% \LaTeXe{}'s \texttt{picture} mode takes co-ordinates which are not quite
% the same as \texttt{fp} tuples as they have a unit length. There's no
% good way to handle that other than keeping the \LaTeXe{} interface, which is
% what we do here.
%
% \begin{variable}{\l_@@_x_dim, \l_@@_y_dim}
%   Scratch space.
%    \begin{macrocode}
\dim_new:N \l_@@_x_dim
\dim_new:N \l_@@_y_dim
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_coord_convert:n}
% \begin{macro}{\@@_coord_convert:nn}
% \begin{macro}{\@@_coord_convert:nN}
% \begin{macro}{\CoordsToLengths}
%   Split the co-ordinates, then use the \LaTeXe{} conversion written
%   out as an auxiliary.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_coord_convert:n #1
  {
    \@@_coord_convert:w #1 , , \s_@@_stop
  }
\cs_new_protected:Npn \@@_coord_convert:w #1 , #2 , #3 \s_@@_stop
  {
    \tl_if_blank:nTF {#2}
      { \msg_error:nn { xbox } { missing-coordinate-pair } }
      { \@@_coord_convert:nn {#1} {#2} }
  }
\cs_new_protected:Npn \@@_coord_convert:nn #1#2
  {
    \group_begin:
      \@@_coord_convert:nN {#1} \l_@@_x_dim
      \@@_coord_convert:nN {#2} \l_@@_y_dim
      \tl_set:Nx \ProcessedArgument
        {
          { \dim_use:N \l_@@_x_dim }
          { \dim_use:N \l_@@_y_dim }
        }
    \exp_args:NNNV \group_end:
    \tl_set:Nn \ProcessedArgument \ProcessedArgument
  }
\cs_new_protected:Npn \@@_coord_convert:nN #1#2
  {
    \tex_afterassignment:D \use_none_delimit_by_q_nil:w
    #2 \tex_dimexpr:D #1 \unitlength \scan_stop: \scan_stop: \q_nil
  }
\cs_new_eq:NN \CoordsToLengths \@@_coord_convert:n
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Functions for making boxes}
%
% These functions all involve boxing up material, then allowing adjustment
% of size based on \cs{height}, \cs{width}, \emph{etc.}
%
% \begin{variable}{\g_xbox_lr_box}
%    \begin{macrocode}
\box_new:N \g_xbox_lr_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\xbox_to_wd:nnn}
%   Typeset the material to measure it up, then re-box to the requested
%   width and position.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_to_wd:nnn #1#2#3
  {
    \@@_via_internal_box:Nnn \hbox_set:Nn {#3}
      {
        \hbox_to_wd:nn {#1}
          {
            \@@_set_position:n {#2}
            \@@_hposition:n { \hbox_unpack_drop:N \l_@@_internal_box }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xbox_to_wd_and_ht:nnnn}
%   Much the same but with a height. The terminal kern is there to ensure the
%   box aligns to the bottom not the baseline (see comments in the \LaTeXe{}
%   source \texttt{ltboxes.dtx}): this one is done directly for performance
%   reasons.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_to_wd_and_ht:nnnn #1#2#3#4
  {
    \@@_via_internal_box:Nnn \hbox_set:Nn {#4}
      {
        \vbox_to_ht:nn {#2}
          {
            \@@_set_position:n {#3}
            \@@_vposition:n
              {
                \hbox_to_wd:nn {#1}
                  { \@@_hposition:n { \hbox_unpack_drop:N \l_@@_internal_box } }
              }
            \__kernel_kern:n { 0pt }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xbox_frame_to_wd:nnnnn, \xbox_frame_to_wd:nnnVV}
% \begin{macro}{\xbox_frame_to_wd_and_ht:nnnnnn, \xbox_frame_to_wd_and_ht:nnnnVV}
%   Wrappers to place a frame around material adjusted to the requested box
%   dimensions.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_frame_to_wd:nnnnn #1#2#3#4#5
  {
    \hbox_frame:nnn
      { \xbox_to_wd:nnn { #1 - ( #4 + #5 ) * 2 } {#2} {#3} }
      {#4} {#5}
  }
\cs_generate_variant:Nn \xbox_frame_to_wd:nnnnn { nnnVV }
\cs_new_protected:Npn \xbox_frame_to_wd_and_ht:nnnnnn #1#2#3#4#5#6
  {
    \hbox_frame:nnn
      {
        \xbox_to_wd_and_ht:nnnn
          { #1 - ( #5 + #6 ) * 2 }
          { #2 - ( #5 + #6 ) * 2 }
          {#3} {#4}
      }
      {#5} {#6}
  }
\cs_generate_variant:Nn \xbox_frame_to_wd_and_ht:nnnnnn { nnnnVV }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xbox_parbox_to_wd:nnn}
% \begin{macro}{\xbox_parbox_to_wd_and_ht:nnnnn}
% \begin{macro}{\@@_parbox_vcenter:n}
% \begin{macro}{\@@_parbox_vcenter_to_ht:nn}
% \begin{macro}{\@@_parbox_vcenter:nn}
%   We need to include the \LaTeXe{} command \tn{@parboxrestore} to get the
%   documented behavior of the galley.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_parbox_to_wd:nnn #1#2#3
  {
    \@@_via_internal_box:Nnn \vbox_set:Nn
      {
        \dim_set:Nn \tex_hsize:D {#1}
        \@parboxrestore
        #3
      }
      {
         \str_case:nnF {#2}
           {
             { b } { \vbox:n }
             { t } { \vbox_top:n }
           }
           { \@@_parbox_vcenter:n }
             { \vbox_unpack_drop:N \l_@@_internal_box }
      }
  }
\cs_new_protected:Npn \xbox_parbox_to_wd_and_ht:nnnnn #1#2#3#4#5
  {
    \@@_via_internal_box:Nnn \vbox_set:Nn
      {
        \dim_set:Nn \tex_hsize:D {#1}
        \@parboxrestore
        #5
      }
      {
         \str_case:nnF {#3}
           {
             { b } { \vbox_to_ht:nn }
             { t } { \vbox_top_to_ht:nn }
           }
           { \@@_parbox_vcenter_to_ht:nn }
             {#2}
             {
               \str_case:nnF {#4}
                 {
                   { b } { \xbox_position_bottom:n }
                   { c } { \xbox_position_vcenter:n }
                   { t } { \xbox_position_top:n }
                 }
                 { \use:n }
                   { \vbox_unpack_drop:N \l_@@_internal_box }
             }
      }
  }
%    \end{macrocode}
%   The aim here is to measure the effect of \tn{vcenter} without actually
%   placing our material in math mode. So we need to check on the appropriate
%   \tn{fontdimen} to find the math axis, then move material to fit. As
%   \LaTeXe{} holds off initialising the math fonts as long as possible, we
%   do have to force that here. The box nesting is needed to ensure we end up
%   with an outer vertical box. Question: should this go into \pkg{l3box}
%   as say \cs{vbox_center:n}? Or is that really crossing into coffin
%   territory (normally, centering is easy enough: the issue here is we don't
%   control the earlier material).
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parbox_vcenter:n #1
  { \@@_parbox_vcenter:nn { \vbox:n } {#1} }
\cs_new_protected:Npn \@@_parbox_vcenter_to_ht:nn #1#2
  { \@@_parbox_vcenter:nn { \vbox_to_ht:nn {#1} } {#2} }
\cs_new_protected:Npn \@@_parbox_vcenter:nn #1#2
  {
    #1
      {
        \hbox:n
          {
            \check@mathfonts
            \box_move_down:nn
              { 0.5 \height - \tex_fontdimen:D 22 ~ \tex_textfont:D 2 ~ }
              { #1  {#2} }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xbox_minipage_begin:n}
% \begin{macro}{\@@_minipage_begin:}
% \begin{macro}{\xbox_minipage_end:nn}
% \begin{macro}{\xbox_minipage_end:nnnn}
% \begin{macro}{\@@_minipage_end:}
%   Most of this is setup to hand over the the same internals as \cs{parbox}.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_minipage_begin:n #1
  {
    \vbox_set:Nw \l_@@_internal_box
      \dim_set:Nn \hsize {#1}
      \dim_set_eq:NN \textwidth \hsize
      \dim_set_eq:NN \columnwidth \hsize
      \@parboxrestore
      \@@_minipage_begin:
      \@minipagerestore
      \@setminipage
  }
\cs_new_protected:Npn \@@_minipage_begin:
  {
    \cs_set_nopar:Npn \@mpfn { mpfootnote }
    \cs_set_nopar:Npn \thempfn { \thempfootnote }
    \int_zero:N \c@mpfootnote
    \cs_set_eq:NN \@footnotetext \@mpfootnotetext
    \cs_set_eq:NN \@listdepth \@mplistdepth
    \int_zero:N \@mplistdepth
  }
\cs_new_protected:Npn \xbox_minipage_end:nn #1#2
  {
    \@@_minipage_end:
    \xbox_parbox_to_wd:nnn {#1} {#2}
      { \vbox_unpack_drop:N \l_@@_internal_box }
  }
\cs_new_protected:Npn \xbox_minipage_end:nnnn #1#2#3#4
  {
    \@@_minipage_end:
    \xbox_parbox_to_wd:nnnnn {#1} {#2} {#3} {#4}
      { \vbox_unpack_drop:N \l_@@_internal_box }
  }
\cs_new_protected:Npn \@@_minipage_end:
  {
      \par
      \tex_unskip:D
      \box_if_empty:NF \@mpfootins
        {
          \skip_vertical:n { \tex_skip:D \@mpfootins }
          \color_ensure_current:
          \footnoterule
          \box_unpack_drop:N \@mpfootins
        }
      \@minipagefalse
    \vbox_set_end:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xbox_raise:nn}
% \begin{macro}{\xbox_raise_with_ht:nnn}
% \begin{macro}{\xbox_raise_with_ht_and_dp:nnnn}
%   Raising a box.
%    \begin{macrocode}
\cs_new_protected:Npn \xbox_raise:nn #1#2
  {
    \xbox_raise_with_ht_and_dp:nnnn {#1} { \box_ht:N \l_@@_internal_box }
      { \box_dp:N \l_@@_internal_box } {#2}
  }
\cs_new_protected:Npn \xbox_raise_with_ht:nnn #1#2#3
  {
    \xbox_raise_with_ht_and_dp:nnnn {#1} {#2} { \box_dp:N \l_@@_internal_box } {#3}
  }
\cs_new_protected:Npn \xbox_raise_with_ht_and_dp:nnnn #1#2#3#4
  {
    \@@_via_internal_box:Nnn \hbox_set:Nn {#4}
      {
        \hbox_set:Nn \l_@@_internal_box
          { \box_move_up:nn {#1} { \box_use_drop:N \l_@@_internal_box } }
        \box_set_ht:Nn \l_@@_internal_box {#2}
        \box_set_dp:Nn \l_@@_internal_box {#3}
        \box_use_drop:N \l_@@_internal_box
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Additions to \pkg{l3box}}
%
%    \begin{macrocode}
%<@@=hbox>
%    \end{macrocode}
%
% \begin{variable}{\l_@@_internal_box}
%   Internal box used to typeset material for measuring up.
%    \begin{macrocode}
\box_new:N \l_@@_internal_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\hbox_frame:nnn, \hbox_frame:nVV}
% \begin{macro}{\@@_frame:nnn, \@@_frame:ffn}
%   Framing a box requires the depth is known, so there has to be an
%   assignment step first to allow this measurement. The evaluation step is
%   \enquote{front loaded} as the expressions are used a few times, so it
%   is easier to do them only once then have a clearer logic internally.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_frame:nnn #1#2#3
  { \@@_frame:ffn { \dim_eval:n {#2} } { \dim_eval:n {#3} } {#1} }
\cs_generate_variant:Nn \hbox_frame:nnn { nVV }
\cs_new_protected:Npn \@@_frame:nnn #1#2#3
  {
    \group_begin:
      \hbox_set:Nn \l_@@_internal_box {#3}
%    \end{macrocode}
%   The actual insertion is done such that the content goes in \enquote{behind}
%   the rules. That requires a bit of shuffling so that the final box is the
%   correct size, including the necessary border, while keeping the reference
%   point in the right place.
%    \begin{macrocode}
      \hbox:n
        {
          \kern_horizontal:n { #1 + #2 }
          \box_use:N \l_@@_internal_box
          \kern_horizontal:n { -\box_wd:N \l_@@_internal_box - #2 - #1 }
          \box_move_down:nn { \box_dp:N \l_@@_internal_box + #2 + #1 }
            {
              \vbox:n
                {
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \hbox:n
                    {
                      \rule_vertical:n {#1}
                      \kern_horizontal:n
                        { #2 * 2 + \box_wd:N \l_@@_internal_box }
                      \vbox:n
                        {
                          \kern_vertical:n
                            {
                                  #2 * 2
                              + \box_dp:N \l_@@_internal_box
                              + \box_ht:N \l_@@_internal_box
                            }
                        }
                       \rule_vertical:n {#1}
                    }
                   \rule_horizontal:nn {#1} { \c_zero_dim }
                }
            }
        }
    \group_end:
  }
\cs_generate_variant:Nn \@@_frame:nnn { ff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hbox_surround:nn}
% \begin{macro}{\@@_surround:nn, \@@_surround:fn}
%    Similar to framing a box, but here the rules are around the outside of
%    the bounding box. As such, there is a need to add skips to remove the
%    width of the rules. As with the framing case, the rules here are inserted
%    on top of the content.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_surround:nn #1#2
  { \@@_surround:fn { \dim_eval:n {#2} } {#1} }
\cs_new_protected:Npn \@@_surround:nn #1#2
  {
    \group_begin:
      \hbox_set:Nn \l_@@_internal_box {#2}
      \hbox:n
        {
          \box_use_drop:N \l__box_internal_box
          \kern_horizontal:n { -\box_wd:N \l_@@_internal_box - #1 }
          \box_move_down:nn { \box_dp:N \l_@@_internal_box }
            {
              \vbox:n
                {
                  \kern_vertical:n { -#1 }
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \hbox:n
                    {
                      \rule_vertical:n {#1}
                      \kern_horizontal:n { \box_wd:N \l_@@_internal_box }
                      \vbox:n
                        {
                          \kern_vertical:n
                            {
                                \box_dp:N \l_@@_internal_box
                              + \box_ht:N \l_@@_internal_box
                            }
                        }
                      \rule_vertical:n {#1}
                    }
                  \rule_horizontal:nn {#1} { \c_zero_dim }
                  \kern_vertical:n { -#1 }
                }
            }
          \kern_horizontal:n { -#1 }
        }
    \group_end:
  }
\cs_generate_variant:Nn \@@_surround:nn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hbox_underline:nnn}
% \begin{macro}{\@@_underline:nnn, \@@_underline:ffn}
%   Much like framing, but with only one line.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_underline:nnn #1#2#3
  { \@@_underline:ffn { \dim_eval:n {#2} } { \dim_eval:n {#3} } {#1} }
\cs_new_protected:Npn \@@_underline:nnn #1#2#3
  {
    \group_begin:
      \hbox_set:Nn \l_@@_internal_box {#3}
      \hbox:n
        {
          \box_use:N \l_@@_internal_box
          \kern_horizontal:n { -\box_wd:N \l_@@_internal_box }
          \box_move_down:nn { \box_dp:N \l_@@_internal_box + #2 + #1 }
            {
              \vbox:n
                {
                  \hbox:n
                    {
                      \kern_horizontal:n
                        { \box_wd:N \l_@@_internal_box }
                    }
                   \rule_horizontal:nn {#1} { \c_zero_dim }
                }
            }
        }
    \group_end:
  }
\cs_generate_variant:Nn \@@_underline:nnn { ff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hbox_line_left:n, \hbox_line_center:n, \hbox_line_right:n}
%   Necessary to implement the \cs{\ldots line} commands.
%    \begin{macrocode}
\cs_new_protected:Npn \hbox_line_left:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_center:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 \tex_hss:D } }
\cs_new_protected:Npn \hbox_line_right:n #1
  { \hbox_to_wd:nn { \tex_hsize:D } { \tex_hss:D #1 } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\vbox_top_to_ht:nn}
%   A simple addition: could also have the other missing \enquote{top} cases.
%    \begin{macrocode}
\cs_new_protected:Npn \vbox_top_to_ht:nn #1#2
  {
    \tex_vtop:D to \@@_dim_eval:n {#1}
      { \color_group_begin: #2 \par \color_group_end: }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Additions which may need a new module}
%
% Somewhere is needed for rules, kerns, leaders: where to put these?
%
% \begin{macro}{\kern_horizontal:n, \kern_vertical:n}
%   \TeX{} does not treat kerns differently in horizontal and vertical mode.
%   As we want skips and kerns to have similar behaviour, we try to get similar
%   results.
%    \begin{macrocode}
\cs_new_protected:Npn \kern_horizontal:n #1
  {
    \mode_leave_vertical:
    \__kernel_kern:n {#1}
  }
\cs_new_protected:Npn \kern_vertical:n #1
  {
    \mode_if_vertical:F
      { \par }
    \__kernel_kern:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rule:nnn}
% \begin{macro}{\rule_horizontal:nn}
% \begin{macro}{\rule_vertical:n}
%   Wrappers around the \TeX{} primitives for creating rules, with the usual
%   dimension expression support. The non-expanding rule is set up in
%   horizontal mode as that is usually the best plan. The \cs{scan_stop:}
%   is needed here as \TeX{} continues to scan for keywords: multiple uses
%   of the same word are permitted. (Thanks to Ruixi Zhang for pointing this
%   out.)
%    \begin{macrocode}
\cs_new_protected:Npn \rule:nnn #1#2#3
  {
    \tex_vrule:D
      height \dim_eval:n {#2} \exp_stop_f:
      depth  \dim_eval:n {#3} \exp_stop_f:
      width  \dim_eval:n {#1} \exp_stop_f:
      \scan_stop:
  }
\cs_new_protected:Npn \rule_horizontal:nn #1#2
  {
    \tex_hrule:D
      height \dim_eval:n {#1} \exp_stop_f:
      depth  \dim_eval:n {#2} \exp_stop_f:
      \scan_stop:
  }
\cs_new_protected:Npn \rule_vertical:n #1
  { \tex_vrule:D width \dim_eval:n {#1} \exp_stop_f: \scan_stop: }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Directly typesetting material in boxes}
%
% \begin{macro}{\mbox}
%   The basic horizontal box command for \LaTeX{}: simply box things up
%   as there is nothing complicated to do.
%    \begin{macrocode}
\RenewDocumentCommand \mbox { +m }
  {
    \mode_leave_vertical:
    \hbox:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\makebox}
%   Here there are two distinct syntaxes, which have to be handled separately.
%   The \LaTeXe{} version checks first for picture-style syntax, so if~|#2|
%   is present~|#1| is simply dropped entirely. Picture syntax is converted
%   into dimensions here before handing off to the internal code.
%    \begin{macrocode}
\RenewDocumentCommand \makebox
  { o > { \CoordsToLengths } d ( ) O { c } +m }
  {
    \mode_leave_vertical:
    \IfNoValueTF {#2}
      {
        \IfNoValueTF {#1}
          { \hbox:n {#4} }
          { \xbox_to_wd:nnn {#1} {#3} {#4} }
      }
      { \xbox_to_wd_and_ht:nnnn #2 {#3} {#4} }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\fboxsep, \fboxrule}
%   Allocated by the kernel so left unchanged here.
% \end{variable}
%
% \begin{macro}{\fbox}
%   Simply frame up material: no need to do anything complex.
%    \begin{macrocode}
\RenewDocumentCommand \fbox { +m }
  {
    \mode_leave_vertical:
    \hbox_frame:nVV {#1} \fboxrule \fboxsep
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\framebox}
%   Framing is more complex. The argument specification here is very similar
%   to \cs{makebox}, but the need to allow for the size of the frame,
%   \emph{etc.}~in the natural width means it's much easier to do a simple
%   test for \texttt{-NoValue-} here. Thus with no optional arguments this
%   command does exactly the same as \cs{fbox}.
%    \begin{macrocode}
\RenewDocumentCommand \framebox
  { o > { \CoordsToLengths } d ( ) O { c } +m }
  {
    \mode_leave_vertical:
    \IfNoValueTF {#2}
      {
        \IfNoValueTF {#1}
          { \hbox_frame:nnn {#4} \fboxrule \fboxsep }
          { \xbox_frame_to_wd:nnnVV {#1} {#3} {#4} \fboxrule \fboxsep }
      }
      {
        \xbox_frame_to_wd_and_ht:nnnnnn #2 {#3} {#4}
          { \@wholewidth } { 0pt }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{minipage}
%   The environment form of \cs{parbox}: we get to show off \pkg{ltcmd}'s
%   ability to use arguments at the end of an environment.
%    \begin{macrocode}
\RenewDocumentEnvironment { minipage } { O { c } o O {#1} m }
  {
    \mode_leave_vertical:
    \xbox_minipage_begin:n {#4}
  }
  {
    \IfNoValueTF {#2}
      { \xbox_minipage_end:nn {#4} {#1} }
      { \xbox_minipage_end:nnnn {#4} {#2} {#1} {#3} }
  }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\parbox}
%   At this level, a \cs{parbox} is quite easy to handle.
%    \begin{macrocode}
\RenewDocumentCommand \parbox { O { c } o O {#1} m +m }
  {
    \mode_leave_vertical:
     \IfNoValueTF {#2}
       { \xbox_parbox_to_wd:nnn {#4} {#1} {#5} }
       { \xbox_parbox_to_wd_and_ht:nnnnn {#4} {#2} {#1} {#3} {#5} }

  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\raisebox}
%   Here, handling the standard values for the two optional arguments  is done
%   one by one. This avoids needing to have detail of the implementation in
%   the user interface.
%    \begin{macrocode}
\RenewDocumentCommand \raisebox { m o o +m }
  {
    \mode_leave_vertical:
    \IfNoValueTF {#2}
      { \xbox_raise:nn {#1} {#4} }
      {
        \IfNoValueTF {#3}
          { \xbox_raise_with_ht:nnn {#1} {#2} {#4} }
          { \xbox_raise_with_ht_and_dp:nnnn {#1} {#2} {#3} {#4} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\underline}
%   In text mode, this is like \cs{framebox}, in math mode there is a
%   primitive (which ideally needs a new name).
%    \begin{macrocode}
\RenewDocumentCommand \underline { m }
  {
    \mode_leave_vertical:
    \mode_if_math:TF
      { \tex_underline:D {#1} }
      {
        \check@mathfonts
        \hbox_underline:nnn {#1}
          {   \tex_fontdimen:D 8 ~ \tex_textfont:D 3 ~ }
          { 3 \tex_fontdimen:D 8 ~ \tex_textfont:D 3 ~ }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Storing boxed material}
%
% \begin{macro}{\newsavebox}
%   Allocate a new \enquote{savebox}.
%    \begin{macrocode}
\RenewDocumentCommand \newsavebox { m } { \coffin_new:N #1 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sbox}
%   Save |#2| in a coffin: like \cs{mbox}, no messing about.
%    \begin{macrocode}
\RenewDocumentCommand \sbox { m +m } { \hcoffin_set:Nn #1 {#2} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\savebox}
%   This is the same idea as for \cs{makebox} but saved in a coffin.
%   Does that mean we should have some more \enquote{complete} code-level
%   functionality here? Alternatively, one could consider using the
%   \verb*|makebox code| function defined by \pkg{ltcmd} inside the coffin
%   setting. Question: should the syntax processing (\cs{IFNoValueTF} test)
%   take place inside or outside of the coffin setting stage?
%    \begin{macrocode}
\RenewDocumentCommand \savebox
  { m o > { \CoordsToLengths } d ( ) O { c } +m }
  {
    \IfNoValueTF {#3}
      {
        \IfNoValueTF {#2}
          { \hcoffin_set:Nn #1 {#5} }
          { \hcoffin_set:Nn #1 { \xbox_to_wd:nnn {#2} {#4} {#5} }
      }
      }
      {
        \hcoffin_set:Nn #1
          { \xbox_to_wd_and_ht:nnnn #3 {#4} {#5} }
      }
   }
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{lrbox}
%   With the new hook system, an \texttt{lrbox} is trivial to create. The only
%   requirement is we put the hook change at the end of the environment to cover
%   the case where there is nesting.
%    \begin{macrocode}
\cs_if_exist:NT \AddToHook
  {
    \RenewDocumentEnvironment { lrbox } { m }
      {
        \hbox_gset:Nw \g_xbox_lr_box
          \@endpefalse
          \tex_ignorespaces:D
      }
      {
          \tex_unskip:D
        \hbox_gset_end:
        \AddToHookNext { env/lrbox/after }
          { \hcoffin_set:Nn #1 { \hbox_unpack_drop:N \g_xbox_lr_box } }
      }
  }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\usebox}
%   Simply output the underlying coffin at the \TeX{} reference point:
%   done using the box syntax for speed (should this be done using
%   \cs{coffin_typeset:Nnnnn}?).
%    \begin{macrocode}
\RenewDocumentCommand \usebox { m }
  {
    \mode_leave_vertical:
    \box_use:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Functions not directly related to boxes}
%
% \begin{macro}{\rule}
%   Simple conversion.
%    \begin{macrocode}
\RenewDocumentCommand \rule { O { 0pt } m m }
  {
    \mode_leave_vertical:
    \hbox:n { \rule:nnn {#2} { #3 + #1 } { -#1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Plain \TeX{} commands}
%
% These are inherited from plain \TeX{}, and are therefore potentially
% to be removed.
%
% \begin{macro}{\clap, \llap, \rlap}
%   These macros place text to the left or right of the current reference point
%   without taking up space. Unlike the plain \TeX{} versions, these correctly
%   leave vertical mode.
%    \begin{macrocode}
\NewDocumentCommand \clap { m }
  {
    \mode_leave_vertical:
    \hbox_overlap_center:n  {#1}
  }
\RenewDocumentCommand \llap { m }
  {
    \mode_leave_vertical:
    \hbox_overlap_left:n  {#1}
  }
\RenewDocumentCommand \rlap { m }
  {
    \mode_leave_vertical:
    \hbox_overlap_right:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\leftline, \centerline, \rightline}
%   These macros place text on a full line either centered or left or right
%   adjusted.
%    \begin{macrocode}
\RenewDocumentCommand \leftline   { m } { \hbox_line_left:n   {#1} }
\RenewDocumentCommand \centerline { m } { \hbox_line_center:n {#1} }
\RenewDocumentCommand \rightline  { m } { \hbox_line_right:n  {#1} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_new:nnnn { xbox } { missing-coordinate-pair }
  { Missing~co-ordinate~pair~in~picture-mode~argument. }
  {
    A~picture-mode~co-ordinate~was~given,~but~LaTeX~could~not~
    find~a~comma~separating~the~two~values.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
