% \iffalse
%%
%% File l3build.dtx (C) Copyright 2014 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "l3build bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver>
\RequirePackage{expl3}
\GetIdInfo$Id$
  {L3 Regression test suite}
\documentclass[full]{l3doc}
\usepackage{amsmath}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi

% \title{^^A
%   The \pkg{l3build} package\\ Checking and building packages^^A
%   \thanks{This file describes v\ExplFileVersion,
%      last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3build} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Unlike in the \LaTeXe{} tests, reset catcodes: each test should set these
% as appropriate.
%    \begin{macrocode}
\expandafter\edef\csname\detokenize{reset@catcodes}\endcsname{%
  \catcode`\noexpand\@=\the\catcode`\@\relax
}
\catcode`\@=11 %
%    \end{macrocode}
% Put \TeX{} into scroll mode, and stop it showing the
% implementation details of macros in error messages.
%    \begin{macrocode}
\scrollmode
\errorcontextlines=-1 %
%    \end{macrocode}
% 
% Show all box details: this avoids getting variable results if boxes
% have different numbers of lines (\LuaTeX{} adds extra information).
%    \begin{macrocode}
\showboxbreadth=\maxdimen
\showboxdepth=\maxdimen
%    \end{macrocode}
%
% A long version of |\typeout|, because tests may contain |\par| tokens.
% Besides, with that |\TYPE|, we can do |\TYPE { ... \TRUE ... \NEWLINE ... }|.
%    \begin{macrocode}
\long\def\LONGTYPEOUT#1{%
  \begingroup
    \long\def\TYPE##1{##1}%
    \immediate \write 17 {#1}%
  \endgroup
}
\let\TYPE\LONGTYPEOUT
%    \end{macrocode}
%    
%    \begin{macrocode}
\newlinechar=`\^^J
%    \end{macrocode}   
%
% Start the test, after the optional |\documentclass|
% |\begin{document}| commands with |\START|.  All lines in the |.log| file
% before this will be ignored. It also prints a DocStrip-style
% character table in the |.tlg| file.
%    \begin{macrocode}
\def\START{\LONGTYPEOUT{START-TEST-LOG^^J^^J%
   This is a generated file for the LaTeX (l3build) validation system.%
^^J^^JDon't change this file in any respect.%
^^J^^J\CTable^^J}}
\begingroup
\catcode`\^^\=0
\catcode`\^^A=\catcode`\%
^^\catcode`^^\ =11
^^\catcode`^^\%=11
^^\catcode`^^\#=11
^^\catcode`^^\~=11
^^\endlinechar=`^^\^^J
^^\catcode`^^\\=11^^A
^^\gdef^^\CTable{
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
}^^A
^^\endgroup{}%
%    \end{macrocode}
% The test should end with
% |\END| or |\end{document}|
%    \begin{macrocode}
\ifx\@@end\@undefined
  \let\@@@end\end
\else
  \let\@@@end\@@end
\fi
\def\END
  {%
    \ifnum\currentgrouplevel>0 %
      \LONGTYPEOUT{Bad grouping: \the\currentgrouplevel!}%
    \fi
    \ifnum\currentiflevel>1 %
      \LONGTYPEOUT{Bad conditionals: \the\numexpr\currentiflevel-1!}%
    \fi
    \LONGTYPEOUT{END-TEST-LOG}\@@@end
  }
\let\@@end\END
%    \end{macrocode}
% After the |\START| should come declarations of the format and style
% options being used.
%    \begin{macrocode}
\def\FORMAT#1{\LONGTYPEOUT{Format: #1}%
  \def\@tempa{#1}\ifx\@tempa\@EJ\else
   \OMIT\TYPE{WARNING: Declared format #1,^^JActual format \@EJ}\TIMO\fi}
%    \end{macrocode}
% The old version got this information from everyjob,
% but that does not work with \LaTeXe\ as |\everyjob| is cleared.
%    \begin{macrocode}
\edef\@EJ{\fmtname <\fmtversion>}
%    \end{macrocode}
% Some author info:
%    \begin{macrocode}
\def\AUTHOR#1{\LONGTYPEOUT{Author: #1}}
%    \end{macrocode}
% Surround commands which produce irrelevant lines in the .log file by
% |\OMIT|\dots
% |\TIMO|
%    \begin{macrocode}
\def\OMIT{\LONGTYPEOUT{OMIT}}
\def\TIMO{\LONGTYPEOUT{TIMO}}
%    \end{macrocode}
% After the above declarations, and before the main tests, you may
% optionally `declare' all the commands in the `module' that you are
% about to test. These commands will be registered as defined,
% undefined or relaxed (ie |\let| to |\relax|). You may wish to declare
% commands not currently implemented, so that if they are added at a
% later stage, the test will fail, reminding someone to document the
% fact that the user interface has changed. So if you are testing
% array and tabular environments, you may wish do declare
% |\extrarowheight|. This is undefined in the curent latex, but would
% become defined if Mittelbach's |array.sty| was incorporated into
% |latex.tex|.
%    \begin{macrocode}
\def\CHECKCOMMAND#1{%
  \ifx#1\@undefined\LONGTYPEOUT{Undefined \string#1}\else
  \ifx#1\relax\LONGTYPEOUT{Relaxed \space\space\string#1}\else
         \LONGTYPEOUT{Defined \space\space\string#1}\fi\fi}
%    \end{macrocode}
% To allow testing of possible changes, we allow extra code to be read
% in before the test starts. The necessary code should be placed in a
% file |regression-test.cfg|.
%
% [Re-implement this in plain if necessary.]
%    \begin{macrocode}
\OMIT
%\InputIfFileExists{regression-test.cfg}
%      {\LONGTYPEOUT{^^J***^^Jregression-test.cfg in operation^^J***^^J}}{}
\TIMO
%    \end{macrocode}
% \subsection{Formatting the \texttt{.log} file}
% We are not starved for space in the log file output, so let's make it as
% verbose as is useful when reading the |.diff|'s.
%    \begin{macrocode}
\newcount \gTESTint

\def\SEPARATOR{%
  \TYPE{%
    ============================================================%
  }%
}
%    \end{macrocode}
%    \begin{macrocode}
\long\def\TEST#1#2{%
  \advance \gTESTint 1 %
  \SEPARATOR
  \LONGTYPEOUT{%
    TEST \the\gTESTint: \detokenize{#1}}%
  \SEPARATOR
  \begingroup
    \let\TYPE\LONGTYPEOUT
    #2%
  \endgroup
  \SEPARATOR \LONGTYPEOUT{}%
}

\long\def\TESTEXP#1#2{%
  \advance \gTESTint 1 %
  \SEPARATOR
  \LONGTYPEOUT{%
    TEST \the\gTESTint: \detokenize{#1}}%
  \SEPARATOR
  \begingroup
    \long\def\TYPE##1{##1}%
    \LONGTYPEOUT{#2}%
  \endgroup
  \SEPARATOR
  \LONGTYPEOUT{}%
}

\def \TRUE  {\TYPE{TRUE}}
\def \FALSE {\TYPE{FALSE}}
\def \YES   {\TYPE{YES}}
\def \NO    {\TYPE{NO}}

\def \NEWLINE {\TYPE{^^J}}
%    \end{macrocode}
% Load the |etex| package: we always need the extended pool and this puts the
% loading in one place. (Ideally the \LaTeXe\ kernel would sort this out for
% us!)
%    \begin{macrocode}
\ifx\RequirePackage\@undefined\else
  \OMIT
  \RequirePackage{etex}
  \TIMO
\fi
%    \end{macrocode}
% We allocate a large number of registers now: this number
% can be changed to keep register numbers stable in test logs.
%    \begin{macrocode}
\newcount\regression@test@loop@int
\long\def\regression@test@alloc#1#2{%
  \regression@test@loop@int=\numexpr#1\relax
  \regression@test@loop#2%
}
\long\def\regression@test@loop#1{%
  \ifnum 0<\regression@test@loop@int
    #1\regression@test@dummy
    \advance\regression@test@loop@int by -1\relax
    \expandafter\regression@test@loop
    \expandafter#1%
  \fi
}
\ifx\RequirePackage\@undefined
  \expandafter\def\expandafter\newcount\expandafter{\newcount}
  \expandafter\def\expandafter\newbox\expandafter{\newbox}
  \expandafter\def\expandafter\newdimen\expandafter{\newdimen}
  \expandafter\def\expandafter\newmuskip\expandafter{\newmuskip}
  \expandafter\def\expandafter\newskip\expandafter{\newskip}
\fi
\regression@test@alloc {30} \newcount
\regression@test@alloc {30} \newbox
\regression@test@alloc {30} \newdimen
\regression@test@alloc {30} \newmuskip
\regression@test@alloc {30} \newskip
% \regression@test@alloc {30} \newtoks
%    \end{macrocode}
%    \begin{macrocode}
\reset@catcodes
\endinput
%    \end{macrocode}
% 
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex


