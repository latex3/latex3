%
% Copyright (C) The LaTeX Project
%

\documentclass{minimal}
\input{regression-test}


\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation , log-functions }
\ExplSyntaxOff


\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { new_linked }
  {
    {
      \prop_new_linked:N \l_a_prop
      \prop_new_linked:c {g_b_prop}
    }
    \prop_log:N \l_a_prop
    \prop_log:c {g_b_prop}
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { clear }
  {
    \prop_put:Nnn \l_a_prop {tmp} { test~l \par }
    \prop_gput:Nnn \g_b_prop {tmp} { test~g \par }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    {
      \prop_clear:N  \l_a_prop
      \prop_gclear:N \g_b_prop
      \prop_log:N \l_a_prop
      \prop_log:N \g_b_prop
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { clear_new_linked }
  {
    \prop_put:Nnn \l_a_prop {tmp} { test~l \par }
    \prop_gput:Nnn \g_b_prop {tmp} { test~g \par }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    {
      \prop_clear_new:N  \l_a_prop
      \prop_gclear_new_linked:N \g_b_prop
      \prop_clear_new_linked:N \l_cc_prop
      \prop_gclear_new_linked:N \g_dd_prop
      \prop_log:N \l_a_prop
      \prop_log:N \g_b_prop
      \prop_log:N \l_cc_prop
      \prop_log:N \g_dd_prop
      \prop_put:Nnn \l_cc_prop { } { cc }
      \prop_gput:Nnn \g_dd_prop { } { dd }
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    \prop_log:N \l_cc_prop
    \prop_log:N \g_dd_prop
  }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\prop_gclear:N \g_b_prop
\prop_gput:Nnn \g_b_prop { test } { test~b \par }
\prop_new_linked:N \g_d_prop
\TIMO

\TEST { set_eq }
  {
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    {
      \prop_set_eq:NN  \l_a_prop \g_b_prop
      \prop_log:N \l_a_prop
      \prop_gset_eq:cc { g_d_prop } { g_b_prop }
      \prop_log:N \g_d_prop
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_d_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { put }
  {
    \prop_clear:N  \l_a_prop
    \prop_gclear:N \g_b_prop
    {
      \prop_put:Nnn  \l_a_prop { } { test~empty\par }
      \prop_gput:Nnn \g_b_prop { } { test~empty\par }
      \prop_put:Nnn  \l_a_prop {tmp} { test~l \par }
      \prop_gput:Nnn \g_b_prop {tmp} { test~g \par }
      \prop_put:Nnn  \l_a_prop {tmp\par} { test~l }
      \prop_gput:Nnn \g_b_prop {tmp\par} { test~g }
      \prop_log:N \l_a_prop
      \prop_log:N \g_b_prop
      \prop_put:cnn  {l_a_prop} {tmp} { test~l~csname \par }
      \prop_log:N \l_a_prop
      \prop_log:N \g_b_prop
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { put_if_not_in }
  {
    \prop_gclear:N \g_b_prop
    \prop_gput_if_not_in:Nnn \g_b_prop { test } { test~a \par }
    \prop_log:N \g_b_prop
    \prop_gput:Nnn        \g_b_prop { test } { test~b \par }
    \prop_log:N \g_b_prop
    \prop_gput_if_not_in:Nnn \g_b_prop { test } { test~c \par }
    \prop_log:N \g_b_prop
    \prop_clear:N \l_a_prop
    \prop_put_if_not_in:Nnn \l_a_prop { test } { test~a \par }
    \prop_log:N \l_a_prop
    {
      \prop_put:Nnn        \l_a_prop { test } { test~b \par }
      \prop_log:N \l_a_prop
      \prop_put_if_not_in:Nnn \l_a_prop { test } { test~c \par }
      \prop_log:N \l_a_prop
      \prop_put_if_not_in:Nnn \l_a_prop { test~d } { test~d \par }
      \prop_log:N \l_a_prop
    }
    \prop_log:N \l_a_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
\tl_clear:N \l_tmpa_tl
\tl_clear:N \l_tmpb_tl
\TIMO

\TEST { get }
  {
    \prop_clear:N \l_a_prop
    \prop_put:Nnn \l_a_prop {tmpa} { # test~a \par }
    {
      \prop_get:coN { l_a_prop } { \use:n {t} mpa } \l_tmpa_tl
      \TYPE { \cs_meaning:N \l_tmpa_tl }
    }
    \TYPE { \cs_meaning:N \l_tmpa_tl }
    \prop_put:Nnn \l_a_prop { } { # test~empty \par }
    \prop_get:NVN \l_a_prop \c_empty_tl \l_tmpa_tl
    \TYPE { \cs_meaning:N \l_tmpa_tl }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tl_clear:N \l_tmpa_tl

\TEST { pop }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn  \l_a_prop { } { # test~empty \par }
    \prop_put:Nnn  \l_a_prop {tmpa} { # test~a \par }
    \prop_put:Nnn  \l_a_prop {tmpb} { # test~b \par }
    \prop_log:N \l_a_prop
    \prop_gclear:N  \g_b_prop
    \prop_gput:Nnn  \g_b_prop { } { # test~empty \par }
    \prop_gput:Nnn  \g_b_prop {tmpa} { # test~a \par }
    \prop_gput:Nnn  \g_b_prop {tmpb} { # test~b \par }
    \prop_log:N \g_b_prop
    {
      \prop_pop:NnN  \l_a_prop {tmpa} \l_tmpa_tl
      \TYPE { \cs_meaning:N \l_tmpa_tl }
      \prop_gpop:cnN  { g_b_prop } {tmpa} \l_tmpa_tl
      \TYPE { \cs_meaning:N \l_tmpa_tl }
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { remove }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn  \l_a_prop {tmpa} { # test~l~a \par }
    \prop_put:Nnn  \l_a_prop {tmpb} { # test~l~b \par }
    \prop_gclear:N  \g_b_prop
    \prop_gput:Nnn  \g_b_prop {tmpa} { # test~g~a \par }
    \prop_gput:Nnn  \g_b_prop {tmpb} { # test~g~b \par }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    {
      \prop_remove:Nn  \l_a_prop {tmpa}
      \prop_gremove:Nn \g_b_prop {tmpa}
      \prop_log:N \l_a_prop
      \prop_log:N \g_b_prop
    }
    \prop_log:N \l_a_prop
    \prop_log:N \g_b_prop
    \SEPARATOR
    \prop_gremove:Nn \g_b_prop {tmpa}
    \prop_gremove:Nn \g_b_prop {tmpa}
    \prop_gremove:Nn \g_b_prop {tmpa}
    \prop_log:N \g_b_prop
  }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { if_empty ~ ( expect ~ T/F/F ) }
  {
    \prop_clear:N  \l_a_prop
    \prop_if_empty:NTF \l_a_prop {\TRUE} {\ERROR}
    \prop_put:Nnn \l_a_prop {} {}
    \prop_if_empty:NTF \l_a_prop {\TRUE} {\FALSE}
    \prop_put:Nnn \l_a_prop {abc} {}
    \prop_if_empty:NTF \l_a_prop {\ERROR} {\FALSE}
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { if_in~(expect~T/T/T/F/F) }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop { } {test}
    \prop_put:Nnn \l_a_prop {a} {testa}
    \prop_put:Nnn \l_a_prop {b} {testb}
    \prop_put:Nnn \l_a_prop {d} {test}
    \prop_if_in:NnTF \l_a_prop { }    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {a}    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {b}    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {c}    {\ERROR} {\FALSE}
    \prop_if_in:NnTF \l_a_prop {test} {\ERROR} {\FALSE}
    \SEPARATOR
    \cs_set_nopar:Npn \a {a}
    \cs_set_nopar:Npn \b {a}
    \cs_set_nopar:Npn \c {c}
    \cs_set_nopar:Npn \d {test}
    \prop_if_in:NVT \l_a_prop \c_empty_tl {\TRUE}
    \prop_if_in:NVT \l_a_prop \a {\TRUE}
    \prop_if_in:NVT \l_a_prop \b {\TRUE}
    \prop_if_in:NVF \l_a_prop \c {\FALSE}
    \prop_if_in:NVF \l_a_prop \d {\FALSE}
    \SEPARATOR
    \cs_set_nopar:Npn \a {a}
    \cs_set_nopar:Npn \b {a}
    \cs_set_nopar:Npn \c {c}
    \cs_set_nopar:Npn \d {test}
    \prop_if_in:NoT \l_a_prop \c_empty_tl {\TRUE}
    \prop_if_in:NoT \l_a_prop {\a} {\TRUE}
    \prop_if_in:NoT \l_a_prop {\b} {\TRUE}
    \prop_if_in:NoF \l_a_prop {\c} {\FALSE}
    \prop_if_in:NoF \l_a_prop {\d} {\FALSE}
    \SEPARATOR
    \prop_put:Nnn \l_a_prop { } {test}
    \prop_put:Nnn \l_a_prop {a} {testa}
    \prop_put:Nnn \l_a_prop {b} {testb}
    \prop_put:Nnn \l_a_prop {d} {test}
    \prop_if_in:cnTF {l_a_prop} { }    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {a}    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {b}    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {c}    {\ERROR} {\FALSE}
    \prop_if_in:cnTF {l_a_prop} {test} {\ERROR} {\FALSE}
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_function }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \cs_set:Npn \test:nn #1#2
      { \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < } }
    \prop_map_function:NN \l_a_prop \test:nn
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
\prop_clear:N  \l_a_prop
\prop_put:Nnn \l_a_prop { a } { testa }
\prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
\prop_put:Nnn \l_a_prop { b } { testb }
\cs_set:Npn \test:nn #1 #2
  { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < \NEWLINE }
\TIMO

\TESTEXP { map_function ~ (EXP) }
  { \prop_map_function:NN \l_a_prop \test:nn }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_inline }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \prop_map_inline:Nn \l_a_prop
      { \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < } }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_break }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \prop_put:Nnn \l_a_prop { c } { # testc \par }
    \prop_put:Nnn \l_a_prop { d } { # testd \par }
    \prop_map_inline:Nn \l_a_prop
      {
        \str_if_eq:nnT {#1}{c}
          { \prop_map_break: }
        \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < }
      }
    \prop_map_inline:Nn \l_a_prop
      {
        \str_if_eq:nnT {#1}{b}
          { \prop_map_break:n { \TYPE { \tl_to_str:n {#2} } } }
        \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < }
      }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {   } { # test  \par }
  \prop_put:Nnn \l_a_prop { aa } { # testa \par }
  \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
  \prop_put:Nnn \l_a_prop { bb } { # testb \par }
  \prop_put:Nnn \l_a_prop { cc } { # testc \par }
  \prop_put:Nnn \l_a_prop { dd } { # testd \par }
  \cs_set:Npn \test:nn #1 #2
    { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < \NEWLINE }
\TIMO
\TESTEXP { map_tokens }
  { \prop_map_tokens:Nn \l_a_prop { \prg_break_point: \test:nn } }
% \prg_break_point: is just there to check the user code is wrapped in \use:n or similar

\TESTEXP { item }
  {
    | \prop_item:Nn \l_a_prop { aa } | \NEWLINE
    | \prop_item:Nn \l_a_prop { bb } | \NEWLINE
    | \prop_item:Nn \l_a_prop { xx } |
  }

\TESTEXP { count }
  { \prop_count:N \l_a_prop | \prop_count:N \c_empty_prop }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { prop_if_exist }
  {
    \prop_if_exist:NTF \l_a_prop { \TRUE  } { \ERROR }
    \prop_if_exist:NTF \g_b_prop { \TRUE  } { \ERROR }
    \prop_if_exist:NTF \l_c_prop { \ERROR } { \FALSE }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\prop_clear:N \l_a_prop
\prop_put:Nnn \l_a_prop { } { a }
\prop_put:Nnn \l_a_prop { a } { aa }
\prop_put:Nnn \l_a_prop { aa } { aaa }
\prop_put:Nnn \l_a_prop { 1 } { 2 }
\prop_put:Nnn \l_a_prop { 2 } { 3 }
\TIMO

\TEST { prop_get:NnNTF }
  {
    \tl_clear:N \l_tmpa_tl
    {
      \prop_get:NnNTF \l_a_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_get:NnNTF \l_a_prop { 3 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_get:NnNTF \l_a_prop { } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_get:NnNTF \l_a_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
    }
    \TYPE { \cs_meaning:N \l_tmpa_tl }
    \prop_log:N \l_a_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { prop_pop:NnNTF }
  {
    \tl_clear:N \l_tmpa_tl
    {
      \prop_pop:NnNTF \l_a_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_pop:NnNTF \l_a_prop { 3 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_pop:NnNTF \l_a_prop { } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_pop:NnNTF \l_a_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
    }
    \TYPE { \cs_meaning:N \l_tmpa_tl }
    \prop_log:N \l_a_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\prop_gclear:N \g_b_prop
\prop_gput:Nnn \g_b_prop { } { a }
\prop_gput:Nnn \g_b_prop { a } { aa }
\prop_gput:Nnn \g_b_prop { aa } { aaa }
\prop_gput:Nnn \g_b_prop { 1 } { 2 }
\prop_gput:Nnn \g_b_prop { 2 } { 3 }
\TIMO

\TEST { prop_gpop:NnNTF }
  {
    \tl_clear:N \l_tmpa_tl
    {
      \prop_gpop:NnNTF \g_b_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_gpop:NnNTF \g_b_prop { 3 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_gpop:NnNTF \g_b_prop { } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
      \prop_gpop:NnNTF \g_b_prop { 2 } \l_tmpa_tl
        { \TYPE { \TRUE  : ~ \cs_meaning:N \l_tmpa_tl } }
        { \TYPE { \FALSE : ~ \cs_meaning:N \l_tmpa_tl } }
    }
    \TYPE { \cs_meaning:N \l_tmpa_tl }
    \prop_log:N \g_b_prop
  }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { prop~from_keyval }
  {
    \prop_set_from_keyval:Nn \l_a_prop
      { \a = b , ~ \c ~ = ~ { ~ \d = e ~ } , , = , { = } = , ~ { } ~ = { , } , }
    \prop_log:N \l_a_prop
    \prop_gset_from_keyval:Nn \g_b_prop
      { \a = b , ~ \c ~ = ~ { ~ \d = e ~ } , , = , { = } = , ~ { } ~ = { , } , }
    \prop_log:N \g_b_prop
    \prop_const_linked_from_keyval:Nn \c_A_prop
      { \a = b , ~ \c ~ = ~ { ~ \d = e ~ } , , = , { = } = , ~ { } ~ = { , } , ~ {\a} = Z }
    \prop_log:N \c_A_prop
  }

\TEST { prop~from_keyval~invalid }
  {
    \prop_set_from_keyval:Nn \l_a_prop
      { { = } , a = = b , { } , = = }
    \prop_log:N \l_a_prop
    \prop_gset_from_keyval:Nn \g_b_prop
      { { = } , a = = b , { } , = = }
    \prop_log:N \g_b_prop
    \prop_const_linked_from_keyval:Nn \c_B_prop
      { { = } , a = = b , { } , = = }
    \prop_log:N \c_B_prop
  }

\TEST { prop_concat }
  {
    \prop_set_from_keyval:Nn \l_a_prop
      { \a = b , ~ \c ~ = ~ { ~ \d = e ~ } , , = , { = } = , ~ { } ~ = { , } , }
    \prop_set_eq:NN \l_tmpb_prop \l_a_prop
    \prop_concat:NNN \l_a_prop \l_a_prop \l_a_prop
    \exp_args:Nff \tl_if_eq:nnTF \l_a_prop \l_tmpb_prop { \TRUE } { \ERROR }
    %
    \prop_gset_from_keyval:Nn \g_b_prop
      { x = y , , \a = c , ~ \c ~ = ~ { ~ \D = E ~ } , , = ? , }
    \prop_gconcat:ccc { g_b_prop } { l_a_prop } { g_b_prop }
    \prop_log:N \g_b_prop
    \prop_concat:NNN \l_tmpa_prop \g_b_prop \c_empty_prop
    \prop_log:N \l_tmpa_prop
    \prop_set_from_keyval:Nn \l_tmpa_prop { \a = Z , x = Z }
    \prop_concat:NNN \l_tmpb_prop \g_b_prop \l_tmpa_prop
    \prop_concat:NNN \l_a_prop \g_b_prop \l_tmpa_prop
    \prop_log:N \l_tmpb_prop
    \prop_log:N \l_a_prop
  }

\TEST { prop_put_from_keyval }
  {
    \prop_clear:N \l_a_prop
    \group_begin:
      \prop_gset_from_keyval:Nn \g_b_prop
        { = , \a = b , ~ {\a} ~ = c , ~ \c ~ = ~ { ~ \d = e ~ } }
      \prop_gput_from_keyval:cn { g_b_prop }
        { {~\a} = ~ c ~ , \c = ~ { }~ , ~ {\c} = {=} }
      \prop_set_from_keyval:Nn \l_a_prop
        { = , \a = b , ~ {\a} ~ = c , ~ \c ~ = ~ { ~ \d = e ~ } }
      \prop_put_from_keyval:cn { l_a_prop }
        { {~\a} = ~ c ~ , \c = ~ { }~ , ~ {\c} = {=} }
      \exp_args:Nff \tl_if_eq:nnTF \l_a_prop \g_b_prop { \TRUE } { \ERROR }
    \group_end:
    \prop_log:N \g_b_prop
    \prop_log:N \l_a_prop
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
\prop_new_linked:N \l_test_prop
\prop_set_from_keyval:Nn \l_test_prop
  { a = b, b = {{abc}}, c = {#1}, d = {a,b,c}, e = {a=b}, f = \tex_cr:D, &=& }
\cs_generate_variant:Nn \tl_analysis_show:n { e }
\cs_generate_variant:Nn \tl_analysis_show:n { o }
\box_new:N \l_test_box
\TIMO

\TEST { prop~to~keyval~expansion }
  {
    \tl_analysis_show:e { \prop_to_keyval:N \l_test_prop }
    \exp_args:No \tl_analysis_show:o { \prop_to_keyval:N \l_test_prop }
  }

\TEST { prop~to~keyval~in~halign }
  {
    \vbox_set:Nn \l_test_box
      {
        \tex_halign:D { \TYPE{0} # \TYPE{1} & \ERROR # \tex_cr:D
          \exp_after:wN \exp_after:wN \exp_after:wN
          \use_none_delimit_by_q_stop:w
            \prop_to_keyval:N \l_test_prop
          \q_stop
          \tex_cr:D }
      }
  }

\TEST { prop_set_eq~same~prop }
  {
    \prop_set_from_keyval:Nn \l_a_prop { a = b , c = d }
    \prop_set_eq:NN \l_a_prop \l_a_prop
    \prop_show:N \l_a_prop
  }

\TEST { prop_make~fails~in~group }
  {
    \prop_make_linked:N \l_a_prop
    \prop_make_flat:N \l_a_prop
    \prop_show:N \l_a_prop
  }
\prop_make_linked:N \l_a_prop
\prop_show:N \l_a_prop
\prop_make_flat:N \l_a_prop
\prop_show:N \l_a_prop

\prop_gset_from_keyval:Nn \g_tmpa_prop { \a = # , # = { { } } }
\prop_show:N \g_tmpa_prop
\prop_make_linked:N \g_tmpa_prop
\prop_gput_from_keyval:Nn \g_tmpa_prop { \a = \b , c# = #c }
\prop_show:N \g_tmpa_prop
\prop_make_flat:N \g_tmpa_prop
\prop_show:N \g_tmpa_prop

\END

