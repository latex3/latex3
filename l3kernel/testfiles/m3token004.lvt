%
% Copyright (C) 2011-2012 The LaTeX Project
%

\documentclass{minimal}
\input{regression-test}

\RequirePackage[check-declarations,log-functions]{expl3}

\begin{document}
\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn


\OMIT
% The idea is to (ab)use \pkg{l3names.sty} for this test, since it has a
% list of all primitives. I will add tests with non-primitives later.
% We redefine \cs{__expl_primitive:NN} to test if both of its arguments
% are primitives. If one isn't then its name is printed to the terminal.
%
\cs_new:Npn \test_T:N #1
  {
    \if_meaning:w \tex_undefined:D #1
      \exp_after:wN \use_none:n
    \else:
      \exp_after:wN \use:n
    \fi:
    {
      \token_if_primitive:NF #1
        { \message { \cs_to_str:N #1 } }
    }
  }
\cs_set:Npn \__expl_primitive:NN #1 #2 {\test_T:N #1 \test_T:N #2 }

% To finish off cleanly, we print a newline, and end the input
% of l3names.dtx where this file has a \cs{group_end:}.
\cs_new:Npn \test_eof: { \message{^^J} \tex_endinput:D }

% \cs{test_escapechar:n} checks the list of all primitives for the given
% value of escapechar. Open a group, set escapechar, then use
% \cs{tex_aftergroup:D} to close the file once the final \cs{group_end:}
% is read, and hack into \cs{RequirePackage} to skip over to the first
% interesting \cs{name_primitive:NN}, printing a newline in the process.
% Finally, we're ready to input \pkg{l3names.sty}.
%
\cs_new:Npn \test_escapechar:n #1
  {
    \group_begin:
    \tex_escapechar:D = \__int_eval:w #1 \__int_eval_end:
    \tex_aftergroup:D \test_eof:
    \cs_set:Npn \RequirePackage ##1 \begingroup ##2 ##
      { \message {^^J} \use_none:n }
    \tex_input:D l3names.sty \exp_stop_f:
  }
\TIMO

\TESTEXP{token_if_primitive~ and~ tex_end:D}{
  \token_if_primitive:NTF \tex_end:D ?F
  % \c_space_tl
  % \token_to_meaning:N \tex_end:D
  \NEWLINE
  \exp_args:Nc \token_if_primitive:NTF {@@@end} T?
  \c_space_tl
  \exp_args:Nc \token_to_meaning:N {@@@end}
}

% Test for each escapechar.
\TEST{token_if_primitive,~ with~ usual~ escapechar}
  { \test_escapechar:n {92} }

\TEST{token_if_primitive,~ with~ unprintable~ escapechar}
  { \test_escapechar:n {-1} }

\TEST{token_if_primitive,~ with~ space~ escapechar}
  { \test_escapechar:n {32} }

\END
