This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
Author: Bruno Le Floch
============================================================
TEST 1: regex_show
============================================================
LaTeX Warning: Extra right parenthesis ignored in regular expression.
> Compiled regex {a*|b??|(c{0}d{2,}e|[^fg\c [^BE][^\d ]\w ]){2,4}?)}:
+-branch
  char code 97 (a), repeated 0 or more times, greedy
+-branch
  char code 98 (b), repeated between 0 and 1 times, lazy
+-branch
  ,-group begin
  | char code 99 (c), repeated 0 times
  | char code 100 (d), repeated 2 or more times, greedy
  | char code 101 (e)
  +-branch
  | Don't match
  |   char code 102 (f)
  |   char code 103 (g)
  |   categories CMTPUDSLOA, negative class
  |     range [48 (0),57 (9)]
  |   range [97 (a),122 (z)]
  |   range [65 (A),90 (Z)]
  |   range [48 (0),57 (9)]
  |   char code 95 (_)
  `-group end, repeated between 2 and 4 times, lazy
  char code 41 ()).
<recently read> }
l. ...  }
Defining \l_foo_regex on line ...
> Compiled regex variable \l_foo_regex:
+-branch
  assertion: anchor at start (\A)
  char code 97 (a)
+-branch
  char code 98 (b)
+-branch.
<recently read> }
l. ...  }
> Compiled regex {a\ur {l_foo_regex}b\c {\ur {l_foo_regex}{2,7}?|D}}:
+-branch
  char code 97 (a)
  ,-group begin (no capture)
  | assertion: anchor at start (\A)
  | char code 97 (a)
  +-branch
  | char code 98 (b)
  +-branch
  `-group end
  char code 98 (b)
  Match
    control sequence
    +-branch
      ,-group begin (no capture)
      | assertion: anchor at start (\A)
      | char code 97 (a)
      +-branch
      | char code 98 (b)
      +-branch
      `-group end, repeated between 2 and 7 times, lazy
    +-branch
      char code 68 (D).
<recently read> }
l. ...  }
> Compiled regex {a\c {bc}\u {c_space_tl}+\c {\u {c_space_tl}|}}:
+-branch
  char code 97 (a)
  control sequence \bc
  ,-group begin (no capture)
  | char 32 ( ), catcode 10
  `-group end, repeated 1 or more times, greedy
  control sequence \  or \.
<recently read> }
l. ...  }
> Compiled regex {\u {l_tmpa_tl}*\c {\u {l_tmpa_tl}|(?:\u
{l_tmpa_int})?}{3}|y*}:
+-branch
  ,-group begin (no capture)
  | control sequence \abc
  `-group end, repeated 0 or more times, greedy
  Match, repeated 3 times
    control sequence
    +-branch
      char code 92 (\)
      char code 97 (a)
      char code 98 (b)
      char code 99 (c)
      char code 32 ( )
    +-branch
      ,-group begin (no capture)
      | char code 55 (7)
      `-group end, repeated between 0 and 1 times, greedy
+-branch
  char code 121 (y), repeated 0 or more times, greedy.
<recently read> }
l. ...  }
> Compiled regex {a(?:bc(?|de|f){2}g|hi){3,4}?}:
+-branch
  char code 97 (a)
  ,-group begin (no capture)
  | char code 98 (b)
  | char code 99 (c)
  | ,-group begin (resetting)
  | | char code 100 (d)
  | | char code 101 (e)
  | +-branch
  | | char code 102 (f)
  | `-group end, repeated 2 times
  | char code 103 (g)
  +-branch
  | char code 104 (h)
  | char code 105 (i)
  `-group end, repeated between 3 and 4 times, lazy.
<recently read> }
l. ...  }
Defining \l_bar_regex on line ...
> Compiled regex variable \l_bar_regex:
+-branch
  Fail.
<recently read> }
l. ...  }
! LaTeX Error: Variable \g_undefined_regex undefined.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to show a variable \g_undefined_regex, but this has not
been defined yet.
> Compiled regex variable \l_tmpa_regex:
+-branch
  range [48 (0),57 (9)]
+-branch
  Match
    range [97 (a),122 (z)]
    Reversed match
      range [97 (a),122 (z)]
      range [65 (A),90 (Z)]
      range [48 (0),57 (9)]
      char code 95 (_)
  any token
  Match
    range [97 (a),122 (z)]
    range [65 (A),90 (Z)]
    Reversed match
      range [0,127]
    char code 37 (%).
<recently read> }
l. ...  }
! LaTeX Error: Variable '\l_tmpa_regex' is not a valid regex.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
The variable '\l_tmpa_regex' with value
    \__regex_branch:n {\__regex_class:NnnnN \c_true_bool
    {\__regex_item_caseful_equal:n {65}}{1}{0}\c_false_bool }X
should be a regex variable, but it does not have the correct internal
structure:
    \__regex_branch:n {\__regex_class:NnnnN \c_true_bool
    {\__regex_item_caseful_equal:n {65}}{1}{0}\c_false_bool }
============================================================
============================================================
TEST 2: regex_show again
============================================================
> Compiled regex {[^\d \W \s ]*?[^a-z[:^cntrl:]A-Z]??}:
+-branch
  Don't match, repeated 0 or more times, lazy
    range [48 (0),57 (9)]
    Reversed match
      range [97 (a),122 (z)]
      range [65 (A),90 (Z)]
      range [48 (0),57 (9)]
      char code 95 (_)
    char code 32 ( )
    char code 9
    char code 10
    char code 12
    char code 13
  Don't match, repeated between 0 and 1 times, lazy
    range [97 (a),122 (z)]
    Reversed match
      range [0,31]
      char code 127
    range [65 (A),90 (Z)].
<recently read> }
l. ...  }
> Compiled regex {[^\c [^L][^[:^alpha:]]]{2,}?}:
+-branch
  Don't match, repeated 2 or more times, lazy
    categories CBEMTPUDSOA, negative class
      Reversed match
        range [97 (a),122 (z)]
        range [65 (A),90 (Z)].
<recently read> }
l. ...  }
! LaTeX Error: Missing right bracket inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression where a character class was started with
'[', but the matching ']' is missing.
! LaTeX Error: Missing right parentheses inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression with 2 more left parentheses than right
parentheses.
> Compiled regex {(a(b|[^}:
+-branch
  ,-group begin
  | char code 97 (a)
  | ,-group begin
  | | char code 98 (b)
  | +-branch
  | | Pass
  | `-group end
  `-group end.
<recently read> }
l. ...  }
! LaTeX Error: Missing right brace inserted for '\c' escape.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression where a '\c{...' construction was not
ended with a closing brace '}'.
! LaTeX Error: Missing right bracket inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression where a character class was started with
'[', but the matching ']' is missing.
! LaTeX Error: Missing right parenthesis inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression with 1 more left parentheses than right
parentheses.
! LaTeX Error: Missing right bracket inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression where a character class was started with
'[', but the matching ']' is missing.
! LaTeX Error: Missing right parenthesis inserted in regular expression.
For immediate help type H <return>.
 ...                                              
l. ...  }
LaTeX was given a regular expression with 1 more left parentheses than right
parentheses.
> Compiled regex {([\c {([}:
+-branch
  ,-group begin
  | Match
  |   control sequence
  |   +-branch
  |     ,-group begin
  |     | Fail
  |     `-group end
  `-group end.
<recently read> }
l. ...  }
> Compiled regex {\c {[}{]}}:
+-branch
  Match
    control sequence
    +-branch
      Match
        char code 125 (})
        char code 123 ({).
<recently read> }
l. ...  }
============================================================
============================================================
TEST 3: all escaped sequences
============================================================
> Compiled regex {\A \B \C \D \E \F \G \H \I \J \K \L \M \N \O \P \Q \R \S \T
\U \V \W \X \Y \Z }:
+-branch
  assertion: anchor at start (\A)
  negative assertion: word boundary
  char code 67 (C)
  Match
    Reversed match
      range [48 (0),57 (9)]
  char code 69 (E)
  char code 70 (F)
  assertion: anchor at start of match (\G)
  Match
    Reversed match
      char code 32 ( )
      char code 9
  char code 73 (I)
  char code 74 (J)
  reset match start (\K)
  char code 76 (L)
  char code 77 (M)
  Match
    Reversed match
      char code 10
  char code 79 (O)
  char code 80 (P)
  char code 81 (Q)
  char code 82 (R)
  Match
    Reversed match
      char code 32 ( )
      char code 9
      char code 10
      char code 12
      char code 13
  char code 84 (T)
  char code 85 (U)
  Match
    Reversed match
      range [10,13]
  Match
    Reversed match
      range [97 (a),122 (z)]
      range [65 (A),90 (Z)]
      range [48 (0),57 (9)]
      char code 95 (_)
  char code 88 (X)
  char code 89 (Y)
  assertion: anchor at end (\Z).
<recently read> }
l. ...  }
! LaTeX Error: Invalid character 'd' following '\c' escape.
For immediate help type H <return>.
 ...                                              
l. ...  }
In regular expressions, the '\c' escape sequence may only be followed by a
left brace, a left bracket, or a capital letter representing a character
category, namely one of 'ABCDELMOPSTU'.
! LaTeX Error: Missing left brace following '\u' escape.
For immediate help type H <return>.
 ...                                              
l. ...  }
The '\u' escape sequence must be followed by a brace group with the name of
the variable to use.
> Compiled regex {\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t
\u \v \w \x \y \z }:
+-branch
  char code 7
  assertion: word boundary
  range [48 (0),57 (9)]
  char code 27
  char code 12
  char code 103 (g)
  Match
    char code 32 ( )
    char code 9
  char code 105 (i)
  char code 106 (j)
  char code 107 (k)
  char code 108 (l)
  char code 109 (m)
  char code 10
  char code 111 (o)
  char code 112 (p)
  char code 113 (q)
  char code 13
  Match
    char code 32 ( )
    char code 9
    char code 10
    char code 12
    char code 13
  char code 9
  char code 117 (u)
  range [10,13]
  Match
    range [97 (a),122 (z)]
    range [65 (A),90 (Z)]
    range [48 (0),57 (9)]
    char code 95 (_)
  char code 0
  char code 121 (y)
  assertion: anchor at end (\Z).
<recently read> }
l. ...  }
> Compiled regex {\0\1\2\3\4\5\6\7\8\9}:
+-branch
  char code 48 (0)
  char code 49 (1)
  char code 50 (2)
  char code 51 (3)
  char code 52 (4)
  char code 53 (5)
  char code 54 (6)
  char code 55 (7)
  char code 56 (8)
  char code 57 (9).
<recently read> }
l. ...  }
============================================================
============================================================
TEST 4: regex_log
============================================================
> Compiled regex variable \l_foo_regex:
+-branch
  assertion: anchor at start (\A)
  char code 97 (a)
+-branch
  char code 98 (b)
+-branch
============================================================
> Compiled regex {a\ur {l_foo_regex}b\c {\ur {l_foo_regex}{2,7}?|D}}:
+-branch
  char code 97 (a)
  ,-group begin (no capture)
  | assertion: anchor at start (\A)
  | char code 97 (a)
  +-branch
  | char code 98 (b)
  +-branch
  `-group end
  char code 98 (b)
  Match
    control sequence
    +-branch
      ,-group begin (no capture)
      | assertion: anchor at start (\A)
      | char code 97 (a)
      +-branch
      | char code 98 (b)
      +-branch
      `-group end, repeated between 2 and 7 times, lazy
    +-branch
      char code 68 (D)
============================================================
! LaTeX Error: Variable \g_undefined_regex undefined.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to show a variable \g_undefined_regex, but this has not
been defined yet.
============================================================
