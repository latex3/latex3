%
% Copyright (C) 2011-2015,2017-2021 The LaTeX Project
%
\documentclass{minimal}
\input{regression-test}
\RequirePackage[enable-debug]{expl3}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff
\begin{document}
\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn

\OMIT
\cs_generate_variant:Nn \str_set_convert:Nnnn { No , Nv , NV }
\cs_generate_variant:Nn \str_if_eq:NNTF { Nc }

\TIMO

% pTeX gives entirely spurious results so simply halt
\sys_if_engine_ptex:T { \END }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
% We make token lists \l_bytes_0_tl, \l_bytes_16_tl,... containing
% 16 bytes each.  Those will be converted to various escapings,
% written to the terminal, converted back, and compared with the
% original.  An earlier version had a single \l_all_bytes_tl, but
% this lead to one very long line, broken differently in LuaTeX.
%
\int_step_inline:nnnn { 0 } { 16 } { 255 }
  {
    \tl_new:c { l_bytes_#1_tl }
    \tl_set:cx { l_bytes_#1_tl }
      {
        \int_step_function:nnN {#1} { #1 + 15 }
          \__str_output_byte:n
      }
  }
\TIMO

\tl_map_inline:nn { {hex} {name} {string} {url} }
  {
    \TEST { Escaping~#1 }
      {
        \int_step_inline:nnnn { 0 } { 16 } { 255 }
          {
            \str_set_convert:Nvnn \l_tmpa_tl { l_bytes_##1_tl }
              { latin1 } { latin1/#1 }
            \TYPE { \l_tmpa_tl }
            \str_set_convert:NVnn \l_tmpa_tl \l_tmpa_tl
              { latin1/#1 } { latin1 }
            \str_if_eq:NcTF \l_tmpa_tl { l_bytes_##1_tl }
              { \TRUE } { \ERROR }
          }
      }
  }
 % need to test on invalid input

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\char_set_catcode_other:N \^^83
\TIMO

\TEST { From~utf8~to~native }
  {
    \str_set_convert:Nnnn \l_tmpa_str { c2 83 } { utf8/hex } { }
    \str_if_eq:onTF \l_tmpa_str { ^^83 } { \TRUE } { \ERROR }
    \str_set_convert:Nnnn \l_tmpa_str { ce b1 } { utf8/hex } { } % alpha
    \bool_lazy_or:nnTF \sys_if_engine_luatex_p: \sys_if_engine_xetex_p:
      { \str_if_eq:eeTF \l_tmpa_str { \cs_to_str:N \^^^^03b1 } { \TRUE } { \ERROR } }
      { \str_if_eq:onTF \l_tmpa_str { ? } { \TRUE } { \ERROR } }
  }

\TEST { From~native~to~utf8 }
  {
    \str_set_convert:Nnnn \l_tmpa_str { ^^83 } { } { utf8/hex }
    \str_if_eq:onTF { \l_tmpa_str } { C2 83 } { \TRUE } { \ERROR }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { misc }
  {
    \str_set_convert:Nnnn \l_tmpa_str
      { 0020 0034 0058 0123 1234 6C34 D834 DD1E }
      { utf16be/hex } { utf8/name }
    \exp_args:NNo \tl_replace_all:Nnn \l_tmpa_str { \c_hash_str } { * }
    \str_if_eq:eeTF { *20 4 X *C4*A3 *E1*88*B4 *E6*B0*B4 *F0*9D*84*9E }
      { \l_tmpa_str } { \TRUE } { \ERROR }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { iso~encoding }
  {
    \str_set_convert:Nnnn \l_tmpa_str
      { 0044 3333 0044 005E 0044 017C 0044 017D 0044 }
      { utf16/hex } { iso88592/hex }
    \str_if_eq:onTF { \l_tmpa_str } { 44445E44BF44AE44 } { \TRUE } { \ERROR }
    \str_set_convert:NnnnTF \l_tmpa_str
      { 0044 3333 0044 005E 0044 017C 0044 017D 0044 }
      { utf16/hex } { iso88592/hex }
      { \ERROR } { \FALSE }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Misc~2 }
  {
    \str_set_convert:Nnnn \l_tmpa_tl { 6C34 D834 DD1E }
      { utf16/hex } { utf16/hex }
    \str_if_eq:onTF { \l_tmpa_tl } { FEFF 6C34 D834 DD1E }
      { \TRUE } { \ERROR }
    \str_set_convert:Nnnn \l_tmpa_tl { 12 + 33 , "A0 , , }
      { clist } { latin1 }
    \str_if_eq:onTF { \l_tmpa_tl } { - ^^a0 } { \TRUE } { \ERROR }
    \str_set_convert:Nnnn \l_tmpa_tl { 6C34 D834 DD1E }
      { utf16/hex } { clist }
    \str_if_eq:onTF { \l_tmpa_tl } { 27700 , 119070 }
      { \TRUE } { \ERROR }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { default }
  {
    \str_set_convert:Nnnn \l_tmpa_tl { Grüße }
      { default } { utf16/hex }
    \str_if_eq:onTF { \l_tmpa_tl } { FEFF0047007200FC00DF0065 }
      { \TRUE } { \ERROR }
  }    
\END
