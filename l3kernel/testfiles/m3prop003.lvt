%
% Copyright (C) 2009-2013 The LaTeX Project
%

\documentclass{minimal}
\input{regression-test}


\RequirePackage[check-declarations,log-functions]{expl3}


\begin{document}
\START
\AUTHOR{Will Robertson \& Joseph Wright}
\ExplSyntaxOn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\prop_new:N \l_a_prop
\TIMO

\TEST { if_empty ~ ( expect ~ T/F/F ) }
  {
    \prop_clear:N  \l_a_prop
    \prop_if_empty:NTF \l_a_prop {\TRUE} {\ERROR}
    \prop_put:Nnn \l_a_prop {} {}
    \prop_if_empty:NTF \l_a_prop {\TRUE} {\FALSE}
    \prop_put:Nnn \l_a_prop {abc} {}
    \prop_if_empty:NTF \l_a_prop {\ERROR} {\FALSE}
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { if_in~(expect~T/T/T/F/F) }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop { } {test}
    \prop_put:Nnn \l_a_prop {a} {testa}
    \prop_put:Nnn \l_a_prop {b} {testb}
    \prop_put:Nnn \l_a_prop {d} {test}
    \prop_if_in:NnTF \l_a_prop { }    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {a}    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {b}    {\TRUE}  {\ERROR}
    \prop_if_in:NnTF \l_a_prop {c}    {\ERROR} {\FALSE}
    \prop_if_in:NnTF \l_a_prop {test} {\ERROR} {\FALSE}
    \SEPARATOR
    \cs_set_nopar:Npn \a {a}
    \cs_set_nopar:Npn \b {a}
    \cs_set_nopar:Npn \c {c}
    \cs_set_nopar:Npn \d {test}
    \prop_if_in:NVT \l_a_prop \c_empty_tl {\TRUE}
    \prop_if_in:NVT \l_a_prop \a {\TRUE}
    \prop_if_in:NVT \l_a_prop \b {\TRUE}
    \prop_if_in:NVF \l_a_prop \c {\FALSE}
    \prop_if_in:NVF \l_a_prop \d {\FALSE}
    \SEPARATOR
    \cs_set_nopar:Npn \a {a}
    \cs_set_nopar:Npn \b {a}
    \cs_set_nopar:Npn \c {c}
    \cs_set_nopar:Npn \d {test}
    \prop_if_in:NoT \l_a_prop \c_empty_tl {\TRUE}
    \prop_if_in:NoT \l_a_prop {\a} {\TRUE}
    \prop_if_in:NoT \l_a_prop {\b} {\TRUE}
    \prop_if_in:NoF \l_a_prop {\c} {\FALSE}
    \prop_if_in:NoF \l_a_prop {\d} {\FALSE}
    \SEPARATOR
    \prop_put:Nnn \l_a_prop { } {test}
    \prop_put:Nnn \l_a_prop {a} {testa}
    \prop_put:Nnn \l_a_prop {b} {testb}
    \prop_put:Nnn \l_a_prop {d} {test}
    \prop_if_in:cnTF {l_a_prop} { }    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {a}    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {b}    {\TRUE}  {\ERROR}
    \prop_if_in:cnTF {l_a_prop} {c}    {\ERROR} {\FALSE}
    \prop_if_in:cnTF {l_a_prop} {test} {\ERROR} {\FALSE}
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_function }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \cs_set:Npn \test:nn #1#2
      { \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < } }
    \prop_map_function:NN \l_a_prop \test:nn
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
\prop_clear:N  \l_a_prop
\prop_put:Nnn \l_a_prop { a } { testa }
\prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
\prop_put:Nnn \l_a_prop { b } { testb }
\cs_set:Npn \test:nn #1 #2
  { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < \NEWLINE }
\TIMO

\TESTEXP { map_function ~ (EXP) }
  { \prop_map_function:NN \l_a_prop \test:nn }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_inline }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \prop_map_inline:Nn \l_a_prop
      { \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < } }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { map_break }
  {
    \prop_clear:N  \l_a_prop
    \prop_put:Nnn \l_a_prop {   } { # test  \par }
    \prop_put:Nnn \l_a_prop { a } { # testa \par }
    \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
    \prop_put:Nnn \l_a_prop { b } { # testb \par }
    \prop_put:Nnn \l_a_prop { c } { # testc \par }
    \prop_put:Nnn \l_a_prop { d } { # testd \par }
    \prop_map_inline:Nn \l_a_prop
      {
        \str_if_eq:nnT {#1}{c}
	  { \prop_map_break: }
        \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < }
      }
    \prop_map_inline:Nn \l_a_prop
      {
        \str_if_eq:nnT {#1}{b}
	  { \prop_map_break:n { \TYPE { \tl_to_str:n {#2} } } }
        \TYPE { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < }
      }
  }
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
  \prop_clear:N  \l_a_prop
  \prop_put:Nnn \l_a_prop {   } { # test  \par }
  \prop_put:Nnn \l_a_prop { aa } { # testa \par }
  \prop_put:Nnn \l_a_prop { \q_recursion_tail } { ? }
  \prop_put:Nnn \l_a_prop { bb } { # testb \par }
  \prop_put:Nnn \l_a_prop { cc } { # testc \par }
  \prop_put:Nnn \l_a_prop { dd } { # testd \par }
  \cs_set:Npn \test:nn #1 #2
    { > \tl_to_str:n {#1} --- \tl_to_str:n {#2} < \NEWLINE }
\TIMO
\TESTEXP { map_tokens }
  { \prop_map_tokens:Nn \l_a_prop { \test:nn } }

\TESTEXP { get_item }
  {
    | \prop_get:Nn \l_a_prop { aa } | \NEWLINE
    | \prop_get:Nn \l_a_prop { bb } | \NEWLINE
    | \prop_get:Nn \l_a_prop { xx } |
  }

\END

