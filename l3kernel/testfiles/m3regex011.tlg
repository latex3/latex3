This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
Author: Bruno Le Floch
============================================================
TEST 1: No clobbering of threads with non-optimizable \c 
============================================================
TRUE
============================================================
============================================================
TEST 2: No groups within \c 
============================================================
! Undefined control sequence.
<argument> \LaTeX3 error: 
                           Submatch 2 used but regex only has 1 group(s)
l. ...  }
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
<argument> \LaTeX3 error: 
                           Submatch 3 used but regex only has 1 group(s)
l. ...  }
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
> \l_tmpa_tl=\aa \bb ,\bb ,,.
============================================================
============================================================
TEST 3: Callouts with (?C...)
============================================================
> \l_tmpa_tl=[\aa {]}\bb .
> \l_tmpa_tl=[\aa {/]/}\bb .
! LaTeX3 Error: Invalid escape '(?C' following a category test.
For immediate help type H <return>.
 ...                                              
l. ...  }
The escape sequence '(?C' may not appear following a category test such as
'\cL' because it does not match exactly one character.
LaTeX3 Warning: Braced quantifier '{' may not be followed by '}'.
LaTeX3 Warning: Extra right parenthesis ignored in regular expression.
> Compiled regex {\cL (?C{})Y}:
+-branch
  Match
    categories L, class
      char code 40 (()
  char code 63 (?)
  char code 67 (C)
  char code 123 ({)
  char code 125 (})
  char code 41 ())
  char code 89 (Y).
<recently read> }
l. ...  }
============================================================
============================================================
TEST 4: Peek regex
============================================================
TRUE
|\aaa |
TRUE
|a|
|ab\s_stop \test_show:w |
TRUE
|a{b}|
FALSE
|\aaa |
|a|
FALSE
|\test:w {ab}c|
FALSE
|a{b}|
============================================================
TRUE
|\aaa |
TRUE
||
|b|
|end-group character }|
TRUE
|b|
|end-group character }|
FALSE
|\aaa |
|a|
FALSE
|\test:w {ab}c|
FALSE
|a{b}|
============================================================
============================================================
TEST 5: Peek regex compiled
============================================================
TRUE
|a|
TRUE
|a|
|a|
TRUE
||
TRUE
||
|the letter a|
============================================================
============================================================
TEST 6: Peek regex replace
============================================================
TRUE
|{\aaa }b|
> \a a=undefined.
<recently read> }
l. ...  }
TRUE
|\"\a a |
> \a a=undefined.
<recently read> }
l. ...  }
TRUE
|\a {\a {}b}|
FALSE
|\aaa |
|a|
FALSE
|\test:w {ab}c|
============================================================
