%
% Copyright (C) 2011-2014,2017,2018,2021 The LaTeX Project
\documentclass{minimal}
\input{regression-test}

\RequirePackage[enable-debug]{expl3}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation , log-functions }
\ExplSyntaxOff

\begin{document}

\START
\AUTHOR{Bruno Le Floch}
\ExplSyntaxOn

\OMIT

\regex_new:N \l_foo_regex
\regex_new:N \g_foo_regex
\seq_new:N \l_foo_seq

% \__test_wrap:n turns "{#1}~" to a string, replaces each space by a
% braced space, then applies \__test_wrap_auxiii:n to each character.
% That auxiliary replaces unprintable characters (i.e., chars less than
% 32, except 10) by the "^^X" escape.  We don't bother producing a
% stringy result nor being f-expandable, as the result is fed to
% \iow_term:x.
%
\cs_new:Npn \__test_wrap:n #1
  {
    \exp_after:wN \__test_wrap_auxi:w \tl_to_str:n { {#1} ~ }
    \q_nil { \__test_wrap_auxi:w } ~
    \q_nil { \__test_wrap_auxii:w } \q_stop
  }
\cs_new:Npn \__test_wrap_auxi:w #1 ~ #2 \q_nil #3
  { #3 #1 {~} #2 \q_nil #3 }
\cs_new:Npn \__test_wrap_auxii:w #1 \q_nil #2 \q_stop
  { \tl_map_function:nN {#1} \__test_wrap_auxiii:n }
\cs_new:Npn \__test_wrap_auxiii:n #1
  {
    \int_compare:nNnTF { `#1 } < { `\  }
      {
        \int_compare:nNnTF { `#1 } = { 10 }
          {#1} { ^ ^ \char_generate:nn { `#1 + `@ } { 12 } }
      }
      { \int_compare:nNnTF { `#1 } = { 127 } { ^ ^ ? } {#1} }
  }


\cs_new_protected:Npn \test:nn #1 #2
  {
    \regex_match:nnTF {#1} {#2} { \TRUE } { \FALSE }
    \regex_extract_all:nnN {#1} {#2} \l_foo_seq
    \iow_term:x { \seq_map_function:NN \l_foo_seq \__test_wrap:n }
  }
\cs_new_protected:Npn \test:Nn #1 #2
  {
    \regex_match:NnTF #1 {#2} { \TRUE } { \FALSE }
    \regex_extract_all:NnN #1 {#2} \l_foo_seq
    \iow_term:x { \seq_map_function:NN \l_foo_seq \__test_wrap:n }
  }

\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Misc }
  {
    \test:nn {(a)(b)*} {abb}
    \test:nn {(a)(b|c*)*} {abcccbcc}
    \test:nn {(a*b+)} {abab}
    \test:nn {a} {b}
    \test:nn {(a*)} {aaab}
    \test:nn { (La|Xe)T(e(X))(\ (It\ )?is\ nice!*)*  ! }
      { LaTeX~is~nice!~It~is~nice!!! }
    \test:nn { (La|Xe)T(e(X))(\ (It\ )?is\ nice!*)* }
      { XeTeX~is~nice~is~nice!! }
    \test:nn { (a)b?c } { ac }
    \test:nn { a(b*)c } { abdabbc }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\tl_new:N \g_ascii_chars_str
\cs_set:Npn \test_tmp:n #1 { \char_generate:nn {#1} { 12 } }
\tl_gset:Nx \g_ascii_chars_str
  { \int_step_function:nnN { 0 } { 127 } \test_tmp:n }
\tl_greplace_once:Nnn \g_ascii_chars_str { ' } { ' ^^J }
\tl_greplace_once:Nnn \g_ascii_chars_str { ` } { ^^J ` }
% We add a couple line-breaks to avoid over-long lines
\cs_generate_variant:Nn \test:nn { no }
\TIMO

\TEST { Simple~strings~n }
  {
    \test:nn { abcabcabX } { abcabcabcabXabc }
    \test:nn { } { }
    \test:nn { a } { }
    \test:nn { aa } { a }
    \test:nn { ab } { baba }
    \test:no
      {
        \^^A\^^B\^^C\^^D\^^E\^^F\^^G
        \^^H\^^I\^^J\^^K\^^L\^^M\^^N\^^O
        \^^P\^^Q\^^R\^^S\^^T\^^U\^^V\^^W
        \^^X\^^Y\^^Z\^^[\^^\\^^]\^^^\^^_
        \ \!\"\#\$\%\&\'        \^^J
        \(\)\*\+\,\-\.\/
        0123456789\:\;\<\=\>\?
        \@ABCDEFGHIJKLMNO
        PQRSTUVWXYZ\[\\\]\^\_   \^^J
        \`abcdefghijklmno
        pqrstuvwxyz\{\|\}\~\^^?
      }
      { \g_ascii_chars_str }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Regex~set }
  {
    \regex_set:Nn \l_foo_regex { abc*!? }
    \test:Nn \l_foo_regex { }
    \test:Nn \l_foo_regex { aaa }
    \test:Nn \l_foo_regex { XabcX }
    \test:Nn \l_foo_regex { aababcccc!! }
    { \regex_gset:Nn \g_foo_regex { ab(c*)c? } }
    \test:Nn \g_foo_regex { }
    \test:Nn \g_foo_regex { ababccc? }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Quantifiers~at~wrong~places }
  {
    \regex_set:Nn \l_foo_regex { * abc|?*c }
    \test:Nn \l_foo_regex { X * abc X }
    \test:Nn \l_foo_regex { X ??? c X }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\clist_map_function:nN
  { 0, 7, 8, 9, 10, 11, 12, 13, "1B, "1D, "A0, `\#, 255, "7F }
  \char_set_catcode_other:n
\TIMO

\TEST { Character~types }
  {
    \test:nn { (\..)+ } { . ^^@ . ^^7f .~ }
    \test:nn { (d\d)+ } { d/ d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d: }
    \test:nn { (h\h)+ } { h^^H h^^I h~ h~ h^^J }
    \test:nn { (s\s)+ } { s^^H s^^K s^^I s^^J s^^L s^^M s~ s^^a0 }
    \test:nn { (v\v)+ } { v^^I v^^J v^^K v^^L v^^M v~ }
    \test:nn { (w\w)+ }
      { w/ w: w{ w} w@ w[ w] w^ w` w~ wa wb wc wd wy wz wA wB wZ w_ w0 w9 w? }
    \test:nn { (N\N)+ } { Na Nb N* N# N^^7f N^^00 N^^J NN }
    \test:nn { (D\D)+ } { D0 D9 D/ D: }
    \test:nn { (H\H)+ } { H^^I H~ H^^J Ha H* H^^M }
    \test:nn { (S\S)+ }
      { S^^I S^^J S^^L S^^M S~ Sa S# S@ S^^K S^^@ }
    \test:nn { (V\V)+ } { V^^J V^^K V^^L V^^M V^^I V~ Va V^^7f }
    \test:nn { (W\W)+ }
      { Wa Wz WA WZ W_ W0 W9 W? W* W/ W: W{ W} W@ W[ W] W^ W` W? }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Special~characters }
  {
    \regex_set:Nn \l_foo_regex { \x{2a}?\x2B*\x0{x}\x*(\x2ab)? }
    \test:Nn \l_foo_regex { **** + ^^@ {x} ^^@^^@ *b }
    \test:Nn \l_foo_regex { ^^@ ^^@ {x ^^@ {x} ^^@ } }
    \test:nn { \x{0ff} } { abc }
    \test:nn
      {
        \x{2a}\x{2b}\x{2c}\x{2d}\x{2e}\x{2f}
        \x{2A}\x{2B}\x{2C}\x{2D}\x{2E}\x{2F}
        \x 2a \x 2b \x 2c \x 2d \x 2e \x 2f
        \x 2A \x 2B \x 2C \x 2D \x 2E \x 2F
      }
      { *+,-./ *+,-./ *+,-./ *+,-./ }
    \test:nn { \a\e\f\n\r\t }
      { ^^G ^^[ ^^L ^^J ^^M ^^I ^^] }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\OMIT
\char_set_catcode_other:N \%
\TIMO

\TEST { Character~classes }
  {
    \regex_set:Nn \l_foo_regex { \/[a-cw-y"-&\<-\?]*?\? }
    \test:Nn \l_foo_regex { /abcwxy"#$ $&<=>?? }
    \test:Nn \l_foo_regex { /`? /d? /!? /'? /;? /@? /%? }
    \test:nn { [^\W \d _]+ } { ?@[]0349_abcAB_ }
    \test:nn { /[^](\x{8}] } { /^^H /] /( /^ }
  }

\OMIT
\char_set_catcode_comment:N \%
\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Nested~groups~with~quantifiers }
  {
    \test:nn { ((a)*|(b)?|(c)+|!)*?! } { aaabccbaab!a! }
    \test:nn { ((a*)|(b?)|(c+)|!)*! } { aaabccbaab!aa! }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Quantifiers }
  {
    \regex_set:Nn \l_foo_regex { ((a?|b)*?(aabb)+|cd)+ }
    \test:Nn \l_foo_regex { aabcdabaabbabb }
    \test:Nn \l_foo_regex { aabcabbbabababbb }
    \test:Nn \l_foo_regex { aabbcdcdaabbaabb }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Simple~assertions }
  {
    \test:nn { \b\w*\b.+?\b } { ...abc...def }
    \test:nn { \b\w*\B(.)\b* } { abc* }
    \regex_set:Nn \l_foo_regex { ( abc |^def | ghi $ | $ )+ }
    \test:Nn \l_foo_regex { def abc abc ghi }
    \test:Nn \l_foo_regex { def haldsj }
    \test:Nn \l_foo_regex { allikfj abc ghi a }
    \test:Nn \l_foo_regex { ~ def abc ghi ~ }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { Non-capturing~groups~and~alternatives }
  {
    \regex_set:Nn \l_foo_regex
      { ( (a)(?:bc|de)*f | (?:(?:(gh)|i|)+|?)* )+ j }
    \test:Nn \l_foo_regex { XabcdefghiighafjX }
    \test:Nn \l_foo_regex { abcbcfadefighjX }
    \test:nn { (?:) } { abc }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\TEST { catcodes~and~cs~in~replacement }
  {
    \cs_set_nopar:cpn { x ? y } { y ? z }
    \cs_set_nopar:cpn { y ? z ^ } { z . a }
    \char_set_catcode_active:n { `? }
    \char_set_catcode_parameter:n { `^ }
    \regex_replace_all:nnN { .* }
      { \c{x\?y} \u{x\?y} \c{\u{x\?y}\^} \? }
      \l_tmpa_tl
    \tl_analysis_show:N \l_tmpa_tl
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\END
