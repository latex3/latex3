This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
Author: Bruno Le Floch
============================================================
TEST 1: cs_(set|gset|new):Nn
============================================================
Defining \foo: on line ...
Defining \foo:nnn on line ...
Defining \foo:nnnnnn on line ...
Defining \foo:nnnnnnnnn on line ...
> \foo:=\long macro:->*.
> \foo:nnn=\long macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\long macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\long macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
> \foo:=\long macro:->.
> \foo:nnn=\long macro:#1#2#3->#1#2#3.
> \foo:nnnnnn=\long macro:#1#2#3#4#5#6->#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\long macro:#1#2#3#4#5#6#7#8#9->#1#2#3#4#5#6#7#8#9.
> \foo:=\long macro:->*.
> \foo:nnn=\long macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\long macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\long macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
============================================================
============================================================
TEST 2: cs_(set|gset|new)_protected:Nn
============================================================
Defining \foo: on line ...
Defining \foo:nnn on line ...
Defining \foo:nnnnnn on line ...
Defining \foo:nnnnnnnnn on line ...
> \foo:=\protected\long macro:->*.
> \foo:nnn=\protected\long macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\protected\long macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected\long
macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
> \foo:=\protected\long macro:->.
> \foo:nnn=\protected\long macro:#1#2#3->#1#2#3.
> \foo:nnnnnn=\protected\long macro:#1#2#3#4#5#6->#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected\long macro:#1#2#3#4#5#6#7#8#9->#1#2#3#4#5#6#7#8#9.
> \foo:=\protected\long macro:->*.
> \foo:nnn=\protected\long macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\protected\long macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected\long
macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
============================================================
============================================================
TEST 3: cs_(set|gset|new)_nopar:Nn
============================================================
Defining \foo: on line ...
Defining \foo:nnn on line ...
Defining \foo:nnnnnn on line ...
Defining \foo:nnnnnnnnn on line ...
> \foo:=macro:->*.
> \foo:nnn=macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
> \foo:=macro:->.
> \foo:nnn=macro:#1#2#3->#1#2#3.
> \foo:nnnnnn=macro:#1#2#3#4#5#6->#1#2#3#4#5#6.
> \foo:nnnnnnnnn=macro:#1#2#3#4#5#6#7#8#9->#1#2#3#4#5#6#7#8#9.
> \foo:=macro:->*.
> \foo:nnn=macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
============================================================
============================================================
TEST 4: cs_(set|gset|new)_protected_nopar:Nn
============================================================
Defining \foo: on line ...
Defining \foo:nnn on line ...
Defining \foo:nnnnnn on line ...
Defining \foo:nnnnnnnnn on line ...
> \foo:=\protected macro:->*.
> \foo:nnn=\protected macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\protected macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
> \foo:=\protected macro:->.
> \foo:nnn=\protected macro:#1#2#3->#1#2#3.
> \foo:nnnnnn=\protected macro:#1#2#3#4#5#6->#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected macro:#1#2#3#4#5#6#7#8#9->#1#2#3#4#5#6#7#8#9.
> \foo:=\protected macro:->*.
> \foo:nnn=\protected macro:#1#2#3->*#1#2#3.
> \foo:nnnnnn=\protected macro:#1#2#3#4#5#6->*#1#2#3#4#5#6.
> \foo:nnnnnnnnn=\protected macro:#1#2#3#4#5#6#7#8#9->*#1#2#3#4#5#6#7#8#9.
============================================================
============================================================
TEST 5: cs_set:Nn with errors
============================================================
! LaTeX Error: Function '\foo' contains no ':'.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Code-level functions must contain ':' to separate the argument specification
from the function name. This is needed when defining conditionals or variants,
or when building a parameter text from the number of arguments of the
function.
> \foo=undefined.
! LaTeX Error: Function '\foo:nnnnnnnnnn' cannot be defined with 10 arguments.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to define a function '\foo:nnnnnnnnnn' with 10 arguments.
TeX allows between 0 and 9 arguments for a single function.
> \foo:nnnnnnnnnn=undefined.
! LaTeX Error: Function '\foo:noc' is not a base function
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Functions defined through \cs_new:Nn must have a signature consisting of only
normal arguments 'N' and 'n'. The signature 'noc' of '\foo:noc' contains other
arguments 'oc'. To define variants use \cs_generate_variant:Nn and to define
other functions use \cs_new:Npn.
> \foo:noc=\long macro:#1#2#3->#1#2#3.
============================================================
============================================================
TEST 6: prg_new_conditional:Nnn
============================================================
Defining \foo:nnnT on line ...
Defining \foo:nnnF on line ...
Defining \foo:nnnTF on line ...
> \foo:nnnT=\protected\long macro:#1#2#3->\tl_show:n {#1#2#3}\prg_return_true:
\exp_end: \use:n \use_none:n .
> \foo:nnnF=\protected\long macro:#1#2#3->\tl_show:n {#1#2#3}\prg_return_true:
\exp_end: {}.
> \foo:nnnTF=\protected\long macro:#1#2#3->\tl_show:n
{#1#2#3}\prg_return_true: \exp_end: .
Defining \bar:nnnT on line ...
Defining \bar:nnnF on line ...
> \bar:nnnT=\long macro:#1#2#3->\prg_return_true: \exp_end: \use:n \use_none:n
.
> \bar:nnnF=\long macro:#1#2#3->\prg_return_true: \exp_end: {}.
Defining \bar:nTF on line ...
============================================================
============================================================
TEST 7: prg_new_conditional with errors
============================================================
! LaTeX Error: Function '\foo' contains no ':'.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Code-level functions must contain ':' to separate the argument specification
from the function name. This is needed when defining conditionals or variants,
or when building a parameter text from the number of arguments of the
function.
> \foo:TF=undefined.
! LaTeX Error: Function '\foo:nnnnnnnnnnnn' cannot be defined with 12
(LaTeX)        arguments.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to define a function '\foo:nnnnnnnnnnnn' with 12
arguments. TeX allows between 0 and 9 arguments for a single function.
> \foo:nnnnnnnnnnnnTF=undefined.
! LaTeX Error: Predicate '\baz_p:n' must be expandable.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to define '\baz_p:n' as a protected predicate. Only
expandable tests can have a predicate version.
! LaTeX Error: Conditional form 'xx' for function '\baz:n' unknown.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to define the conditional form 'xx' of the function
'\baz:n', but only 'TF', 'T', 'F', and 'p' forms exist.
Defining \baz:nTF on line ...
> \baz_p:n=\relax.
> \baz:nTF=\protected\long macro:#1->\prg_return_true: \exp_end: .
============================================================
============================================================
TEST 8: prg_set_eq_conditional:NNn
============================================================
Defining \baz:nT on line ...
Defining \baz:nF on line ...
TRUE
TRUE
FALSE
============================================================
============================================================
TEST 9: prg_set_eq_conditional:NNn with errors
============================================================
! LaTeX Error: Control sequence \tl_if_in_p:nn undefined.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to use a control sequence '\tl_if_in_p:nn':
this has not been defined yet.
Defining \my_if_in_p:nn on line ...
! LaTeX Error: Conditional form 't' for function '\my_if_in:nn' unknown.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to define the conditional form 't' of the function
'\my_if_in:nn', but only 'TF', 'T', 'F', and 'p' forms exist.
! LaTeX Error: Function '\foo' contains no ':'.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Code-level functions must contain ':' to separate the argument specification
from the function name. This is needed when defining conditionals or variants,
or when building a parameter text from the number of arguments of the
function.
! LaTeX Error: Function '\bar' contains no ':'.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Code-level functions must contain ':' to separate the argument specification
from the function name. This is needed when defining conditionals or variants,
or when building a parameter text from the number of arguments of the
function.
============================================================
============================================================
TEST 10: cs_set:cn etc
============================================================
undefined
Defining \bar:nn on line ...
! Illegal parameter number in definition of \bar:nn.
<to be read again> 
                   3
l. ...  }
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
\long macro:#1#2->#1#2##3
! LaTeX Error: Control sequence \bar:nn already defined.
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
LaTeX has been asked to create a new control sequence '\bar:nn' but this name
has already been used elsewhere.
The current meaning is:
  \long macro:#1#2->#1#2##3
Defining \bar:nn on line ...
\protected\long macro:#1#2->#1
! LaTeX Error: Function '\bar:abcdefghi' is not a base function
For immediate help type H <return>.
 ...                                              
l. ...  }
This is a coding error.
Functions defined through \cs_new:Nn must have a signature consisting of only
normal arguments 'N' and 'n'. The signature 'abcdefghi' of '\bar:abcdefghi'
contains other arguments 'abcdefghi'. To define variants use
\cs_generate_variant:Nn and to define other functions use \cs_new:Npn.
Defining \bar:abcdefghi on line ...
============================================================
