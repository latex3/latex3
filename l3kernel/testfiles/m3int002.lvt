%
% Copyright (C) 2010-2012 The LaTeX3 Project
%

\documentclass{minimal}

\input{regression-test}

\RequirePackage[check-declarations,log-functions]{expl3}



% Everything before this is ignored by the test system.
\START

\AUTHOR{LaTeX3 Project}


% don't display stuff from executing \begin{document}
\OMIT
\begin{document}
\TIMO

\ExplSyntaxOn

\OMIT
  \int_new:N \l_A_int
  \tl_new:N  \l_A_tl
\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Comparing~integer~values~as~predicates } {
  \bool_if:nTF { \int_compare_p:nNn { 17 } = { -17 }      }
    { \ERROR } { \FALSE } \NEWLINE
  \bool_if:nTF { \int_compare_p:nNn { 17 } = { -17 + 34 } }
    { \TRUE } { \ERROR } \NEWLINE
  \bool_if:nTF { \int_compare_p:nNn { 17 } > { -17 }      }
    { \TRUE } { \ERROR } \NEWLINE
  \bool_if:nTF { \int_compare_p:nNn { 17 } < { -17 }      }
    { \ERROR } { \FALSE } \NEWLINE
}

\TESTEXP { Comparing~integer~values } {
  \int_compare:nNnTF { 17 } = { -17 }      { \ERROR } { \FALSE } \NEWLINE
  \int_compare:nNnTF { 17 } = { -17 + 34 } { \TRUE }  { \ERROR } \NEWLINE
  \int_compare:nNnTF { 17 } > { -17 }      { \TRUE }  { \ERROR } \NEWLINE
  \int_compare:nNnTF { 17 } < { -17 }      { \ERROR } { \FALSE } \NEWLINE
  \int_compare:nNnT { 17 } = { -17 }      { \ERROR } \NEWLINE
  \int_compare:nNnT { 17 } = { -17 + 34 } { \TRUE }  \NEWLINE
  \int_compare:nNnT { 17 } > { -17 }      { \TRUE }  \NEWLINE
  \int_compare:nNnT { 17 } < { -17 }      { \ERROR } \NEWLINE
  \int_compare:nNnF { 17 } = { -17 }      { \FALSE } \NEWLINE
  \int_compare:nNnF { 17 } = { -17 + 34 } { \ERROR } \NEWLINE
  \int_compare:nNnF { 17 } > { -17 }      { \ERROR } \NEWLINE
  \int_compare:nNnF { 17 } < { -17 }      { \FALSE } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Integer~tests:~if~even~as~predicates } {
  \bool_if:nTF { \int_if_even_p:n { 1 + 4 } }
    { \ERROR } { \FALSE } \NEWLINE
  \bool_if:nTF { \int_if_even_p:n { 1 + 3 } }
    { \TRUE } { \ERROR } \NEWLINE
  \bool_if:nTF { \int_if_even_p:n { 0 } }
    { \TRUE } { \ERROR } \NEWLINE
  \bool_if:nTF { \int_if_even_p:n { -1 } }
    { \ERROR } { \FALSE } \NEWLINE
}

\TESTEXP { Integer~tests:~if~even } {
  \int_if_even:nTF { 1 + 4 } { \ERROR } { \FALSE } \NEWLINE
  \int_if_even:nTF { 1 + 3 } { \TRUE }  { \ERROR } \NEWLINE
  \int_if_even:nTF { 0 }     { \TRUE }  { \ERROR } \NEWLINE
  \int_if_even:nTF { -1 }    { \ERROR } { \FALSE } \NEWLINE
  \int_if_even:nT { 1 + 4 } { \ERROR } \NEWLINE
  \int_if_even:nT { 1 + 3 } { \TRUE }  \NEWLINE
  \int_if_even:nT { 0 }     { \TRUE }  \NEWLINE
  \int_if_even:nT { -1 }    { \ERROR } \NEWLINE
  \int_if_even:nF { 1 + 4 } { \FALSE } \NEWLINE
  \int_if_even:nF { 1 + 3 } { \ERROR } \NEWLINE
  \int_if_even:nF { 0 }     { \ERROR } \NEWLINE
  \int_if_even:nF { -1 }    { \FALSE } \NEWLINE
}

\TESTEXP { Integer~tests:~if~odd~as~predicates } {
  \bool_if:nTF { \int_if_odd_p:n { 1 + 4 } }
    { \TRUE } { \ERROR } \NEWLINE
  \bool_if:nTF { \int_if_odd_p:n { 1 + 3 } }
    { \ERROR } { \FALSE } \NEWLINE
  \bool_if:nTF { \int_if_odd_p:n { 0 } }
    { \ERROR } { \FALSE } \NEWLINE
  \bool_if:nTF { \int_if_odd_p:n { -1 } }
    { \TRUE } { \ERROR } \NEWLINE
}

\TESTEXP { Integer~tests:~if~odd } {
  \int_if_odd:nTF { 1 + 4 } { \TRUE } { \ERROR } \NEWLINE
  \int_if_odd:nTF { 1 + 3 } { \ERROR } { \FALSE } \NEWLINE
  \int_if_odd:nTF { 0 }     { \ERROR } { \FALSE } \NEWLINE
  \int_if_odd:nTF { -1 }    { \TRUE } { \ERROR } \NEWLINE
  \int_if_odd:nT { 1 + 4 } { \TRUE } \NEWLINE
  \int_if_odd:nT { 1 + 3 } { \ERROR } \NEWLINE
  \int_if_odd:nT { 0 }     { \ERROR } \NEWLINE
  \int_if_odd:nT { -1 }    { \TRUE } \NEWLINE
  \int_if_odd:nF { 1 + 4 } { \ERROR } \NEWLINE
  \int_if_odd:nF { 1 + 3 } { \FALSE } \NEWLINE
  \int_if_odd:nF { 0 }     { \FALSE } \NEWLINE
  \int_if_odd:nF { -1 }    { \ERROR } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Integer~while-do~and~do-while } {
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_while_do:nNnn { \l_A_int } < { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_do_while:nNnn { \l_A_int } < { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_while_do:nNnn { \l_A_int } < { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_do_while:nNnn { \l_A_int } < { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
}

\TEST { Integer~until-do~and~do-until } {
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_until_do:nNnn { \l_A_int } > { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_do_until:nNnn { \l_A_int } > { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_until_do:nNnn { \l_A_int } > { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_do_until:nNnn { \l_A_int } > { 10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
  \int_set:Nn \l_A_int { 10 }
  \tl_set:Nn  \l_A_tl  { 15 }
\TIMO

\TESTEXP { Evaluating~integer~expressions } {
  \int_eval:n { 50 / 5 \use_none:n { \par } } \NEWLINE
  \int_eval:n { ( \l_A_int * 5 ) / ( \l_A_int - 5 ) } \NEWLINE
  \int_eval:n { \l_A_tl +  \l_A_int * 3 - ( 3 + 4 * 5 ) }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Absolute~value~for~integers } {
  \int_abs:n { 0 \use_none:n { \par } } \NEWLINE
  \int_abs:n { 50 / -5 }   \NEWLINE
  \int_abs:n { 50 / 5 }    \NEWLINE
  \int_abs:n { + - + 40 }  \NEWLINE
  \int_abs:n { - 15 + 30 } \NEWLINE
  \int_abs:n { - 15 - 30 } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Integer~division:~truncation } {
  \int_div_truncate:nn { 10 }  { 5 }  \NEWLINE
  \int_div_truncate:nn { 14 }  { 5 }  \NEWLINE
  \int_div_truncate:nn { 9 }   { 5 }  \NEWLINE
  \int_div_truncate:nn { -10 } { 5 }  \NEWLINE
  \int_div_truncate:nn { -14 } { 5 }  \NEWLINE
  \int_div_truncate:nn { -9 }  { 5 }  \NEWLINE
  \int_div_truncate:nn { 10 }  { -5 } \NEWLINE
  \int_div_truncate:nn { 14 }  { -5 } \NEWLINE
  \int_div_truncate:nn { 9 }   { -5 } \NEWLINE
  \int_div_truncate:nn { -10 } { -5 } \NEWLINE
  \int_div_truncate:nn { -14 } { -5 } \NEWLINE
  \int_div_truncate:nn { -9 }  { -5 } \NEWLINE
  \int_div_truncate:nn { \c_max_int     } {   \c_max_int } \NEWLINE
  \int_div_truncate:nn { \c_max_int     } { - \c_max_int } \NEWLINE
  \int_div_truncate:nn { \c_max_int - 1 } {   \c_max_int } \NEWLINE
  \int_div_truncate:nn {   \c_max_int } {   \c_max_int / 2     } \NEWLINE
  \int_div_truncate:nn {   \c_max_int } {   \c_max_int / 2 - 1 } \NEWLINE
  \int_div_truncate:nn { - \c_max_int } {   \c_max_int / 2     } \NEWLINE
  \int_div_truncate:nn { - \c_max_int } {   \c_max_int / 2 - 1 } \NEWLINE
  \int_div_truncate:nn {   \c_max_int } { - \c_max_int / 2     } \NEWLINE
  \int_div_truncate:nn {   \c_max_int } { - \c_max_int / 2 + 1 } \NEWLINE
  \int_div_truncate:nn { - \c_max_int } { - \c_max_int / 2     } \NEWLINE
  \int_div_truncate:nn { - \c_max_int } { - \c_max_int / 2 + 1 } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Maximum~and~minimum~integers } {
  \int_max:nn { 7 }    { 11 }      \NEWLINE
  \int_max:nn { 7 }    { -11 }     \NEWLINE
  \int_max:nn { -7 }   { -11 }     \NEWLINE
  \int_max:nn {  7 }   { 7 }       \NEWLINE
  \int_max:nn {  7 }   { -7 }      \NEWLINE
  \int_max:nn { -7 }   { -7 }      \NEWLINE
  \int_max:nn { -999 } { - 5 + 6 } \NEWLINE
  \int_min:nn { 7 }    { 11 }      \NEWLINE
  \int_min:nn { 7 }    { -11 }     \NEWLINE
  \int_min:nn { -7 }   { -11 }     \NEWLINE
  \int_min:nn {  7 }   { 7 }       \NEWLINE
  \int_min:nn {  7 }   { -7 }      \NEWLINE
  \int_min:nn { -7 }   { -7 }      \NEWLINE
  \int_min:nn { -999 } { - 5 + 6 } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Integer~division:~modulo } {
  \int_mod:nn { 10 }  { 5 }  \NEWLINE
  \int_mod:nn { 14 }  { 5 }  \NEWLINE
  \int_mod:nn { 9 }   { 5 }  \NEWLINE
  \int_mod:nn { -10 } { 5 }  \NEWLINE
  \int_mod:nn { -14 } { 5 }  \NEWLINE
  \int_mod:nn { -9 }  { 5 }  \NEWLINE
  \int_mod:nn { 10 }  { -5 } \NEWLINE
  \int_mod:nn { 14 }  { -5 } \NEWLINE
  \int_mod:nn { 9 }   { -5 } \NEWLINE
  \int_mod:nn { -10 } { -5 } \NEWLINE
  \int_mod:nn { -14 } { -5 } \NEWLINE
  \int_mod:nn { -9 }  { -5 } \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Integer~creation } {
  \OMIT
    \cs_undefine:N \l_A_int
    \cs_undefine:N \l_B_int
    \cs_undefine:N \g_A_int
    \cs_undefine:N \g_B_int
  \TIMO
  \int_new:N \l_A_int
  \int_new:c { g_A_int }
  \TYPE { \tex_meaning:D \l_A_int }
  \TYPE { \tex_meaning:D \g_A_int }
  {
    \int_new:N \l_B_int
    \int_new:c { g_B_int }
    \TYPE { \tex_meaning:D \l_B_int }
    \TYPE { \tex_meaning:D \g_B_int }
  }
  \TYPE { \tex_meaning:D \l_B_int }
  \TYPE { \tex_meaning:D \g_B_int }
}

\TEST { Integer~creation~errors } {
  \int_new:N \l_A_int
  \int_new:c  { g_A_int }
  {
    \int_new:N \l_B_int
    \int_new:c { g_B_int }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Constant~integer~creation } {
  \int_const:Nn \c_A_int { 10 / 2 }
  \TYPE { \tex_meaning:D \c_A_int }
  \TYPE { \int_use:N \c_A_int }
  {
    \int_const:cn { c_B_int } { -10 }
    \TYPE { \tex_meaning:D \c_B_int }
    \TYPE { \int_use:N \c_B_int }
  }
  \TYPE { \tex_meaning:D \c_B_int }
  \TYPE { \int_use:N \c_B_int }
}

\TEST { Constant~integer~creation~errors } {
  \int_const:Nn \c_A_int { 10 / 2 }
  {
    \int_const:cn { c_B_int } { -10 }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Set~integers~equal } {
  \int_set:Nn \l_A_int { 4 }
  \int_set:Nn \l_B_int { 0 }
  {
    \int_set_eq:NN \l_B_int \l_A_int
    \TYPE { \int_use:N \l_B_int }
  }
  \TYPE { \int_use:N \l_B_int }
  {
    \int_set_eq:Nc \l_B_int { l_A_int }
    \TYPE { \int_use:N \l_B_int }
  }
  \TYPE { \int_use:N \l_B_int }
  {
    \int_set_eq:cN { l_B_int } \l_A_int
    \TYPE { \int_use:N \l_B_int }
  }
  \TYPE { \int_use:N \l_B_int }
  {
    \int_set_eq:cc { l_B_int } { l_A_int }
    \TYPE { \int_use:N \l_B_int }
  }
  \TYPE { \int_use:N \l_B_int }
}

\TEST { Set~integers~equal~globally } {
  \int_set:Nn \l_A_int { 4 }
  \int_gset:Nn \g_B_int { 0 }
  {
    \int_gset_eq:NN \g_B_int \l_A_int
    \TYPE { \int_use:N \g_B_int }
  }
  \TYPE { \int_use:N \g_B_int }
  \int_gset:Nn \g_B_int { 0 }
  {
    \int_gset_eq:Nc \g_B_int { l_A_int }
    \TYPE { \int_use:N \g_B_int }
  }
  \TYPE { \int_use:N \g_B_int }
  \int_gset:Nn \g_B_int { 0 }
  {
    \int_gset_eq:cN { g_B_int } \l_A_int
    \TYPE { \int_use:N \g_B_int }
  }
  \TYPE { \int_use:N \g_B_int }
  \int_gset:Nn \g_B_int { 0 }
  {
    \int_gset_eq:cc { g_B_int } { l_A_int }
    \TYPE { \int_use:N \g_B_int }
  }
  \TYPE { \int_use:N \g_B_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Add~to~integers } {
  \int_set:Nn \l_A_int { 0 }
  {
    \int_add:Nn \l_A_int { 8 }
    \TYPE { \int_use:N \l_A_int }
    \int_add:Nn \l_A_int { -10 }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_add:cn { l_A_int } { 8 }
    \TYPE { \int_use:N \l_A_int }
    \int_add:cn { l_A_int } { -10 }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST { Add~to~integers~globally } {
  \int_gset:Nn \g_A_int { 0 }
  {
    \int_gadd:Nn \g_A_int { 8 }
    \TYPE { \int_use:N \g_A_int }
    \int_gadd:Nn \g_A_int { -10 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  {
    \int_gadd:cn { g_A_int } { 8 }
    \TYPE { \int_use:N \g_A_int }
    \int_gadd:cn { g_A_int } { -10 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Decreasing~integers } {
  \int_set:Nn \l_A_int { 0 }
  {
    \int_decr:N \l_A_int
    \TYPE { \int_use:N \l_A_int }
    \int_decr:N \l_A_int
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_decr:c { l_A_int }
    \TYPE { \int_use:N \l_A_int }
    \int_decr:c { l_A_int }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST { Decreasing~integers~globally } {
  \int_gset:Nn \g_A_int { 0 }
  {
    \int_gdecr:N \g_A_int
    \TYPE { \int_use:N \g_A_int }
    \int_gdecr:N \g_A_int
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  {
    \int_gdecr:c { g_A_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gdecr:c { g_A_int }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Increasing~integers } {
  \int_set:Nn \l_A_int { 0 }
  {
    \int_incr:N \l_A_int
    \TYPE { \int_use:N \l_A_int }
    \int_incr:N \l_A_int
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_incr:c { l_A_int }
    \TYPE { \int_use:N \l_A_int }
    \int_incr:c { l_A_int }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST { Increasing~integers~globally } {
  \int_gset:Nn \g_A_int { 0 }
  {
    \int_gincr:N \g_A_int
    \TYPE { \int_use:N \g_A_int }
    \int_gincr:N \g_A_int
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  {
    \int_gincr:c { g_A_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gincr:c { g_A_int }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Setting~integers~to~arbitrary~values } {
  {
    \int_set:Nn \l_A_int { 0 }
    \TYPE { \int_use:N \l_A_int }
    \int_set:Nn \l_A_int { \c_max_int }
    \TYPE { \int_use:N \l_A_int }
    \int_set:Nn \l_A_int { -\c_max_int }
    \TYPE { \int_use:N \l_A_int }
    \int_set:Nn \l_A_int { ( 7 * 7 + 6 ) * 6}
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_set:cn { l_A_int } { 0 }
    \TYPE { \int_use:N\l_A_int }
    \int_set:cn { l_A_int } { \c_max_int }
    \TYPE { \int_use:N \l_A_int }
    \int_set:cn { l_A_int } { -\c_max_int }
    \TYPE { \int_use:N \l_A_int }
    \int_set:cn { l_A_int } { ( 7 * 7 + 6 ) * 6}
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST { Setting~integers~to~arbitrary~values~globally } {
  {
    \int_gset:Nn \g_A_int { 0 }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:Nn \g_A_int { \c_max_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:Nn \g_A_int { -\c_max_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:Nn \g_A_int { ( 7 * 7 + 6 ) * 6 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  {
    \int_gset:cn { g_A_int } { 0 }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:cn { g_A_int } { \c_max_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:cn { g_A_int } { -\c_max_int }
    \TYPE { \int_use:N \g_A_int }
    \int_gset:cn { g_A_int } { ( 7 * 7 + 6 ) * 6 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Subtract~from~integers } {
  \int_set:Nn \l_A_int { 0 }
  {
    \int_sub:Nn \l_A_int { 8 }
    \TYPE { \int_use:N \l_A_int }
    \int_sub:Nn \l_A_int { -10 }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_sub:cn { l_A_int } { 8 }
    \TYPE { \int_use:N \l_A_int }
    \int_sub:cn { l_A_int } { -10 }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST { Subtract~from~integers~globally } {
  \int_gset:Nn \g_A_int { 0 }
  {
    \int_gsub:Nn \g_A_int { 8 }
    \TYPE { \int_use:N \g_A_int }
    \int_gsub:Nn \g_A_int { -10 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  {
    \int_gsub:cn { g_A_int } { 8 }
    \TYPE { \int_use:N \g_A_int }
    \int_gsub:cn { g_A_int } { -10 }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Zeroing~integers } {
  \int_set:Nn \l_A_int { 1234 }
  {
    \int_zero:N \l_A_int
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
  {
    \int_zero:c { l_A_int }
    \TYPE { \int_use:N \l_A_int }
  }
  \TYPE { \int_use:N \l_A_int }
}

\TEST {Zeroing~integers~globally } {
  \int_gset:Nn \g_A_int { 1234 }
  {
    \int_gzero:N \g_A_int
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
  \int_gset:Nn \g_A_int { 1234 }
  {
    \int_gzero:c { g_A_int }
    \TYPE { \int_use:N \g_A_int }
  }
  \TYPE { \int_use:N \g_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Integer~variable~overflows } {
  \int_set:Nn \l_A_int { \c_max_int }
  \int_incr:N \l_A_int
  \TYPE { \int_use:N \l_A_int }
  \int_decr:N \l_A_int
  \TYPE { \int_use:N \l_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Showing~integers } {
  \int_set:Nn \l_A_int { 123 }
  \int_show:N \l_A_int
  \int_show:c { l_A_int }
  \int_show:n { 123 + 2 * \l_A_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\OMIT
  \int_set:Nn \l_A_int { 123 }
  \int_set:Nn \l_B_int { 678 }
\TIMO

\TESTEXP { Using~integers } {
  \int_use:N \l_A_int \NEWLINE
  \int_use:c { l_B_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Integer~conversion~to~Arabic } {
  \exp_not:f { \int_to_arabic:n { 0 }              } \NEWLINE
  \exp_not:f { \int_to_arabic:n { 2 }              } \NEWLINE
  \exp_not:f { \int_to_arabic:n { 12 }             } \NEWLINE
  \exp_not:f { \int_to_arabic:n {  ( 2 + 7 ) / 3 } } \NEWLINE
  [ \exp_not:f { \int_to_arabic:n { a } } ]
}

\TESTEXP { Integer~conversion~to~alph } {
  [ \exp_not:f { \int_to_alph:n { 0 } } ]      \NEWLINE
  \exp_not:f { \int_to_alph:n { 2 }          } \NEWLINE
  \exp_not:f { \int_to_alph:n { 12 }         } \NEWLINE
  \exp_not:f { \int_to_alph:n { 99 }         } \NEWLINE
  [ \exp_not:f { \int_to_alph:n { -4 } } ]     \NEWLINE
  \exp_not:f { \int_to_alph:n { \c_max_int } } \NEWLINE
  [ \exp_not:f { \int_to_Alph:n { 0 } } ]      \NEWLINE
  \exp_not:f { \int_to_Alph:n { 2 }          } \NEWLINE
  \exp_not:f { \int_to_Alph:n { 12 }         } \NEWLINE
  \exp_not:f { \int_to_Alph:n { 99 }         } \NEWLINE
  [ \exp_not:f { \int_to_Alph:n { -4 } } ]     \NEWLINE
  \exp_not:f { \int_to_Alph:n { \c_max_int } } \NEWLINE
}

\TESTEXP { Integer~conversion~to~binary } {
  \exp_not:f { \int_to_binary:n { 0 }          } \NEWLINE
  \exp_not:f { \int_to_binary:n { 2 }          } \NEWLINE
  \exp_not:f { \int_to_binary:n { 12 }         } \NEWLINE
  \exp_not:f { \int_to_binary:n { 99 }         } \NEWLINE
  \exp_not:f { \int_to_binary:n { -4 }         } \NEWLINE
  \exp_not:f { \int_to_binary:n { \c_max_int } } \NEWLINE
}

\TESTEXP { Integer~conversion~to~hexadecimal } {
  \exp_not:f { \int_to_hexadecimal:n { 0 }          } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { 2 }          } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { 12 }         } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { 99 }         } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { -4 }         } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { -99 }        } \NEWLINE
  \exp_not:f { \int_to_hexadecimal:n { \c_max_int } } \NEWLINE
}

\TESTEXP { Integer~conversion~to~octal } {
  \exp_not:f { \int_to_octal:n { 0 }          } \NEWLINE
  \exp_not:f { \int_to_octal:n { 2 }          } \NEWLINE
  \exp_not:f { \int_to_octal:n { 12 }         } \NEWLINE
  \exp_not:f { \int_to_octal:n { 99 }         } \NEWLINE
  \exp_not:f { \int_to_octal:n { -4 }         } \NEWLINE
  \exp_not:f { \int_to_octal:n { -99 }        } \NEWLINE
  \exp_not:f { \int_to_octal:n { \c_max_int } } \NEWLINE
}

\TESTEXP { Integer~conversion~to~Roman~numerals } {
  [ \int_to_roman:n { 0 } ]  \NEWLINE
  \int_to_roman:n { 2 }      \NEWLINE
  \int_to_roman:n { 12 }     \NEWLINE
  \int_to_roman:n { 99 }     \NEWLINE
  [ \int_to_roman:n { -4 } ] \NEWLINE
  [ \int_to_Roman:n { 0 } ]  \NEWLINE
  \int_to_Roman:n { 2 }      \NEWLINE
  \int_to_Roman:n { 12 }     \NEWLINE
  \int_to_Roman:n { 99 }     \NEWLINE
  [ \int_to_Roman:n { -4 } ] \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Integers~from~alph } {
  \int_from_alph:n { z }   \NEWLINE
  \int_from_alph:n { abc } \NEWLINE
  \int_from_alph:n { Z }   \NEWLINE
  \int_from_alph:n { ABC } \NEWLINE
  \int_from_alph:n { aBc } \NEWLINE
}

\TESTEXP { Integers~from~binary } {
  \int_from_binary:n { 10101 }  \NEWLINE
  \int_from_binary:n { 11111 }  \NEWLINE
  \int_from_binary:n { -11010 } \NEWLINE
}

\TESTEXP { Integers~from~hexadecimal } {
  \int_from_hexadecimal:n { 34fe3 }  \NEWLINE
  \int_from_hexadecimal:n { FFFFFF } \NEWLINE
  \int_from_hexadecimal:n { 12345 }  \NEWLINE
  \int_from_hexadecimal:n { -35 }    \NEWLINE
}

\TESTEXP { Integers~from~octal } {
  \int_from_octal:n { 343 }   \NEWLINE
  \int_from_octal:n { 12345 } \NEWLINE
  \int_from_octal:n { -35 }   \NEWLINE
}

\TESTEXP { Integers~from~Roman~numerals } {
  \int_from_roman:n { MCMXCII }    \NEWLINE
  \int_from_roman:n { MXMMCDI }    \NEWLINE
  \int_from_roman:n { IV }         \NEWLINE
  \int_from_roman:n { iiiiiiiiiX } \NEWLINE % Surprising
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TESTEXP { Conversion~of~an~integer~to~an~arbitrary~base } {
  \exp_not:f { \int_to_base:nn { 123 }     { 7 }     } \NEWLINE
  \exp_not:f { \int_to_base:nn { 10 * 10 } { 3 * 3 } } \NEWLINE
  \exp_not:f { \int_to_base:nn { -4 - 6 }  { 5 }     } \NEWLINE
  \exp_not:f { \int_to_base:nn { 30 }      { 20 }    } \NEWLINE
}

\TESTEXP { Conversion~of~an~integer~from~an~arbitrary~base } {
  \int_from_base:nn { 123 } { 7 }     \NEWLINE
  \int_from_base:nn { 100 } { 3 * 3 } \NEWLINE
  \int_from_base:nn { -10 } { 5 }     \NEWLINE
  \int_from_base:nn { aa }  { 20 }    \NEWLINE
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Public~integer~constants } {
  \TYPE { \int_use:N \c_max_int }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Internal~integer~constants } {
  \TYPE { \int_use:N \c_minus_one }
  \TYPE { \int_use:N \c_zero      }
  \TYPE { \int_use:N \c_one       }
  \TYPE { \int_use:N \c_two       }
  \TYPE { \int_use:N \c_three     }
  \TYPE { \int_use:N \c_four      }
  \TYPE { \int_use:N \c_five      }
  \TYPE { \int_use:N \c_six       }
  \TYPE { \int_use:N \c_seven     }
  \TYPE { \int_use:N \c_eight     }
  \TYPE { \int_use:N \c_nine      }
  \TYPE { \int_use:N \c_ten       }
  \TYPE { \int_use:N \c_eleven    }
  \TYPE { \int_use:N \c_twelve    }
  \TYPE { \int_use:N \c_thirteen  }
  \TYPE { \int_use:N \c_fourteen  }
  \TYPE { \int_use:N \c_fifteen   }
  \TYPE { \int_use:N \c_sixteen   }
  \TYPE { \int_use:N \c_thirty_two             }
  \TYPE { \int_use:N \c_one_hundred            }
  \TYPE { \int_use:N \c_two_hundred_fifty_five }
  \TYPE { \int_use:N \c_two_hundred_fifty_six  }
  \TYPE { \int_use:N \c_one_thousand           }
  \TYPE { \int_use:N \c_ten_thousand           }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Integer~while-do~and~do-while } {
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_while_do:nn { \l_A_int  <  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_do_while:nn { \l_A_int  <  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_while_do:nn { \l_A_int  <  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_do_while:nn { \l_A_int  <  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
}

\TEST { Integer~until-do~and~do-until } {
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_until_do:nn { \l_A_int  >  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 0 }
  \TIMO
  \int_do_until:nn { \l_A_int  >  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_until_do:nn { \l_A_int  >  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
  \SEPARATOR
  \OMIT
    \int_set:Nn \l_A_int { 10 }
  \TIMO
  \int_do_until:nn { \l_A_int  >  10 }
    {
      \message { [ \int_use:N \l_A_int ] }
      \int_incr:N \l_A_int
    }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\END
