%
% Copyright (C) 2022 The LaTeX Project
%
\input{regression-test}

\RequirePackage[enable-debug]{expl3}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation , log-functions }
\ExplSyntaxOff

\documentclass{minimal}

\START
\AUTHOR{Joseph Wright}

\ExplSyntaxOn

\sys_if_engine_ptex:T { \END }

\TEST { Grapheme~mapping }
  {
    % The aim here is to use the comprehensive test list from the Unicode
    % Consortium rather than our own tests
    %
    % Each non-comment line in the test list has series of codepoints with
    % markers for where a break is forbidden and where one is expected - there
    % are no optional breaks
    %
    % We map through this list and turn each codepoint into a character/series
    % of bytes. We store each character in two token lists: one of just the
    % characters, one with them divided up into parenthetic groups based on the
    % expected breaks. We then apply the grapheme mapping to the first version,
    % introducing parenthesis to divide it up. The two results should be the
    % same, other than where noted. (We do not worry about token lists which start
    % with LF or CR, and do not currently have extended emoji data so skip those
    % cases.)
    %
    \OMIT
      \ior_open:Nn \g_tmpa_ior { GraphemeBreakTest.txt }
    \TIMO
    \use:x
      {
        \cs_set_protected:Npn \exp_not:N \test_auxi:w
          \tl_to_str:n { ÷ } ##1 \char_generate:nn { `\^^I } { 12 }
          \c_hash_str ##2 \exp_not:N \q_stop
      }
      { \test_auxii:nNNNNw {#2} #1 \q_stop }
    \cs_set_protected:Npx \test_auxii:nNNNNw #1#2#3#4#5#6 \q_stop
      {
        % We skip tests where the first token is LF or CR
        \exp_not:N \bool_lazy_or:nnF
          { \exp_not:N \str_if_eq_p:nn {#2#3#4#5} { 000A } }
          { \exp_not:N \str_if_eq_p:nn {#2#3#4#5} { 000D } }
          {
            \exp_not:N \test_auxiii:nnnw {#1} { } { } #2#3#4#5#6
              \exp_not:N \q_recursion_tail
              \tl_to_str:n { ÷ } \exp_not:N \q_recursion_stop
          }
      }
    \use:x
      {
        \cs_set_protected:Npn \exp_not:N \test_auxiii:nnnw
          ##1##2##3##4 \tl_to_str:n { ÷ }
      }
      {
        \quark_if_recursion_tail_stop_do:nn {#4}
          { \test_auxvi:nnn {#1} {#2} {#3} }
        \test_auxiv:nnnn {#1} {#2} {#3} {#4}
      }
    \cs_set_protected:Npx \test_auxiv:nnnn #1#2#3#4
      {
        \exp_not:N \test_auxv:nnnnw {#1} {#2} {#3} { } #4
          \tl_to_str:n { × } \exp_not:N \q_recursion_tail
          \tl_to_str:n { × } \exp_not:N \q_recursion_stop
      }
    \use:x
      {
        \cs_set_protected:Npn \exp_not:N \test_auxv:nnnnw
          ##1##2##3##4##5 \tl_to_str:n { × }
      }
      {
        \quark_if_recursion_tail_stop_do:nn {#5}
          { \test_auxiii:nnnw {#1} {#2#4} { #3 (#4) } }
        \use:e
          {
            \test_auxv:nnnnw {#1} {#2} {#3}
              { #4 \test_generate:n {#5} }
          }
      }
    \cs_set_protected:Npn \test_auxvi:nnn #1#2#3
      {
        \str_if_eq:eeTF
          { \text_map_function:nN {#2} \test_auxvii:n }
          {#3}
          { \TRUE }
          {
            % At present we do not have extended pictogram data:
            % this area is therefore currently not supported
            \str_if_in:nnTF {#1} { ExtPict }
              {
                 \str_if_in:nnTF {#1} { ZWJ_ExtCccZwj }
                    { \FALSE }
                    { \LONGTYPEOUT {#1} }
              }
              {
                \str_if_in:nnTF {#1} { UPPER~BLADE~SCISSORS } % Also a pictogram!
                  {
                    \str_if_in:nnTF {#1} { ZWJ_ExtCccZwj }
                      { \FALSE }
                      { \LONGTYPEOUT {#1} }
                  }
                  { \LONGTYPEOUT {#1} }
              }
          }
      }
    \cs_set:Npn \test_auxvii:n #1 { (#1) }
    \bool_lazy_or:nnTF
      { \sys_if_engine_luatex_p: }
      { \sys_if_engine_xetex_p: }
      {
        \cs_set:Npn \test_generate:n #1
          {
            \exp_args:Ne \char_generate:nn
              { " \tl_trim_spaces:n {#1} } { 12 }
          }
      }
      {
        \cs_set:Npn \test_generate:n #1
          {
            \exp_args:Ne \test_generate_aux:n
              {
                \exp_args:Ne \__kernel_codepoint_to_bytes:n
                  { " \tl_trim_spaces:n {#1} }
              }
          }
        \cs_set:Npn \test_generate_aux:n #1
          { \test_generate:nnnn #1 }
        \cs_set:Npn \test_generate:nnnn #1#2#3#4
          {
            \char_generate:nn {#1} { 12 }
            \tl_if_blank:nF {#2}
              { \char_generate:nn {#2} { 12 } }
            \tl_if_blank:nF {#3}
              { \char_generate:nn {#3} { 12 } }
            \tl_if_blank:nF {#4}
              { \char_generate:nn {#4} { 12 } }
          }
      }
    \ior_str_map_inline:Nn \g_tmpa_ior
      {
        \str_if_eq:eeF { \tl_head:w #1 \c_hash_str \q_stop } { \c_hash_str }
          {
            \tl_if_blank:nF {#1}
              { \test_auxi:w #1 \q_stop }
          }
      }
  }

\END