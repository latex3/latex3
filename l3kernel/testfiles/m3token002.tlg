This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
Author: Will Robertson
============================================================
TEST 1: catcodes generic functions
============================================================
14
> 14.
<recently read> \__int_eval_end: 
l.24 }
8
============================================================
============================================================
TEST 2: catcodes explicit functions
============================================================
0/0
1/1
2/2
3/3
4/4
5/5
6/6
7/7
8/8
9/9
10/10
11/11
12/12
13/13
14/14
15/15
============================================================
============================================================
TEST 3: lccode generic functions
============================================================
orig: 0
new: 14
> 14.
<recently read> \__int_eval_end: 
l.70 }
new: 8
============================================================
============================================================
TEST 4: uccode generic functions
============================================================
orig: 0
new: 14
> 14.
<recently read> \__int_eval_end: 
l.79 }
new: 8
============================================================
============================================================
TEST 5: sfcode generic functions
============================================================
orig: 3000
new: 14
> 14.
<recently read> \__int_eval_end: 
l.88 }
new: 8
============================================================
============================================================
TEST 6: mathcode generic functions
============================================================
orig: 20513
new: 14
> 14.
<recently read> \__int_eval_end: 
l.97 }
new: 8
============================================================
============================================================
TEST 7: token constants
============================================================
begin-group character {
end-group character }
math shift character *
alignment tab character *
macro parameter character #
superscript character ^
subscript character *
blank space  
the letter a
the character 1
macro:->\exp_not:N *
============================================================
============================================================
TEST 8: token if group begin
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 9: token if group end
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 10: token if math shift
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 11: token if alignment
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 12: token if parameter
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 13: token if math superscript
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 14: token if math subscript
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 15: token if space TODO BROKEN!!!!
============================================================
! Argument of \use_i:nn has an extra }.
<inserted text> 
                \par 
l.195 }
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.
Runaway argument?
! Paragraph ended before \use_i:nn was complete.
<to be read again> 
                   \par 
l.195 }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
UE\c_space_token \par 
FALSE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 16: token if letter
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 17: token if other
============================================================
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 18: token if active char
============================================================
TRUE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 19: if_eq_meaning (also see \cs_if_eq )
============================================================
TRUE
FALSE
FALSE
============================================================
============================================================
TEST 20: if_eq_catcode
============================================================
TRUE
TRUE
FALSE
FALSE
============================================================
============================================================
TEST 21: if_eq_charcode
============================================================
FALSE
FALSE
TRUE
============================================================
============================================================
TEST 22: cs vs macro (T/F/T T/T/F)
============================================================
TRUE
FALSE
TRUE
TRUE
TRUE
FALSE
============================================================
============================================================
TEST 23: if macro
============================================================
FALSE
FALSE
TRUE
TRUE
TRUE
TRUE
============================================================
============================================================
TEST 24: if long_macro
============================================================
FALSE
FALSE
FALSE
TRUE
FALSE
FALSE
============================================================
============================================================
TEST 25: if protected_macro
============================================================
FALSE
FALSE
FALSE
FALSE
TRUE
FALSE
============================================================
============================================================
TEST 26: if protected_long_macro
============================================================
FALSE
FALSE
FALSE
FALSE
FALSE
TRUE
============================================================
============================================================
TEST 27: token_if_expandable
============================================================
TRUE
TRUE
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 28: token_if_primitive
============================================================
FALSE
FALSE
TRUE
FALSE
TRUE
TRUE
TRUE
============================================================
============================================================
TEST 29: token_get_ _spec
============================================================
#1<
#2->#1###2
\protected\long 
#1/#2
#1###2
============================================================
============================================================
TEST 30: token_to_meaning
============================================================
undefined, undefined, undefined, \relax, \relax, \meaning
============================================================
