%
% Copyright (C) 2008-2012,2014,2015,2018,2020-2022 The LaTeX Project
%

\documentclass{minimal}
\input{regression-test}
\RequirePackage[enable-debug]{expl3}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation , log-functions }
\ExplSyntaxOff

\begin{document}

\START
\AUTHOR{Will Robertson, Bruno Le Floch}
\ExplSyntaxOn

\TEST{New~quark;~no~worries}{
  \quark_new:N \q_quark
  \cs_log:N \q_quark
}

\TEST{New~quark~with~same~name:~\ERROR!}{
  \quark_new:N \q_quark
}

\TESTEXP{Checking~for~\q_no_value~in~tokens:~expect~"YES~NO~NO"}{
  \quark_if_no_value:nTF { \q_no_value  }    { \YES   }{ \ERROR } ~
  \quark_if_no_value:nTF { \q_no_value abc } { \ERROR }{ \NO    } ~
  \quark_if_no_value:nTF { abc }             { \ERROR }{ \NO    }
}

\tl_set:Nn \l_tmpa_tl {\q_no_value}
\tl_set:Nn \l_tmpb_tl {abc}

\TESTEXP{Checking~for~\q_no_value:~expect~"YES~YES~NO"}{
  \quark_if_no_value:NTF \q_no_value  { \YES   }{ \ERROR } ~
  \quark_if_no_value:NTF \l_tmpa_tl { \YES   }{ \ERROR } ~
  \quark_if_no_value:NTF \l_tmpb_tl { \ERROR }{ \NO    }
}
\TESTEXP{Checking~for~\q_nil~in~tokens:~expect~"YES~NO~NO~NO~NO"}{
  \quark_if_nil:nTF { \q_nil  }    { \YES   }{ \ERROR } ~
  \quark_if_nil:oTF { \tl_to_str:n { \q_nil } } { \ERROR }{ \NO } ~
  \quark_if_nil:nTF { \q_nil abc } { \ERROR }{ \NO    } ~
  \quark_if_nil:nTF { abc }        { \ERROR }{ \NO    } ~
  \quark_if_nil:nTF {\cs:w q_nil\cs_end:} { \ERROR }{ \NO  }
}

\tl_set:Nn \l_tmpa_tl {\q_nil}
\tl_set:Nn \l_tmpb_tl {abc}

\TESTEXP{Checking~for~\q_nil:~expect~"YES~YES~NO"}{
  \quark_if_nil:NTF \q_nil       { \YES   }{ \ERROR } ~
  \quark_if_nil:NTF \l_tmpa_tl { \YES   }{ \ERROR } ~
  \quark_if_nil:NTF \l_tmpb_tl { \ERROR }{ \NO    }
}

\TESTEXP{Checking~for~\q_nil~after~expansion:~expect~"YES~YES~NO~YES"}{
 \quark_if_nil:oTF \q_nil       { \YES   }{ \ERROR } ~
 \quark_if_nil:oTF \l_tmpa_tl { \YES   }{ \ERROR } ~
 \quark_if_nil:oTF \l_tmpb_tl { \ERROR }{ \NO    } ~
 \quark_if_nil:oTF {\cs:w q_nil\cs_end:} { \YES }{ \ERROR  }
}

\TESTEXP{Selecting~tokens~before~\q_recursion_stop:~expect~"YES"}{
 \use_none_delimit_by_q_recursion_stop:w \ERROR abc \ERROR \q_recursion_stop
 \use_i_delimit_by_q_recursion_stop:nw \YES \ERROR  \ERROR \q_recursion_stop
}

% It's hard to test these because errors lead to infinite loops...
\TESTEXP{Inside~recursions~(expect~nothing)}{
  \quark_if_recursion_tail_stop:N  \q_recursion_tail  \ERROR \q_recursion_stop
  \quark_if_recursion_tail_stop:n {\q_recursion_tail} \ERROR \q_recursion_stop
}

\TESTEXP{Inside~recursions~(expect~`YESYESYESYES')}{
\quark_if_recursion_tail_stop_do:Nn\q_recursion_tail\YES\q_recursion_stop
\quark_if_recursion_tail_stop_do:Nn\q_recursion_tail\YES\NO\q_recursion_stop
\quark_if_recursion_tail_stop_do:nn{\q_recursion_tail}\YES\q_recursion_stop
\quark_if_recursion_tail_stop_do:nn{\q_recursion_tail}\YES\NO\q_recursion_stop
}

\TESTEXP{Recursion~edge~cases~(expect~nothing)}{
  \quark_if_recursion_tail_stop:n {{{{a}}}}
  \quark_if_recursion_tail_stop:n {{ab\iffalse}\fi}
}

\TEST{New~scan~mark;~no~worries}{
  \scan_new:N \s__foo
  \iow_term:x { \cs_meaning:N \s__foo }
}

\TEST{New~scan~mark,~same~name:~ERROR!}{
  \scan_new:N \s__foo
  % This oddness avoids the mapping stopping due to the internal
  % scan mark in the tl: it's only an issue at one specific place,
  % so we can alter the list length to avoid!
  \tl_gremove_all:Nn \g__scan_marks_tl \s_stop
  \TYPE \s_stop
  \tl_map_function:NN \g__scan_marks_tl \TYPE
}

\TESTEXP{Use~none~until~s__stop~(expect~nothing)}{
  \use_none_delimit_by_s_stop:w \ERROR \s_stop
}

\TEST{Scan~marks~do~nothing~(redundant)}{
  \s__foo
  \s_stop
}

\END
